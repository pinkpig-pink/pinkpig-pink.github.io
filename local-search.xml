<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HM-二维码生成、保存、扫码</title>
    <link href="/posts/53747.html"/>
    <url>/posts/53747.html</url>
    
    <content type="html"><![CDATA[<h1 id="二维码生成、保存、扫码"><a href="#二维码生成、保存、扫码" class="headerlink" title="二维码生成、保存、扫码"></a>二维码生成、保存、扫码</h1><h3 id="业务需求和目标："><a href="#业务需求和目标：" class="headerlink" title="业务需求和目标："></a>业务需求和目标：</h3><p>点击按钮–&gt;生成二维码–&gt;点击保存–&gt;实现二维码保存到相册–&gt;实现二维码扫码</p><h3 id="前置知识点："><a href="#前置知识点：" class="headerlink" title="前置知识点："></a>前置知识点：</h3><ol><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-qrcode-V5">QRCode</a> – &gt; 二维码生成组件</li><li>componentSnapshot –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-componentsnapshot-V5#componentsnapshotgetsync12"> componentSnapshot.getSync </a> –&gt; 组件截图模块</li><li>ImagePacker –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#imagecreateimagepacker">image.createImagePacker </a> –&gt; 图片打包器</li><li>fileIo –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-fileio-V5#fileioopensync">fileIo.openSync</a> | fileIo.writeSync | fileIo.closeSync –&gt; 文件管理模块</li><li>fileUri –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-fileuri-V5#fileurigeturifrompath">fileUri.getUriFromPath</a> –&gt; 文件 URI 模块</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-photoaccesshelper-V5#photoaccesshelpergetphotoaccesshelper">photoAccessHelper</a> –&gt; .getPhotoAccessHelper | .MediaAssetChangeRequest |.applyChanges –&gt; 相册管理模块</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-syscap-V5#caniuse">canIUse</a> –&gt; 系统能力</li><li>scanBarcode –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/scan-scanbarcode-api-V5#section829511911349">scanBarcode.startScanForResult</a> –&gt;默认扫码模块</li></ol><h3 id="业务实现流程"><a href="#业务实现流程" class="headerlink" title="业务实现流程"></a>业务实现流程</h3><p><img src="/posts/53747/1-1.jpeg" alt="img"></p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 掌握：二维码组件</span><span class="hljs-keyword">import</span> &#123; componentSnapshot, promptAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.ArkUI&#x27;</span><span class="hljs-keyword">import</span> image <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos.multimedia.image&#x27;</span><span class="hljs-keyword">import</span> &#123; fileIo, fileUri &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.CoreFileKit&#x27;</span><span class="hljs-keyword">import</span> &#123; photoAccessHelper &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.MediaLibraryKit&#x27;</span><span class="hljs-keyword">import</span> scanBarcode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@hms.core.scan.scanBarcode&#x27;</span><span class="hljs-comment">// 掌握：如何给组件截图</span><span class="hljs-comment">// 截图后将图片保存到相册</span><span class="hljs-comment">// 1. PixelMap格式数据转化为二进制数据</span><span class="hljs-comment">// 2. 通过 fileIo 将二进制数据写入到缓存目录</span><span class="hljs-comment">// 3. 再从缓存目录下载到相册</span><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">TestPage</span> &#123;  <span class="hljs-meta">@State</span>  <span class="hljs-attr">img</span>: <span class="hljs-title class_">PixelMap</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Row</span>() &#123;        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;点我截图&#x27;</span>)          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;            <span class="hljs-comment">// 获取指定Id组件的组件截图，返回PixelMap类型数据</span>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">img</span> = componentSnapshot.<span class="hljs-title function_">getSync</span>(<span class="hljs-string">&#x27;QRCode&#x27;</span>)          &#125;)        <span class="hljs-title class_">QRCode</span>(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>)          .<span class="hljs-title function_">id</span>(<span class="hljs-string">&#x27;QRCode&#x27;</span>)      &#125;      .<span class="hljs-title function_">layoutWeight</span>(<span class="hljs-number">1</span>)      .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">color</span>: <span class="hljs-title class_">Color</span>.<span class="hljs-property">Pink</span> &#125;)      .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Orange</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      <span class="hljs-title class_">Row</span>() &#123;        <span class="hljs-title class_">Image</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">img</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;80%&#x27;</span>)      &#125;      .<span class="hljs-title function_">layoutWeight</span>(<span class="hljs-number">1</span>)      .<span class="hljs-title function_">justifyContent</span>(<span class="hljs-title class_">FlexAlign</span>.<span class="hljs-property">Center</span>)      .<span class="hljs-title function_">alignItems</span>(<span class="hljs-title class_">VerticalAlign</span>.<span class="hljs-property">Center</span>)      <span class="hljs-title class_">SaveButton</span>()        .<span class="hljs-title function_">onClick</span>(<span class="hljs-title function_">async</span> () =&gt; &#123;          <span class="hljs-comment">// TODO  转换像素图片</span>          <span class="hljs-comment">// 创建图片打包控制器</span>          <span class="hljs-keyword">const</span> <span class="hljs-title class_">Packer</span> = image.<span class="hljs-title function_">createImagePacker</span>()          <span class="hljs-comment">// 将PixelMap像素类型数据转换为图片数据类型，其返回的是一个二进制的数据类型</span>          <span class="hljs-keyword">const</span> arrayBuffer = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Packer</span>.<span class="hljs-title function_">packing</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">img</span>, &#123; <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>, <span class="hljs-attr">quality</span>: <span class="hljs-number">98</span> &#125;)          <span class="hljs-comment">// TODO 将二进制图片数据保存到缓存</span>          <span class="hljs-comment">// 获取上下文，并拼接一个要保存到的文件路径</span>          <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>)          <span class="hljs-keyword">const</span> filePath = <span class="hljs-string">`<span class="hljs-subst">$&#123;context.cacheDir&#125;</span>/<span class="hljs-subst">$&#123;<span class="hljs-built_in">Date</span>.now()&#125;</span>.jpeg`</span>          <span class="hljs-comment">// 以创建、读写的模式打开缓存目录路径</span>          <span class="hljs-keyword">const</span> file = fileIo.<span class="hljs-title function_">openSync</span>(filePath, fileIo.<span class="hljs-property">OpenMode</span>.<span class="hljs-property">CREATE</span> | fileIo.<span class="hljs-property">OpenMode</span>.<span class="hljs-property">READ_WRITE</span>)          <span class="hljs-comment">// 将二进制数据写入缓存目录文件</span>          fileIo.<span class="hljs-title function_">writeSync</span>(file.<span class="hljs-property">fd</span>, arrayBuffer!)          <span class="hljs-comment">// 关闭文件</span>          fileIo.<span class="hljs-title function_">closeSync</span>(file.<span class="hljs-property">fd</span>)          <span class="hljs-comment">// TODO 将缓存文件保存到图库</span>          <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 1. 获取完成uri路径 (uri  统一资源标志符)</span>            <span class="hljs-keyword">let</span> uri = fileUri.<span class="hljs-title function_">getUriFromPath</span>(filePath) <span class="hljs-comment">// 拼接完整的uri路径， 在前面加上  协议:app名称</span>            <span class="hljs-comment">// 2. 创建一个相册模块实例对象</span>            <span class="hljs-keyword">const</span> phAccessHelper = photoAccessHelper.<span class="hljs-title function_">getPhotoAccessHelper</span>(context)            <span class="hljs-comment">// 3. 使用相册管理模块，通过指定的uri路径，复制图片文件创建到到相册图片文件中</span>            <span class="hljs-keyword">const</span> assetChangeRequest = photoAccessHelper.<span class="hljs-property">MediaAssetChangeRequest</span>.<span class="hljs-title function_">createImageAssetRequest</span>(context, uri)            <span class="hljs-comment">// 4. 通过相册实例提交创建图片请求</span>            <span class="hljs-keyword">await</span> phAccessHelper.<span class="hljs-title function_">applyChanges</span>(assetChangeRequest);            promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;保存成功&#x27;</span> &#125;)          &#125; <span class="hljs-keyword">catch</span> (err) &#123;            <span class="hljs-title class_">AlertDialog</span>.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(err, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>), <span class="hljs-attr">alignment</span>: <span class="hljs-title class_">DialogAlignment</span>.<span class="hljs-property">Center</span> &#125;)          &#125;        &#125;)      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;扫码&#x27;</span>)        .<span class="hljs-title function_">onClick</span>(<span class="hljs-title function_">async</span> () =&gt; &#123;          <span class="hljs-comment">// 当开发app，需要适配多端的时候，某一端可能存在无扫码功能，要进行判断</span>          <span class="hljs-keyword">if</span> (<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&#x27;SystemCapability.Multimedia.Scan.ScanBarcode&#x27;</span>)) &#123;            <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> scanBarcode.<span class="hljs-title function_">startScanForResult</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>))            <span class="hljs-title class_">AlertDialog</span>.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(res, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>), <span class="hljs-attr">alignment</span>: <span class="hljs-title class_">DialogAlignment</span>.<span class="hljs-property">Center</span> &#125;)          &#125; <span class="hljs-keyword">else</span> &#123;            promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;当前设备不支持&#x27;</span> &#125;)          &#125;        &#125;)    &#125;  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>业务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HM-权限申请</title>
    <link href="/posts/20117.html"/>
    <url>/posts/20117.html</url>
    
    <content type="html"><![CDATA[<h1 id="鸿蒙应用开发–权限申请"><a href="#鸿蒙应用开发–权限申请" class="headerlink" title="鸿蒙应用开发–权限申请"></a>鸿蒙应用开发–权限申请</h1><h2 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h2><p>根据授权方式的不同，权限类型可分为<strong>system_grant（系统授权）</strong>和<strong>user_grant（用户授权）。</strong></p><p><code>system_grant</code>指的是<strong>系统授权类型</strong>，在该类型的权限许可下，应用被允许访问的数据不会涉及到用户或设备的敏感信息，应用被允许执行的操作对系统或者其他应用产生的影响可控。</p><p>如果在应用中申请了<code>system_grant</code>权限，那么系统会在用户安装应用时，自动把相应权限授予给应用。</p><p><code>user_grant</code>指的是<strong>用户授权类型</strong>，在该类型的权限许可下，应用被允许访问的数据将会涉及到用户或设备的敏感信息，应用被允许执行的操作可能对系统或者其他应用产生严重的影响。</p><p>该类型权限不仅需要在安装包中申请权限，还需要在应用动态运行时，通过发送弹窗的方式请求用户授权。在用户手动允许授权后，应用才会真正获取相应权限，从而成功访问操作目标对象。</p><p>例如，在<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/app-permission-group-list-V5">应用权限列表</a>中，麦克风和摄像头对应的权限都是属于用户授权权限，列表中给出了详细的权限使用理由。应用需要在应用商店的详情页面，向用户展示所申请的<code>user_grant</code>权限列表。</p><h2 id="申请用户权限"><a href="#申请用户权限" class="headerlink" title="申请用户权限"></a>申请用户权限</h2><ol><li>在<code>module.json5</code>文件中声明应用需要请求的权限，且要设置需要使用的场景+使用原因</li></ol><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 权限申明</span><span class="hljs-attr">&quot;requestPermissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>  <span class="hljs-comment">// 网络请求--系统权限</span>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ohos.permission.INTERNET&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 麦克风权限 -- 用户权限</span>  <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ohos.permission.MICROPHONE&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;usedScene&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$string:reason_microphone&quot;</span>  <span class="hljs-comment">// 将来会自动显示在界面上告知用户</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span></code></pre></div><ol start="2"><li>在<code>string</code>文件中写<code>reason_microphone</code></li></ol><p><strong>注意：鸿蒙开发中，有三个 string 文件位置 base 、en_US 、zh_CN ,至少配两个，base 是必须配的，</strong></p><p><strong>以中文模式为例，需要配置 zh_CN 和 base</strong></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 里面还有其他的string值，这里只以reason_microphone为例</span>&#123;  <span class="hljs-string">&quot;string&quot;</span>: [     &#123;      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;reason_microphone&quot;</span>,      <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;面通App需要您授权麦克风才可以进行录音&quot;</span>    &#125;  ]&#125;</code></pre></div><ol start="3"><li>使用<code>abilityAccessCtrl</code>模块申请用户权限</li></ol><div class="code-wrapper"><pre><code class="hljs TS"><span class="hljs-keyword">const</span> mgr = abilityAccessCtrl.<span class="hljs-title function_">createAtManager</span>()<span class="hljs-keyword">const</span> firstReq = <span class="hljs-keyword">await</span> mgr.<span class="hljs-title function_">requestPermissionsFromUser</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>), [<span class="hljs-string">&quot;ohos.permission.MICROPHONE&quot;</span>])</code></pre></div><p><img src="/posts/20117/1-1.png" alt="image.png"></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 判断用户是否授权</span><span class="hljs-comment">// 申请授权的时候是一个数组，res.authResults是一个数组</span><span class="hljs-keyword">if</span> (firstReq.<span class="hljs-property">authResults</span>[<span class="hljs-number">0</span>] === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_DENIED</span>) &#123;  <span class="hljs-keyword">const</span> showSelect = <span class="hljs-keyword">await</span> promptAction.<span class="hljs-title function_">showDialog</span>(&#123;    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;温馨提示&#x27;</span>,    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;未授权使用麦克风将无法使用该面试录音功能，是否前往设置进行授权？&#x27;</span>,    <span class="hljs-attr">buttons</span>: [      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;离开&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#cccccc&#x27;</span> &#125;,      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;去授权&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#000000&#x27;</span> &#125;,    ]&#125;)</code></pre></div><p><img src="/posts/20117/1-2.png" alt="image.png"></p><ol start="4"><li>二次授权有多种模式，首推第一种</li></ol><p><strong>第一种：app 内唤起设置中心</strong></p><p><strong>使用</strong><code>requestPermissionOnSetting</code><strong>和首次申请授权</strong><code>requestPermissionsFromUser</code><strong>的使用方法一样</strong></p><div class="code-wrapper"><pre><code class="hljs TS"><span class="hljs-comment">// 弹窗返回选择结果，和button位置对应</span><span class="hljs-comment">// &#x27;离开&#x27;-- 0   &#x27;去授权&#x27;--1</span><span class="hljs-comment">// 同意二次授权</span><span class="hljs-keyword">if</span> (showSelect.<span class="hljs-property">index</span>) &#123;     <span class="hljs-comment">// showSelect是上面showDialog弹窗返回的用户选择结果</span>    <span class="hljs-comment">//  拉起二次授权面板</span>    <span class="hljs-keyword">const</span> secondReq = <span class="hljs-keyword">await</span> mgr.<span class="hljs-title function_">requestPermissionOnSetting</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>), [<span class="hljs-string">&quot;ohos.permission.MICROPHONE&quot;</span>])    <span class="hljs-comment">// 二次拒绝</span>    <span class="hljs-keyword">if</span> (secondReq[<span class="hljs-number">0</span>] === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_DENIED</span>) &#123;      promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;授权失败&#x27;</span> &#125;)      router.<span class="hljs-title function_">pushUrl</span>(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/Index&#x27;</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>) &#125;)    &#125;  &#125;</code></pre></div><p><img src="/posts/20117/1-3.png" alt="image.png"></p><p><strong>第二种方法：跳转到设置中心的应用管理 参考文档</strong> <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-inner-application-uiabilitycontext-V5#uiabilitycontextstartability">startAbility</a></p><p><strong>该方法也适用于其他应用唤起或跳转</strong></p><div class="code-wrapper"><pre><code class="hljs TS"><span class="hljs-keyword">if</span> (showSelect.<span class="hljs-property">index</span>) &#123;     <span class="hljs-comment">// showSelect是上面showDialog弹窗返回的用户选择结果</span>  <span class="hljs-keyword">let</span> <span class="hljs-attr">want</span>: <span class="hljs-title class_">Want</span> = &#123;      <span class="hljs-attr">bundleName</span>: <span class="hljs-string">&#x27;com.huawei.hmos.settings&#x27;</span>,   <span class="hljs-comment">// 要跳转到的应用包名</span>      <span class="hljs-attr">abilityName</span>: <span class="hljs-string">&#x27;com.huawei.hmos.settings.MainAbility&#x27;</span>, <span class="hljs-comment">// 跳转到的模块ability名</span>      <span class="hljs-attr">uri</span>: <span class="hljs-string">&#x27;application_info_entry&#x27;</span>,    <span class="hljs-comment">// 这是设置下应用与元服务的uri</span>      <span class="hljs-attr">parameters</span>: &#123;        <span class="hljs-attr">pushParams</span>: <span class="hljs-string">&#x27;com.example.interviewproject&#x27;</span>  <span class="hljs-comment">// 应用服务下，自己应用的包名</span>      &#125;    &#125;;    <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-keyword">as</span> common.<span class="hljs-property">UIAbilityContext</span>    context.<span class="hljs-title function_">startAbility</span>(want)&#125;</code></pre></div><p><strong>注意：</strong><code>pushParams</code><strong>是要填写自己应用的包名，该名字在</strong><code>app.json5</code><strong>文件中查看</strong></p><p><img src="/posts/20117/1-4.gif" alt="recording.gif"></p><p><strong>第三种方法：</strong></p><div class="code-wrapper"><pre><code class="hljs Ts"> <span class="hljs-comment">// 声明FunctionalButton</span><span class="hljs-title class_">FunctionalButton</span>(&#123;  <span class="hljs-attr">params</span>: &#123;    <span class="hljs-comment">// OpenType.OPEN_SETTING表示Button为打开授权设置页类型</span>    <span class="hljs-attr">openType</span>: functionalButtonComponentManager.<span class="hljs-property">OpenType</span>.<span class="hljs-property">OPEN_SETTING</span>,    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;去设置页授权&#x27;</span>,    <span class="hljs-comment">// 调整Button样式</span>    <span class="hljs-attr">styleOption</span>: &#123;      <span class="hljs-attr">styleConfig</span>: <span class="hljs-keyword">new</span> functionalButtonComponentManager.<span class="hljs-title class_">ButtonConfig</span>()        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Black</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)    &#125;  &#125;,</code></pre></div><h3 id="代码实例："><a href="#代码实例：" class="headerlink" title="代码实例："></a>代码实例：</h3><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-keyword">async</span> <span class="hljs-title function_">getPermissions</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-comment">// 授权控制器</span>    <span class="hljs-keyword">const</span> mgr = abilityAccessCtrl.<span class="hljs-title function_">createAtManager</span>()    <span class="hljs-comment">// 获取用户授权</span>    <span class="hljs-keyword">const</span> firstReq = <span class="hljs-keyword">await</span> mgr.<span class="hljs-title function_">requestPermissionsFromUser</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>), [<span class="hljs-string">&quot;ohos.permission.MICROPHONE&quot;</span>])    <span class="hljs-comment">// 判断用户是否授权</span>    <span class="hljs-comment">// 申请授权的时候是一个数组，res.authResults是一个数组</span>    <span class="hljs-keyword">if</span> (firstReq.<span class="hljs-property">authResults</span>[<span class="hljs-number">0</span>] === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_DENIED</span>) &#123;      <span class="hljs-keyword">const</span> showSelect = <span class="hljs-keyword">await</span> promptAction.<span class="hljs-title function_">showDialog</span>(&#123;        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;温馨提示&#x27;</span>,        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;未授权使用麦克风将无法使用该面试录音功能，是否前往设置进行授权？&#x27;</span>,        <span class="hljs-attr">buttons</span>: [          &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;离开&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#cccccc&#x27;</span> &#125;,          &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;去授权&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#000000&#x27;</span> &#125;,        ]      &#125;)      <span class="hljs-comment">// 弹窗返回选择结果，和button位置对应</span>      <span class="hljs-comment">// &#x27;离开&#x27;-- 0   &#x27;去授权&#x27;--1</span>      <span class="hljs-comment">// 同意二次授权</span>      <span class="hljs-keyword">if</span> (showSelect.<span class="hljs-property">index</span>) &#123;        <span class="hljs-comment">//  拉起二次授权面板</span>        <span class="hljs-keyword">const</span> secondReq = <span class="hljs-keyword">await</span> mgr.<span class="hljs-title function_">requestPermissionOnSetting</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>), [<span class="hljs-string">&quot;ohos.permission.MICROPHONE&quot;</span>])        <span class="hljs-comment">// 二次拒绝</span>        <span class="hljs-keyword">if</span> (secondReq[<span class="hljs-number">0</span>] === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_DENIED</span>) &#123;          promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;授权失败&#x27;</span> &#125;)          router.<span class="hljs-title function_">pushUrl</span>(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/Index&#x27;</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>) &#125;)        &#125;      &#125;    &#125;  &#125;</code></pre></div><h2 id="封装成-Permission-类"><a href="#封装成-Permission-类" class="headerlink" title="封装成 Permission 类"></a>封装成 Permission 类</h2><p>权限申请类：</p><p><strong>getPermission 方法：</strong></p><p>参数： permission: Permissions[ ] 返回 isAgree : boolean</p><p><strong>openPermissionSetting 方法：</strong></p><p>参数： permission: Permissions[ ] 返回 isAgree : boolean</p><p><strong>注意：</strong> <code>**requestPermissionOnSetting**</code><strong>比较特殊，其需要同组权限数组才能被唤起，不同组的多个权限数组无法唤起</strong></p><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/app-permission-group-list-V5">应用权限组列表</a></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-keyword">import</span> &#123; abilityAccessCtrl, <span class="hljs-title class_">Permissions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@kit.AbilityKit&quot;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Permission</span> &#123;  <span class="hljs-comment">// 创建权限管理器</span>  <span class="hljs-keyword">static</span> mgr = abilityAccessCtrl.<span class="hljs-title function_">createAtManager</span>()  <span class="hljs-keyword">static</span> ctx = <span class="hljs-title function_">getContext</span>()  <span class="hljs-comment">// 向用户请求权限</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">getPermission</span>(<span class="hljs-params"><span class="hljs-attr">permission</span>: <span class="hljs-title class_">Permissions</span>[]</span>) &#123;    <span class="hljs-comment">// 首次申请用户权限</span>    <span class="hljs-keyword">const</span> firstReq = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Permission</span>.<span class="hljs-property">mgr</span>.<span class="hljs-title function_">requestPermissionsFromUser</span>(<span class="hljs-title class_">Permission</span>.<span class="hljs-property">ctx</span>, permission)    <span class="hljs-comment">// 判断用户是否授权,有可能一次会有多个授权</span>    <span class="hljs-keyword">const</span> isAgree = firstReq.<span class="hljs-property">authResults</span>.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_GRANTED</span>)    <span class="hljs-keyword">return</span> isAgree  &#125;  <span class="hljs-comment">// 打开权限设置中心</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">openPermissionSetting</span>(<span class="hljs-params"><span class="hljs-attr">permission</span>: <span class="hljs-title class_">Permissions</span>[]</span>) &#123;    <span class="hljs-comment">// 二次拉起授权</span>    <span class="hljs-keyword">const</span> secondReq = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Permission</span>.<span class="hljs-property">mgr</span>.<span class="hljs-title function_">requestPermissionOnSetting</span>(<span class="hljs-title class_">Permission</span>.<span class="hljs-property">ctx</span>, permission)    <span class="hljs-keyword">const</span> isAgree = secondReq.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_GRANTED</span>)    <span class="hljs-keyword">return</span> isAgree  &#125;&#125;</code></pre></div><p><strong>使用案例：</strong></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 首次请求权限</span> <span class="hljs-keyword">const</span> isAgree = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Permission</span>.<span class="hljs-title function_">getPermission</span>([<span class="hljs-string">&#x27;ohos.permission.MICROPHONE&#x27;</span>]) <span class="hljs-keyword">if</span> (isAgree) &#123;   <span class="hljs-keyword">return</span> &#125; <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> promptAction.<span class="hljs-title function_">showDialog</span>(&#123;   <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;温馨提示&quot;</span>,   <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;未授权使用麦克风将无法使用该面试录音功能，是否前往设置进行授权？&quot;</span>,   <span class="hljs-attr">buttons</span>: [     &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;离开&#x27;</span>, <span class="hljs-attr">color</span>: $r(<span class="hljs-string">&#x27;app.color.common_gray_01&#x27;</span>) &#125;,     &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;去授权&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#000000&#x27;</span> &#125;   ] &#125;) <span class="hljs-comment">// 点击离开</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">index</span> === <span class="hljs-number">0</span>) &#123;   router.<span class="hljs-title function_">back</span>()   <span class="hljs-keyword">return</span> &#125; <span class="hljs-comment">// 二次拉起授权</span> <span class="hljs-keyword">const</span> isAgree2 = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Permission</span>.<span class="hljs-title function_">openPermissionSetting</span>([<span class="hljs-string">&#x27;ohos.permission.MICROPHONE&#x27;</span>]) <span class="hljs-comment">// 二次取消授权</span> <span class="hljs-keyword">if</span> (!isAgree2) &#123;   router.<span class="hljs-title function_">back</span>()   <span class="hljs-keyword">return</span> &#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>业务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HM-文件上传</title>
    <link href="/posts/30845.html"/>
    <url>/posts/30845.html</url>
    
    <content type="html"><![CDATA[<h1 id="鸿蒙应用开发–文件上传"><a href="#鸿蒙应用开发–文件上传" class="headerlink" title="鸿蒙应用开发–文件上传"></a>鸿蒙应用开发–文件上传</h1><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><p>唤起相册 –&gt; 从相册选择图片 –&gt; 将相册选择的图片上传到服务器</p><h3 id="前置知识点："><a href="#前置知识点：" class="headerlink" title="前置知识点："></a>前置知识点：</h3><ol><li><code>@ohos.file.picker</code>选择器模块 –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-picker-V5#photoviewpickerdeprecated"> PhotoViewPicker</a> –&gt; 从 API version 12 开始废弃。建议使用<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-photoaccesshelper-V5#photoviewpicker">photoAccessHelper.PhotoViewPicker</a>替代</li><li>fileIo –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-fileio-V5#fileioopensync">fileIo.openSync</a> | fileIo.writeSync | fileIo.closeSync –&gt; 文件管理模块</li><li><code>@ohos.request</code> (上传下载)模块 –&gt;<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-request-V5#requestuploadfile9-1"> request.uploadFile</a></li></ol><h3 id="业务实现流程："><a href="#业务实现流程：" class="headerlink" title="业务实现流程："></a>业务实现流程：</h3><p><img src="/posts/30845/1-1.png" alt="img"></p><div class="code-wrapper"><pre><code class="hljs TS"><span class="hljs-keyword">async</span> <span class="hljs-title function_">putUserAvatar</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">// TODO  用户选择图片</span>  <span class="hljs-comment">// 1. 创建一个图片选择器实例对象</span>  <span class="hljs-keyword">const</span> photoPick = <span class="hljs-keyword">new</span> picker.<span class="hljs-title class_">PhotoViewPicker</span>()  <span class="hljs-comment">// const xxx = new photoAccessHelper.PhotoViewPicker()</span>  <span class="hljs-comment">// 2. 调用selected方法打开相册</span>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> photoPick.<span class="hljs-title function_">select</span>(&#123;    <span class="hljs-title class_">MIMEType</span>: picker.<span class="hljs-property">PhotoViewMIMETypes</span>.<span class="hljs-property">IMAGE_TYPE</span>, <span class="hljs-comment">// 用户可选择的文件类型</span>    <span class="hljs-attr">maxSelectNumber</span>: <span class="hljs-number">3</span>    <span class="hljs-comment">// 用户可选择的文件数量</span>  &#125;)<span class="hljs-comment">// TODO 判断是否选择图片</span>  <span class="hljs-comment">// 判断是否选择了图片</span>  <span class="hljs-keyword">if</span> (!res.<span class="hljs-property">photoUris</span>) &#123;    <span class="hljs-keyword">return</span>  &#125;  <span class="hljs-comment">// AlertDialog.show(&#123; message: res.photoUris[0], alignment: DialogAlignment.Center &#125;)</span>  <span class="hljs-comment">// TODO 将文件复制到缓存目录，后续从缓存目录获取图片并上传</span>  <span class="hljs-comment">// fileIo.copyFileSync(&#x27;要复制的文件路径&#x27;,&#x27;复制到的目标文件路径&#x27;)</span>  <span class="hljs-comment">// fileIo.copyFileSync(&#x27;要复制的文件fd&#x27;,&#x27;复制到的目标文件路径&#x27;)</span>  <span class="hljs-comment">// 3. 获取app上下文</span>  <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>)  <span class="hljs-comment">// 4. 拿到上下文中的缓存目录路径，作为后面保存图片的文件夹</span>  <span class="hljs-keyword">const</span> targetPath = <span class="hljs-string">`<span class="hljs-subst">$&#123;context.cacheDir&#125;</span>/xxx.jpg`</span>  <span class="hljs-comment">// 5. 以只读方式打开图片文件，拿到文件对象</span>  <span class="hljs-keyword">const</span> photoObj = fileIo.<span class="hljs-title function_">openSync</span>(res.<span class="hljs-property">photoUris</span>[<span class="hljs-number">0</span>], fileIo.<span class="hljs-property">OpenMode</span>.<span class="hljs-property">READ_ONLY</span>)  <span class="hljs-comment">// 6. 从图片对象中获取图片id ，复制文件到目标文件夹</span>  <span class="hljs-keyword">try</span> &#123;    fileIo.<span class="hljs-title function_">copyFileSync</span>(photoObj.<span class="hljs-property">fd</span>, targetPath)  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-title class_">AlertDialog</span>.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(err), <span class="hljs-attr">alignment</span>: <span class="hljs-title class_">DialogAlignment</span>.<span class="hljs-property">Center</span> &#125;)  &#125;  <span class="hljs-comment">// TODO 将缓存在cache中的图片文件上传</span>  <span class="hljs-comment">// request.uploadFile()返回的是个Promise对象，Promise.then返回的值.on监听其上传成功或失败</span>  <span class="hljs-keyword">const</span> task = <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">uploadFile</span>(context, &#123;    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://hmajax.itheima.net/api/uploadimg&#x27;</span>,    <span class="hljs-attr">method</span>: http.<span class="hljs-property">RequestMethod</span>.<span class="hljs-property">POST</span>,    <span class="hljs-attr">header</span>: &#123;      <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&#x27;multipart/form-data&#x27;</span>    &#125;,    <span class="hljs-attr">data</span>: [], <span class="hljs-comment">// 额外提交的数据。后端要求的话就填，没有要求给一个空数组，这是一个必填属性</span>    <span class="hljs-attr">files</span>: [&#123;      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;xxx.jpg&#x27;</span>, <span class="hljs-comment">// 这个文件名，一定要带后缀</span>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;img&#x27;</span>,    <span class="hljs-comment">// 这个值需要看接口文档，Body参数的名字</span>      <span class="hljs-attr">uri</span>: <span class="hljs-string">&quot;internal://cache/xxx.jpg&quot;</span>,      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>    &#125;]  &#125;)  task.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;complete&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;头像上传成功&#x27;</span> &#125;)  &#125;)  task.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;fail&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;头像上传失败&#x27;</span> &#125;)  &#125;)  <span class="hljs-comment">// TODO 获取上传图片的结果，结果返回一个图片存储路径，渲染到视图</span>  <span class="hljs-comment">// 后端返回的数据在res.body中，可以log一下res，看一下数据结构组成</span>  task.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;headerReceive&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> upRes = res <span class="hljs-keyword">as</span> <span class="hljs-title class_">IRes</span>    <span class="hljs-keyword">let</span> url = (<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(upRes.<span class="hljs-property">body</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">IBody</span>).<span class="hljs-property">data</span>.<span class="hljs-property">url</span>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">img</span> = url  &#125;)&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>业务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Grid</title>
    <link href="/posts/5275.html"/>
    <url>/posts/5275.html</url>
    
    <content type="html"><![CDATA[<h1 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h1><p>如果布局是由 很多的 行 和 列 所组成、行列可能需要合并、甚至滚动，就可以使用网格布局来实现</p><h2 id="1-固定行列"><a href="#1-固定行列" class="headerlink" title="1. 固定行列"></a>1. 固定行列</h2><ol><li>子组件<strong>必须</strong>是<code>GridItem</code>组件，需要展示的内容设置在 <code>GridItem</code> 内部既可</li><li><code>GridItem</code> 只能有一个<strong>子组件</strong></li></ol><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-title class_">Grid</span>() &#123;  <span class="hljs-title class_">GridItem</span>()&#123;    <span class="hljs-comment">// 展示的内容放在这里</span>  &#125;  <span class="hljs-title class_">GridItem</span>()&#123;    <span class="hljs-comment">// 展示的内容放在这里</span>  &#125;&#125;.<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;。。。&#x27;</span>).<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;。。。。&#x27;</span>)</code></pre></div><p><img src="/posts/5275/3.1-1.png" style="zoom:67%;"> <img src="/posts/5275/3.1-2.png" style="zoom:67%;"></p><table><thead><tr><th><strong>名称</strong></th><th><strong>参数类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>columnsTemplate</td><td>string</td><td>设置当前网格布局列的数量或最小列宽值，不设置时默认 1 列。例如, ‘1fr 1fr 2fr’ 是将父组件分 3 列，将父组件允许的宽分为 4 等份，第一列占 1 份，第二列占 1 份，第三列占 2 份。</td></tr><tr><td>rowsTemplate</td><td>string</td><td>设置当前网格布局行的数量或最小行高值，不设置时默认 1 行。例如, ‘1fr 1fr 2fr’是将父组件分三行，将父组件允许的高分为 4 等份，第一行占 1 份，第二行占一份，第三行占 2 份。</td></tr><tr><td>columnsGap</td><td>Length</td><td>设置列与列的间距。默认值：0</td></tr><tr><td>rowsGap</td><td>Length</td><td>设置行与行的间距。默认值：0</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 掌握: Grid是一个容器组件, 可以布局网格</span><span class="hljs-comment">// 语法: Grid 包住 GridItem , GirdItem只能有一个子组件</span><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Index</span> &#123;  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Grid</span>() &#123;      <span class="hljs-title class_">ForEach</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">7</span> &#125;), <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;        <span class="hljs-title class_">GridItem</span>() &#123;          <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())        &#125;        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Pink</span>)      &#125;)    &#125;    .<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;1fr 2fr 1fr&#x27;</span>)    .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr &#x27;</span>)  <span class="hljs-comment">//行列数量一起确定后，只能显示行乘列的数量（6）,多的数据会被丢弃</span>    .<span class="hljs-title function_">columnsGap</span>(<span class="hljs-number">10</span>)          <span class="hljs-comment">// 列与列的间距</span>    .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)           <span class="hljs-comment">// 行与行的间距</span>    <span class="hljs-comment">// .height(300)</span>    <span class="hljs-comment">// .width(&#x27;100%&#x27;)</span>  &#125;&#125;</code></pre></div><h2 id="2-合并行列"><a href="#2-合并行列" class="headerlink" title="2. 合并行列"></a>2. 合并行列</h2><p><strong>行列号从 0 下标开始</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>参数类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>rowStart</td><td>number</td><td>指定当前元素起始行号。</td></tr><tr><td>rowEnd</td><td>number</td><td>指定当前元素终点行号。</td></tr><tr><td>columnStart</td><td>number</td><td>指定当前元素起始列号。</td></tr><tr><td>columnEnd</td><td>number</td><td>指定当前元素终点列号。</td></tr></tbody></table><p><img src="/posts/5275/3.2-1.png"></p><p><img src="/posts/5275/3.2-2.png" style="zoom: 50%;">》》》<img src="/posts/5275/3.2-3.png" style="zoom: 50%;"></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page10</span>_Grid_Merge &#123;  <span class="hljs-comment">// 快速生成 12 个元素的数组</span>  <span class="hljs-comment">// Array.from 是 Array 这个类上面的静态方法</span>  <span class="hljs-comment">// &#123;length:12&#125; 是一个对象，有 length 属性，值为 12</span>  <span class="hljs-attr">nums</span>: <span class="hljs-built_in">number</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">12</span> &#125;)  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;合并行列&#x27;</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-number">900</span>)        .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      <span class="hljs-title class_">Grid</span>() &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">nums</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;          <span class="hljs-keyword">if</span> (index === <span class="hljs-number">2</span>) &#123;            <span class="hljs-title class_">GridItem</span>() &#123;              <span class="hljs-title class_">Text</span>(index + <span class="hljs-string">&#x27;&#x27;</span>)                .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)                .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)            &#125;            .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#9dc3e6&#x27;</span>)            .<span class="hljs-title function_">columnStart</span>(<span class="hljs-number">2</span>)            .<span class="hljs-title function_">columnEnd</span>(<span class="hljs-number">3</span>)          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index === <span class="hljs-number">3</span>) &#123;            <span class="hljs-title class_">GridItem</span>() &#123;              <span class="hljs-title class_">Text</span>(index + <span class="hljs-string">&#x27;&#x27;</span>)                .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)                .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)            &#125;            .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#9dc3e6&#x27;</span>)            .<span class="hljs-title function_">rowStart</span>(<span class="hljs-number">1</span>)            .<span class="hljs-title function_">rowEnd</span>(<span class="hljs-number">2</span>)          &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-title class_">GridItem</span>() &#123;              <span class="hljs-title class_">Text</span>(index + <span class="hljs-string">&#x27;&#x27;</span>)                .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)                .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)            &#125;            .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#9dc3e6&#x27;</span>)          &#125;        &#125;)      &#125;      .<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr 1fr&#x27;</span>)      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr&#x27;</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">260</span>)      .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">columnsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)  &#125;&#125;</code></pre></div><h2 id="3-设置滚动"><a href="#3-设置滚动" class="headerlink" title="3. 设置滚动"></a>3. 设置滚动</h2><p><strong>设置方式:</strong></p><ol><li><strong>水平滚动</strong>：设置的是 rowsTemplate，Grid 的滚动方向为水平方向。</li><li><strong>垂直滚动</strong>：设置的是 columnsTemplate，Grid 的滚动方向为垂直方向</li></ol><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> rowsTemplate  或者columnTemplate 只写一个<span class="hljs-bullet">2.</span> 让子组件的高度或者宽度之和, 超过父组件Grid</code></pre></div><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 💥1. rowsTemplate  或者columnTemplate 只写一个</span><span class="hljs-comment">// 💥2. 让子组件的高度或者宽度之和, 超过父组件Grid</span><span class="hljs-meta">@Extend</span>(<span class="hljs-title class_">Text</span>)<span class="hljs-keyword">function</span> <span class="hljs-title function_">xxx</span>(<span class="hljs-params"></span>) &#123;  .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)  .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)  .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)  .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)&#125;<span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page11</span>_Grid_Scroll &#123;  <span class="hljs-attr">list</span>: <span class="hljs-built_in">string</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">30</span> &#125;)  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-comment">// 横向滚动 只写rowsTemplate</span>      <span class="hljs-title class_">Grid</span>() &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">string</span>, index</span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())              .<span class="hljs-title function_">xxx</span>()          &#125;          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)          .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">1</span> &#125;)        &#125;)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<span class="hljs-comment">// 横向滚动 通过 width 设置宽度</span>      .<span class="hljs-title function_">height</span>(<span class="hljs-number">300</span>)      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr&#x27;</span>)      <span class="hljs-comment">// 竖向滚动 只写columnsTemplate</span>      <span class="hljs-title class_">Grid</span>() &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">string</span>, index</span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())              .<span class="hljs-title function_">xxx</span>()          &#125;          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)          .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">1</span> &#125;)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)          .<span class="hljs-title function_">height</span>(<span class="hljs-number">50</span>)<span class="hljs-comment">// 竖向滚动-通过 height 设置高度</span>        &#125;)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">300</span>)      .<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;1fr&#x27;</span>)    &#125;  &#125;&#125;</code></pre></div><h2 id="4-控制器对象-控制滚动"><a href="#4-控制器对象-控制滚动" class="headerlink" title="4. 控制器对象-控制滚动"></a>4. 控制器对象-控制滚动</h2><ol><li>创建 Scroller 对象（控制器对象）</li><li>控制器对象设置给 Grid</li><li>单独调用 Scroller 对象的 scrollPage 方法</li></ol><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 1.创建 Scroller 对象（new 关键字，调用Scroller函数，返回一个Scroller的对象）</span><span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()<span class="hljs-comment">//  2.设置给 Grid：这个属性可选，所以之前不设置也不会报错</span> <span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>) &#123;   <span class="hljs-comment">// ...</span> &#125;<span class="hljs-comment">// 3.调用 Scroller 对象的  scrollPage 方法即可实现滚动</span><span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>.<span class="hljs-title function_">scrollPage</span>(&#123;  <span class="hljs-attr">next</span>:<span class="hljs-literal">true</span> <span class="hljs-comment">// 下一页</span>  <span class="hljs-attr">next</span>:<span class="hljs-literal">false</span> <span class="hljs-comment">// 上一页</span>&#125;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page13</span>_Grid_Scroller &#123;  <span class="hljs-attr">nums</span>: <span class="hljs-built_in">number</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">200</span> &#125;)  <span class="hljs-comment">// 控制器对象，不是状态属性，不需要添加任何修饰符</span>  <span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;控制器-代码控制滚动&#x27;</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-number">900</span>)        .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      <span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>) &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">nums</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-title class_">Text</span>(index + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;&#x27;</span>)          &#125;          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;25%&#x27;</span>)        &#125;)      &#125;      .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">450</span>)      .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">columnsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr 1fr&#x27;</span>)      <span class="hljs-title class_">Row</span>() &#123;        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;上一页&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-number">100</span>)          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;            <span class="hljs-comment">// 上一页</span>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>.<span class="hljs-title function_">scrollPage</span>(&#123; <span class="hljs-attr">next</span>: <span class="hljs-literal">false</span> &#125;)          &#125;)        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;下一页&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-number">100</span>)          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;            <span class="hljs-comment">// 下一页</span>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>.<span class="hljs-title function_">scrollPage</span>(&#123; <span class="hljs-attr">next</span>: <span class="hljs-literal">true</span> &#125;)          &#125;)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">justifyContent</span>(<span class="hljs-title class_">FlexAlign</span>.<span class="hljs-property">SpaceAround</span>)    &#125;  &#125;&#125;</code></pre></div><h2 id="5-控制器对象-自定义滚动条"><a href="#5-控制器对象-自定义滚动条" class="headerlink" title="5. 控制器对象-自定义滚动条"></a>5. 控制器对象-自定义滚动条</h2><blockquote><ol><li><p>隐藏默认滚动条</p></li><li><p>使用 ScrollBar 组件自定义滚动条</p><p>​ a. ScrollBar 和 Grid 设置同一个 Scroller（控制器对象）</p><p>​ b. 单独使用<strong>ScrollBar</strong>组件通过 参数 和 属性自定义滚动条</p></li></ol></blockquote><p><strong>第一步</strong>：首先通过 <strong>Grid</strong> 的 <strong>scrollBar</strong> 属性关闭滚动条</p><table><thead><tr><th><strong>属性名</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>scrollBar</td><td>BarState</td><td>设置滚动条状态。默认值： BarState.auto <br>BarState.off 关闭<br>BarState.on 常驻<br>BarState.auto 按需显示</td></tr></tbody></table><p><strong>第二步</strong>：单独使用<strong>ScrollBar</strong>组件自定义滚动条，ScrollBar 和 Grid 设置同一个 Scroller（控制器对象）</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>必填</strong></th><th><strong>参数描述</strong></th></tr></thead><tbody><tr><td>scroller</td><td>Scroller</td><td>是</td><td><strong>可滚动组件的控制器</strong>。用于与可滚动组件进行绑定。</td></tr><tr><td>direction</td><td><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-scrollbar-0000001774121254#ZH-CN_TOPIC_0000001774121254__scrollbardirection%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E">ScrollBarDirection</a></td><td>否</td><td>滚动条的方向，控制可滚动组件对应方向的滚动。默认值：ScrollBarDirection.Vertical</td></tr><tr><td>state</td><td><a href="https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/reference/apis-arkui/arkui-ts/ts-appendix-enums.md#barstate">BarState</a></td><td>否</td><td>滚动条状态。 默认值：BarState.Auto</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 创建控制器对象</span><span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()<span class="hljs-comment">// 设置给 Grid 组件</span><span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>)&#123;  <span class="hljs-comment">// 略</span>&#125;.<span class="hljs-title function_">scrollBar</span>(<span class="hljs-title class_">BarState</span>.<span class="hljs-property">off</span>)<span class="hljs-comment">//关闭默认滚动条</span><span class="hljs-comment">// 设置给 ScrollBar 组件</span><span class="hljs-comment">// 和 Grid 设置的是同一个</span><span class="hljs-title class_">ScrollBar</span>(&#123;  <span class="hljs-attr">scroller</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>,  <span class="hljs-attr">direction</span>: <span class="hljs-title class_">ScrollBarDirection</span>.<span class="hljs-property">Horizontal</span> <span class="hljs-comment">// 方向</span>  <span class="hljs-attr">state</span>: <span class="hljs-title class_">BarState</span>.<span class="hljs-property">On</span> <span class="hljs-comment">// 滚动条持续显示</span>&#125;) &#123;  <span class="hljs-comment">// 滚动内容 设置外观即可</span>  <span class="hljs-title class_">Text</span>()&#125;<span class="hljs-comment">// 设置外观</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page14</span>_Grid_ScrollBar &#123;  <span class="hljs-comment">// 长度为 30 每一项都为 undefined 的数组</span>  <span class="hljs-attr">list</span>: <span class="hljs-built_in">string</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">30</span> &#125;)  <span class="hljs-comment">// 创建控制器对象==================</span>  <span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;控制器-自定义滚动条&#x27;</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-number">900</span>)        .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      <span class="hljs-comment">// 设置控制器对象给 Grid================</span>      <span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>) &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">string</span>, index</span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">ItemBuilder</span>(index)          &#125;          .<span class="hljs-title function_">padding</span>(<span class="hljs-number">5</span>)          .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;30%&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;25%&#x27;</span>)        &#125;)      &#125;      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr&#x27;</span>) <span class="hljs-comment">// 竖向滚动</span>      .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">300</span>)      .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">1</span> &#125;)      .<span class="hljs-title function_">padding</span>(<span class="hljs-number">5</span>)      .<span class="hljs-title function_">scrollBar</span>(<span class="hljs-title class_">BarState</span>.<span class="hljs-property">Off</span>) <span class="hljs-comment">// 关闭===============</span>      <span class="hljs-comment">// 自定义滚动条====================</span>      <span class="hljs-title class_">ScrollBar</span>(&#123;        <span class="hljs-attr">scroller</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>,<span class="hljs-comment">// 和 Grid 同一个控制器对象</span>        <span class="hljs-attr">direction</span>: <span class="hljs-title class_">ScrollBarDirection</span>.<span class="hljs-property">Horizontal</span>,      &#125;) &#123;          <span class="hljs-comment">//滚动条外观==============</span>        <span class="hljs-title class_">Text</span>()          .<span class="hljs-title function_">width</span>(<span class="hljs-number">40</span>)          .<span class="hljs-title function_">height</span>(<span class="hljs-number">20</span>)          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Orange</span>)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-number">200</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">20</span>)      .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)  &#125;  <span class="hljs-meta">@Builder</span>  <span class="hljs-title class_">ItemBuilder</span>(<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>) &#123;    <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())      .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)      .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swiper</title>
    <link href="/posts/23119.html"/>
    <url>/posts/23119.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h2><blockquote><p>首先来看看如何设置轮播内容，以及设置尺寸</p></blockquote><ol><li>轮播内容：内容作为<code>Swiper</code>的子组件即可</li><li>尺寸：</li></ol><p>​ a. 设置 <code>Swiper</code> 的尺寸：内容会拉伸为和 <code>Swiper</code> 一致（<strong>优先级高</strong>）</p><p>​ b. 没有设置<code>Swiper</code>的尺寸，<code>Swiper</code>被子组件的尺寸撑开</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Swiper</span>() &#123;  <span class="hljs-comment">// 轮播内容</span>  <span class="hljs-comment">// (设置尺寸，撑开swiper)</span>&#125;<span class="hljs-comment">// 设置尺寸（内容拉伸、优先级高）</span>.<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-number">100</span>)</code></pre></div><h2 id="2-常用属性方法"><a href="#2-常用属性方法" class="headerlink" title="2. 常用属性方法"></a>2. 常用属性方法</h2><table><thead><tr><th><strong>参数名</strong></th><th align="left"><strong>参数类型</strong></th><th align="left">参数描述</th></tr></thead><tbody><tr><td>autoPlay</td><td align="left">boolean</td><td align="left">子组件是否自动播放。默认值：false<strong>说明：</strong>loop 为 false 时，自动轮播到最后一页时停止轮播。手势切换后不是最后一页时继续播放。</td></tr><tr><td>interval</td><td align="left">number</td><td align="left">使用自动播放时播放的时间间隔，单位为毫秒。默认值：3000</td></tr><tr><td>vertical</td><td align="left">boolean</td><td align="left">是否为纵向滑动。默认值：false</td></tr><tr><td>loop👎</td><td align="left">boolean</td><td align="left">是否开启无限循环播放。设置为 true 时表示无限循环播放，设置为 false 时表示只播放一次。默认值：true</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Index</span> &#123;  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Swiper</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;0&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;1&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-number">160</span>)    .<span class="hljs-title function_">loop</span>(<span class="hljs-literal">false</span>) <span class="hljs-comment">// 是否开启循环 true/false</span>    .<span class="hljs-title function_">autoPlay</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 是否自动播放 true/false</span>    .<span class="hljs-title function_">interval</span>(<span class="hljs-number">4000</span>) <span class="hljs-comment">// 自动播放时间间隔 单位毫秒 默认3000</span>    .<span class="hljs-title function_">vertical</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 是否纵向滑动</span>  &#125;&#125;</code></pre></div><h2 id="3-调整导航点"><a href="#3-调整导航点" class="headerlink" title="3. 调整导航点"></a>3. 调整导航点</h2><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-title class_">Swiper</span>()&#123;  <span class="hljs-comment">// 略</span>&#125;.<span class="hljs-title function_">indicator</span>(<span class="hljs-literal">false</span>) <span class="hljs-comment">// 关闭导航</span>.<span class="hljs-title function_">indicator</span>(<span class="hljs-title class_">Indicator</span>.<span class="hljs-title function_">dot</span>()) <span class="hljs-comment">// 圆点指示器（默认）</span>.<span class="hljs-title function_">indicator</span>(<span class="hljs-title class_">Indicator</span>.<span class="hljs-title function_">digit</span>()) <span class="hljs-comment">// 数字指示器</span></code></pre></div><p><strong>位置属性：</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>参数描述</strong></th></tr></thead><tbody><tr><td>left</td><td>Length</td><td>设置导航点距离 Swiper 组件左边的距离。默认值：0 单位：vp</td></tr><tr><td>top</td><td>Length</td><td>设置导航点距离 Swiper 组件顶部的距离。默认值：0 单位：vp</td></tr><tr><td>right</td><td>Length</td><td>设置导航点距离 Swiper 组件右边的距离。默认值：0 单位：vp</td></tr><tr><td>bottom</td><td>Length</td><td>设置导航点距离 Swiper 组件底部的距离。默认值：0 单位：vp</td></tr></tbody></table><p><strong>样式属性：</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>参数描述</strong></th></tr></thead><tbody><tr><td>itemWidth</td><td>Length</td><td>设置 Swiper 组件圆点导航指示器的宽，不支持设置百分比。默认值：6 单位：vp</td></tr><tr><td>itemHeightLength</td><td>Length</td><td>设置 Swiper 组件圆点导航指示器的高，不支持设置百分比。默认值：6 单位：vp</td></tr><tr><td>selectedItemWidth</td><td>Length</td><td>设置选中 Swiper 组件圆点导航指示器的宽，不支持设置百分比。默认值：12 单位：vp</td></tr><tr><td>selectedItemHeight</td><td>Length</td><td>设置选中 Swiper 组件圆点导航指示器的高，不支持设置百分比。默认值：6 单位：vp</td></tr><tr><td>color</td><td><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-types-0000001774121374#ZH-CN_TOPIC_0000001774121374__resourcecolor">ResourceColor</a></td><td>设置 Swiper 组件圆点导航指示器的颜色。默认值：’#182431’（10%透明度）</td></tr><tr><td>selectedColor</td><td>ResourceColor</td><td>设置选中 Swiper 组件圆点导航指示器的颜色。默认值：’#007DFF’</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Index</span> &#123;  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Swiper</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;0&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;1&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;2&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-number">160</span>)    <span class="hljs-comment">// .indicator(false) // 关闭导航点</span>    <span class="hljs-comment">// .indicator(Indicator.digit()) // 数字导航点</span>    .<span class="hljs-title function_">indicator</span>(      <span class="hljs-title class_">Indicator</span>.<span class="hljs-title function_">dot</span>()        .<span class="hljs-title function_">left</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 左侧距离</span>        .<span class="hljs-title function_">top</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 顶部距离</span>        .<span class="hljs-title function_">bottom</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 底部距离</span>        .<span class="hljs-title function_">right</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 右侧距离（距离属性组合使用，无需全部设置）</span>        .<span class="hljs-title function_">itemWidth</span>(<span class="hljs-number">20</span>)<span class="hljs-comment">// 指示器宽度</span>        .<span class="hljs-title function_">itemHeight</span>(<span class="hljs-number">20</span>)<span class="hljs-comment">// 指示器高度</span>        .<span class="hljs-title function_">selectedItemWidth</span>(<span class="hljs-number">30</span>)<span class="hljs-comment">// 选中指示器宽度</span>        .<span class="hljs-title function_">selectedItemHeight</span>(<span class="hljs-number">30</span>)<span class="hljs-comment">// 选中指示器高度</span>        .<span class="hljs-title function_">selectedColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Yellow</span>)<span class="hljs-comment">// 选中指示器颜色</span>        .<span class="hljs-title function_">color</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span>) <span class="hljs-comment">// 默认指示器宽度</span>    ) <span class="hljs-comment">// 圆形导航点</span>  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/posts/25246.html"/>
    <url>/posts/25246.html</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="1-工作流程图"><a href="#1-工作流程图" class="headerlink" title="1. 工作流程图"></a>1. 工作流程图</h2><p><img src="/posts/25246/1-1.png" alt="Git工作流程图"></p><h2 id="2-Git-安装与常用命令"><a href="#2-Git-安装与常用命令" class="headerlink" title="2. Git 安装与常用命令"></a>2. Git 安装与常用命令</h2><h3 id="Git-环境配置"><a href="#Git-环境配置" class="headerlink" title="Git 环境配置"></a>Git 环境配置</h3><h4 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h4><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p>下载完成后可以得到如下安装文件：</p><p><img src="/posts/25246/2-1.png" alt="image-20240926114126523"></p><p>双击下载的安装文件来安装 Git。安装完成后在电脑桌面（也可以是其他目录)点击右键，如果能够看到如下两个菜单则说明 Git 安装成功。</p><p><img src="/posts/25246/2-2.png" alt="image-20240926114315286"></p><p>备注：</p><p><code>Git GUI</code>：Git 提供的图形界面工具</p><p><code>Git Bash</code>：Git 提供的命令行工具</p><p>当安装 Git 后首先要做的事情是设置用户名称和 email 地址。这是非常重要的，因为每次 Git 提交都会使用该用户信息</p><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>配置全局用户信息</p><div class="code-wrapper"><pre><code class="hljs git">git config --global user.name “用户名”git config --global user.email “邮箱”</code></pre></div><blockquote><p>说明：</p><p>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看</p><p>到，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名，否则无法提交代码。</p></blockquote><p><strong>※注意：</strong>这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系。</p><h4 id="解决-GitBash-乱码问题"><a href="#解决-GitBash-乱码问题" class="headerlink" title="解决 GitBash 乱码问题"></a>解决 GitBash 乱码问题</h4><ol><li><p>打开 GitBash 执行下面命令</p><div class="code-wrapper"><pre><code class="hljs shell">git config --global core.quotepath false</code></pre></div></li><li><p><code>$&#123;git_home&#125;/etc/bash.bashrc</code>文件最后加入下面两行</p><div class="code-wrapper"><pre><code class="hljs shell">export LANG=&quot;zh_CN.UTF-8&quot;export LC_ALL=&quot;zh_CN.UTF-8&quot;</code></pre></div></li></ol><h2 id="3-本地仓库创建"><a href="#3-本地仓库创建" class="headerlink" title="3. 本地仓库创建"></a>3. 本地仓库创建</h2><p>要使用 Git 对我们的代码进行版本控制，首先需要创建本地仓库：<br>在项目目录，点击右键打开<code>Git bash</code>窗口，执行命令<code>git init</code>，创建成功后可在文件夹下看到隐藏的<code>.git</code>目录。</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-meta"># 创建本地仓库</span>git <span class="hljs-keyword">init</span></code></pre></div><h3 id="1-基础操作指令"><a href="#1-基础操作指令" class="headerlink" title="1. 基础操作指令"></a>1. 基础操作指令</h3><p>Git 工作目录下对于文件的<strong>修改</strong>（增加、删除、更新）会存在几个状态，这些修改的状态会随着我们执行 Git 的命令而发生变化。</p><img src="/posts/25246/3-1.png" style="zoom: 80%;"><div class="code-wrapper"><pre><code class="hljs git"># 查看的修改的状态（暂存区、工作区）git status# 将所有修改加入暂存区git add .# 添加一个或多个文件的修改到暂存区git add 单个文件名 | 通配符# 提交暂存区内容到本地仓库的当前分支git commit -m &#x27;注释内容&#x27;</code></pre></div><h3 id="2-版本回退"><a href="#2-版本回退" class="headerlink" title="2. 版本回退"></a>2. 版本回退</h3><div class="code-wrapper"><pre><code class="hljs git">git reset --soft 版本号（其他文件未跟踪）git reset --hard 版本号git reset --mixed 版本号（与gitreset等价）# 查看提交历史git log --oneline# 可以看到已经删除的提交记录git reflog</code></pre></div><img src="/posts/25246/3-2.png" alt="image.png" style="zoom: 80%;"><h3 id="3-gitignore文件"><a href="#3-gitignore文件" class="headerlink" title="3. .gitignore文件"></a>3. <strong>.gitignore</strong>文件</h3><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为<code> .gitignore</code>的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">no .a files</span>*.a<span class="hljs-meta prompt_"># </span><span class="language-bash">but <span class="hljs-keyword">do</span> track lib.a, even though you<span class="hljs-string">&#x27;re ignoring .a files above</span></span>!lib.a<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">only ignore the &#x27;</span>TODO<span class="hljs-string">&#x27; file in the current directory, not subdir/TODO</span></span>/TODO<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">ignore all files in the &#x27;</span>build/<span class="hljs-string">&#x27; directory</span></span>build/<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">ignore doc/notes.txt, but not doc/server/arch.txt</span></span>doc/*.txt<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">ignore all .pdf files in the doc/ directory</span></span>doc/**/*.pdf</code></pre></div><h3 id="4-分支"><a href="#4-分支" class="headerlink" title="4. 分支"></a>4. 分支</h3><h4 id="1-新建分支"><a href="#1-新建分支" class="headerlink" title="1.新建分支"></a>1.新建分支</h4><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的 Bug 修改、开发新的功能，以免影响开发主线。</p><div class="code-wrapper"><pre><code class="hljs git"># 列出本地所有分支git branch# 创建一个新分支，但不会切换到该分支git branch 分支名# 新建一个分支，并切换到该分支git checkout -b 分支名# 切换分支git checkout 分支名# 合并其他分支到当前分支git merge 需要被合并的分支名</code></pre></div><img src="/posts/25246/3-3.png" alt="image.png" style="zoom: 80%;"><h4 id="2-合并、删除分支"><a href="#2-合并、删除分支" class="headerlink" title="2. 合并、删除分支"></a>2. 合并、删除分支</h4><p><strong>不能删除当前分支，只能删除其他分支</strong></p><div class="code-wrapper"><pre><code class="hljs git"># 删除分支git branch -d 分支名# 不做任何检查，强制删除git branch -D 分支名# 合并其他分支到当前分支git merge 需要被合并的分支名</code></pre></div><img src="/posts/25246/3-4.png" alt="img" style="zoom: 80%;"><h4 id="3-解决冲突"><a href="#3-解决冲突" class="headerlink" title="3. 解决冲突"></a>3. 解决冲突</h4><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p><blockquote><ol><li>处理文件中冲突的地方</li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ol></blockquote><h4 id="4-开发中分支使用原则与流程"><a href="#4-开发中分支使用原则与流程" class="headerlink" title="4. 开发中分支使用原则与流程"></a>4. 开发中分支使用原则与流程</h4><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的 Bug 修改、开发新的功能，以免影响开发主线。</p><p>在开发中，一般有如下分支使用原则与流程：</p><ul><li>master （生产） 分支<br>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支。</li><li>develop（开发）分支<br>是从 master 创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到 master 分支,准备上线。</li><li>feature&#x2F;xxxx 分支<br>从 develop 创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到 develop 分支。</li><li>hotfix&#x2F;xxxx 分支，<br>从 master 派生的分支，一般作为线上 bug 修复使用，修复完成后需要合并到 master、test、develop 分支。</li><li>还有一些其他分支，在此不再详述，例如 test 分支（用于代码测试）、pre 分支（预上线分支）等等。</li><li><img src="/posts/25246/3-5.png" alt="分支"></li></ul><h2 id="4-Git-远程仓库"><a href="#4-Git-远程仓库" class="headerlink" title="4. Git 远程仓库"></a>4. Git 远程仓库</h2><h3 id="1-远程仓库"><a href="#1-远程仓库" class="headerlink" title="1. 远程仓库"></a>1. 远程仓库</h3><p>前面我们已经知道了 Git 中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建 Git 远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有 GitHub、码云、GitLab 等。<br>gitHub（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 gitHub<br>码云（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于 GitHub，码云速度会更快<br>GitLab （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务,一般用于在企业、学校等内部网络搭建 git 私服。</p><h3 id="2-创建远程仓库"><a href="#2-创建远程仓库" class="headerlink" title="2. 创建远程仓库"></a>2. 创建远程仓库</h3><img src="/posts/25246/4-1.png" alt="创建远程仓库" style="zoom:80%;"><h3 id="3-配置-SSH-公钥"><a href="#3-配置-SSH-公钥" class="headerlink" title="3. 配置 SSH 公钥"></a>3. 配置 SSH 公钥</h3><div class="code-wrapper"><pre><code class="hljs git"># 生成SSH公钥ssh-keygen -t rsa -C &quot;邮件地址&quot;# 验证是否配置成功ssh -T git@gitee.com</code></pre></div><blockquote><p>不断回车,如果公钥已经存在，则自动覆盖</p></blockquote><p>Gitee 设置账户共公钥</p><blockquote><p>进入 C:\Users\用户名，在里面进入.ssh 文件</p><p>用记事本打开里面的 id_rsa.pub,全选复制里面的代码</p><p>或者 cmd 中<code>cat ~/.ssh/id_rsa.pub</code></p></blockquote><img src="/posts/25246/4-4.png" alt="SSH公钥" style="zoom: 67%;"><h3 id="4-操作远程仓库"><a href="#4-操作远程仓库" class="headerlink" title="4. 操作远程仓库"></a>4. 操作远程仓库</h3><h4 id="1-添加远程仓库"><a href="#1-添加远程仓库" class="headerlink" title="1. 添加远程仓库"></a>1. 添加远程仓库</h4><p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接。</strong></p><ul><li>仓库别名，默认是<strong>origin</strong>，取决于远端服务器设置</li><li>仓库路径，从远端服务器获取此 URL</li></ul><div class="code-wrapper"><pre><code class="hljs git"># 本地仓库跟远程的仓库建立连接，git remote add &lt;仓库别名&gt; &lt;仓库路径&gt;eg: git remote add origin &#x27;仓库地址&#x27;# 查看远程仓库git remote</code></pre></div><h4 id="2-推送到远程仓库"><a href="#2-推送到远程仓库" class="headerlink" title="2. 推送到远程仓库"></a>2. 推送到远程仓库</h4><div class="code-wrapper"><pre><code class="hljs git">git push [-f][-u] 仓库别名 本地分支名:远端分支名-f  表示强制覆盖-u  推送到远端的同时并且建立起和远端分支的关联关系。# （正常提交） 提交到远程仓库的master分支# 如果远程分支名和本地分支名称相同，则可以只写本地分git push origin master# 强制推送代码到远程仓库git push -f origin master# 查看关联关系git branch -vv</code></pre></div><blockquote><p>在 Git 中，推送操作（push）是将本地仓库中的代码更新推送到远程仓库中。如果远程仓库不存在，Git 就无法确定将本地代码推送到哪个位置。</p><p>因此，在使用<code>git push</code>命令之前，你需要在远程端（如 GitHub、GitLab、Bitbucket 等）上创建一个空仓库，然后将其与本地仓库关联。只有在这种情况下，才能成功地将本地代码推送到远程仓库中。</p><p>也不需要起别名，使用远程仓库的完整 URL：</p><div class="code-wrapper"><pre><code class="hljs shell">git push &lt;remote_url&gt; &lt;branch_name&gt;</code></pre></div></blockquote><h4 id="3-从远程仓库克隆"><a href="#3-从远程仓库克隆" class="headerlink" title="3. 从远程仓库克隆"></a>3. 从远程仓库克隆</h4><div class="code-wrapper"><pre><code class="hljs git"># 克隆代码# 注意1：Git本地仓库会自动与克隆地址仓库建立连接，也就不需要再git remote add ...# 注意2：仓库公开随意克隆，推送需要身为仓库团队成员# 本地目录可以省略，会自动生成一个目录git clone &lt;仓库路径&gt; [本地目录]</code></pre></div><h4 id="4-从远程仓库中抓取和拉取"><a href="#4-从远程仓库中抓取和拉取" class="headerlink" title="4. 从远程仓库中抓取和拉取"></a>4. 从远程仓库中抓取和拉取</h4><div class="code-wrapper"><pre><code class="hljs git"># 抓取就是将仓库里的更新都抓取到本地，不会进行合并git fetch [仓库别名] [分支名]# 拉取就是将远端仓库的修改拉到本地并自动进行合并git pull [仓库别名] [分支名]eg：git pull origin master# 如果不指定远端名称和分支名，则抓取所有分支</code></pre></div><h4 id="5-解决合并冲突"><a href="#5-解决合并冲突" class="headerlink" title="5. 解决合并冲突"></a>5. 解决合并冲突</h4><p>在一段时间，A、B 用户修改了同一个文件，且<strong>修改了同一行位置的代码</strong>，此时会发生<strong>合并冲突</strong>。</p><p>A 用户在本地修改代码后优先推送到远程仓库，此时 B 用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时 B 用户晚于 A 用户，<strong>故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支</strong>，如下图所示。</p><p><img src="/posts/25246/4-5.png" alt="解决远程仓库合并冲突"></p><p>在 B 用户拉取代码时，因为 A、B 用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。</p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同</strong></p><h4 id="6-移除远程仓库"><a href="#6-移除远程仓库" class="headerlink" title="6. 移除远程仓库"></a>6. 移除远程仓库</h4><div class="code-wrapper"><pre><code class="hljs git">git remote rm &lt;仓库别名&gt;git remote remove &lt;仓库别名&gt;</code></pre></div><h2 id="附"><a href="#附" class="headerlink" title="附:"></a>附:</h2><ol><li><strong>切换分支前先提交本地的修改</strong></li><li>代码及时提交，提交过了就不会丢</li></ol><h2 id="5-命令汇总"><a href="#5-命令汇总" class="headerlink" title="5. 命令汇总"></a>5. 命令汇总</h2><div class="code-wrapper"><pre><code class="hljs git">#=============本地仓库操作==========================# 创建本地仓库git init# 配置全局用户名和邮箱git config --global user.name “用户名”git config --global user.email “邮箱”# 查看全局配置git config --list# 仓库建立远程连接git remote add &lt;仓库别名&gt; &lt;仓库路径&gt;eg: git remote add origin &#x27;仓库地址&#x27;# 查看远程仓库git remote# 查看的修改的状态（暂存区、工作区）git status# 将所有修改加入暂存区git add .# 添加一个或多个文件的修改到暂存区git add 单个文件名 | 通配符# 提交暂存区内容到本地仓库的当前分支git commit -m &#x27;注释内容&#x27;# 版本回退git reset --soft 版本号（其他文件未跟踪）git reset --mixed 版本号（与gitreset等价）git reset --hard 版本号  --&gt; 常用# 查看历史详情# git log --list# 查看提交历史git log --oneline# 可以看到已经删除的提交记录git reflog#===============分支操作===================# 列出本地所有分支git branch# 创建一个新分支，但不会切换到该分支git branch 分支名# 新建一个分支，并切换到该分支git checkout -b 分支名# 切换分支git checkout 分支名# 合并其他分支到当前分支git merge 需要被合并的分支名# 删除分支git branch -d 分支名# 不做任何检查，强制删除git branch -D 分支名#================本地操作远程仓库==================# 本地仓库跟远程的仓库建立连接，git remote add &lt;仓库别名&gt; &lt;仓库路径&gt;eg: git remote add origin &#x27;仓库地址&#x27;# 查看远程仓库git remotegit push [-f][-u] 仓库别名 本地分支名:远端分支名-f  表示强制覆盖-u  推送到远端的同时并且建立起和远端分支的关联关系。# 克隆代码# 注意1：Git本地仓库会自动与克隆地址仓库建立连接，也就不需要再git remote add ...# 注意2：仓库公开随意克隆，推送需要身为仓库团队成员# 本地目录可以省略，会自动生成一个目录git clone &lt;仓库路径&gt; [本地目录]# （正常提交） 提交到远程仓库的master分支# 如果远程分支名和本地分支名称相同，则可以只写本地分git push origin master# 强制推送代码到远程仓库git push -f origin master# 查看关联关系git branch -vv# 抓取就是将仓库里的更新都抓取到本地，不会进行合并git fetch [仓库别名] [分支名]# 拉取就是将远端仓库的修改拉到本地并自动进行合并git pull [仓库别名] [分支名]eg：git pull origin master# 如果不指定远端名称和分支名，则抓取所有分支# 移除本地与远程仓库的连接git remote rm &lt;仓库别名&gt;git remote remove &lt;仓库别名&gt;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo基础配置</title>
    <link href="/posts/271.html"/>
    <url>/posts/271.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-修改-Fluid-主题"><a href="#Hexo-修改-Fluid-主题" class="headerlink" title="Hexo 修改 Fluid 主题"></a>Hexo 修改 Fluid 主题</h1><blockquote><p>以 Fluid 主题为例</p><p>Github 项目<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a></p><p>主题文档<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B"> Hexo Fluid 用户手册</a></p></blockquote><h2 id="1-下载主题包"><a href="#1-下载主题包" class="headerlink" title="1. 下载主题包"></a>1. 下载主题包</h2><p>载 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a> 解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><p><img src="/posts/271/1-1.png" alt="image.png"></p><h2 id="2-修改-config-yml-文件"><a href="#2-修改-config-yml-文件" class="headerlink" title="2. 修改_config.yml 文件"></a>2. 修改_config.yml 文件</h2><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span> <span class="hljs-comment"># 指定主题</span></code></pre></div><p><img src="/posts/271/2-1.png" alt="image.png"></p><p><img src="/posts/271/2-2.png" alt="image.png"></p><h2 id="3-本地部署查看效果并上传到-GitHub"><a href="#3-本地部署查看效果并上传到-GitHub" class="headerlink" title="3. 本地部署查看效果并上传到 GitHub"></a>3. 本地部署查看效果并上传到 GitHub</h2><p>hexo 三件套</p><div class="code-wrapper"><pre><code class="hljs bash">hexo clean   // 清除缓存hexo g       // 生成打包hexo d       // 上传</code></pre></div><p><img src="/posts/271/3-1.png" alt="image.png"></p><h1 id="Hexo-文章生成永久链接"><a href="#Hexo-文章生成永久链接" class="headerlink" title="Hexo 文章生成永久链接"></a>Hexo 文章生成永久链接</h1><h2 id="1-默认文章链接配置"><a href="#1-默认文章链接配置" class="headerlink" title="1. 默认文章链接配置"></a>1. 默认文章链接配置</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">premalink:</span> <span class="hljs-string">:year/:month/:day/:title</span></code></pre></div><p>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><h2 id="2-Hexo-abbrLink-插件"><a href="#2-Hexo-abbrLink-插件" class="headerlink" title="2. Hexo abbrLink 插件"></a>2. Hexo abbrLink 插件</h2><p>根目录 Git Bash 终端运行以下代码</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-abbrlink --save</code></pre></div><h2 id="3-配置文件下添加"><a href="#3-配置文件下添加" class="headerlink" title="3. 配置文件下添加"></a>3. 配置文件下添加</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">abbrlink:</span>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc16</span> <span class="hljs-comment">#算法：</span>  <span class="hljs-attr">crc16(default) and crc32 rep:</span> <span class="hljs-string">hex</span></code></pre></div><p><img src="/posts/271/4-1.png" alt="image.png"></p><h2 id="4-配置文件-permalink-修改"><a href="#4-配置文件-permalink-修改" class="headerlink" title="4. 配置文件 permalink 修改"></a>4. 配置文件 permalink 修改</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink.html</span><span class="hljs-comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></code></pre></div><p><img src="/posts/271/5-1.png" alt="image.png"></p><p>生成完后，原 md 文件的 Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的<code>ID</code> 。这个字段确保了在我们修改了<code>Front-matter</code> 内的博客标题 title 或创建日期 date 字段之后而不会改变链接地址.</p><h1 id="Hexo-Asset-Image-插件安装"><a href="#Hexo-Asset-Image-插件安装" class="headerlink" title="Hexo Asset Image 插件安装"></a>Hexo Asset Image 插件安装</h1><blockquote><p>Hexo Asset Image 是一个专为 Hexo 博客框架设计的开源插件，它旨在简化图片资源的管理和插入流程。通过本插件，博主可以更加便捷地在文章中引用本地或远程的图片，并自动处理图片路径，优化博客的构建和部署过程。对于追求高效管理和优雅展示图片内容的 Hexo 用户来说，这是一个不可或缺的工具。</p></blockquote><p>主要解决本地图片资源加载不出的问题</p><h2 id="项目快速启动"><a href="#项目快速启动" class="headerlink" title="项目快速启动"></a>项目快速启动</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先确保你的 Hexo 环境已经搭建完毕，之后在博客根目录下，通过 npm 安装此插件：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-asset-image --save</code></pre></div><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>编辑 Hexo 的配置文件<code>_config.yml</code>，添加以下行以启用插件：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">plugins:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">hexo-asset-image</span></code></pre></div><p>插件会处理这个相对路径，在生成静态站点时将图片移动到正确的资产目录下，并自动更新 Markdown 文件中的图片链接。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>在 Markdown 格式的文章中，你可以像下面这样直接引用图片：</p><div class="code-wrapper"><pre><code class="hljs markdown">![](<span class="hljs-link">path/to/your/image.jpg</span>)</code></pre></div><p>插件会处理这个相对路径，在生成静态站点时将图片移动到正确的资产目录下，并自动更新 Markdown 文件中的图片链接。</p><h3 id="自动创建同名文件夹放图片"><a href="#自动创建同名文件夹放图片" class="headerlink" title="自动创建同名文件夹放图片"></a>自动创建同名文件夹放图片</h3><p>查看 hexo 官网，可以看到官网推荐将<code>post_asset_folder</code>属性置为 true，在新建博客<code>hexo n “xxx”</code>的时候会在根目录下创建一个同名的文件夹，将需要插入的图片放到这个目录。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><span class="hljs-attr">marked:</span>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客在GitHub搭建</title>
    <link href="/posts/42759.html"/>
    <url>/posts/42759.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-准备工具"><a href="#1-准备工具" class="headerlink" title="1.准备工具"></a>1.准备工具</h1><h2 id="1-1-Node-js-和-git"><a href="#1-1-Node-js-和-git" class="headerlink" title="1.1. Node.js 和 git"></a>1.1. Node.js 和 git</h2><p><a href="https://nodejs.org/en/">下载 nodejs</a></p><p><a href="https://git-scm.com/downloads">下载 git</a></p><h2 id="1-2-测试是否成功"><a href="#1-2-测试是否成功" class="headerlink" title="1.2. 测试是否成功"></a>1.2. 测试是否成功</h2><div class="code-wrapper"><pre><code class="hljs cmd">node -vnpm -v（这个是node附带的）git -v</code></pre></div><p><img src="/posts/42759/1.2-1.png" alt="image.png"></p><h2 id="1-3-下载-Hexo"><a href="#1-3-下载-Hexo" class="headerlink" title="1.3. 下载 Hexo"></a>1.3. 下载 Hexo</h2><div class="code-wrapper"><pre><code class="hljs cmd">npm install hexo-cli -g</code></pre></div><p><img src="/posts/42759/1.3-1.png" alt="image.png"></p><h1 id="2-搭建-GitHub-仓库"><a href="#2-搭建-GitHub-仓库" class="headerlink" title="2. 搭建 GitHub 仓库"></a>2. 搭建 GitHub 仓库</h1><p>成功下载好工具之后，我们开始搭建 GitHub 存储静态页面的仓库</p><ul><li>首先注册&#x2F;登入<a href="https://github.com/">Github</a></li><li>点击 Create a new repository 进入新建仓库页面</li></ul><p>仓库名输入：</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">用户名<span class="hljs-string">.github.io</span></code></pre></div><blockquote><p>勾选 Public</p><p>勾选 Add a README file</p><p>拉到下面点击 create 创建</p></blockquote><p><img src="/posts/42759/2-1.png" alt="image.png"></p><h1 id="3-生成-SSH-keys-与-GitHub-建立连接"><a href="#3-生成-SSH-keys-与-GitHub-建立连接" class="headerlink" title="3. 生成 SSH keys 与 GitHub 建立连接"></a>3. 生成 SSH keys 与 GitHub 建立连接</h1><h2 id="3-1-生成-SSH-Keys"><a href="#3-1-生成-SSH-Keys" class="headerlink" title="3.1. 生成 SSH Keys"></a>3.1. 生成 SSH Keys</h2><p>桌面，右键空白处然后点 Git bash here,输入</p><div class="code-wrapper"><pre><code class="hljs Bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span></code></pre></div><p><img src="/posts/42759/3.1-1.png" alt="image.png"></p><p>然后进入<code>C:\Users\</code>用户名，在里面进入<code>.ssh</code>文件</p><p>用记事本打开里面的<code>id_rsa.pub</code>,全选复制里面的代码</p><h2 id="3-2-打开-Github-连接-SSH"><a href="#3-2-打开-Github-连接-SSH" class="headerlink" title="3.2. 打开 Github 连接 SSH"></a>3.2. 打开 Github 连接 SSH</h2><p>进入用户设置，找到 SSH keys</p><p>新建 SSH keys，名称随意，在下面粘贴代码，然后创建</p><p><img src="/posts/42759/3.2-1.png" alt="image.png"></p><h2 id="3-3-测试是否成功"><a href="#3-3-测试是否成功" class="headerlink" title="3.3. 测试是否成功"></a>3.3. 测试是否成功</h2><p>在 git bash 中输入</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com</code></pre></div><p><img src="/posts/42759/3.3-1.png" alt="image.png"></p><h1 id="4-本地部署"><a href="#4-本地部署" class="headerlink" title="4. 本地部署"></a>4. 本地部署</h1><h2 id="4-1-hexo-初始化"><a href="#4-1-hexo-初始化" class="headerlink" title="4.1. hexo 初始化"></a>4.1. hexo 初始化</h2><p>在喜欢位置新建文件 Blog，然后进入文件夹</p><p>右键空白处然后点 Git bash here，输入</p><div class="code-wrapper"><pre><code class="hljs bash">hexo init</code></pre></div><p>如果‘command not find’，就在前面加上<code>npx</code>，如：<code>npx hexo init</code></p><h2 id="4-2-hexo-安装"><a href="#4-2-hexo-安装" class="headerlink" title="4.2. hexo 安装"></a>4.2. hexo 安装</h2><div class="code-wrapper"><pre><code class="hljs bash">hexo install    // hexo安装</code></pre></div><h2 id="4-3-hexo-打包生成部署本地"><a href="#4-3-hexo-打包生成部署本地" class="headerlink" title="4.3. hexo 打包生成部署本地"></a>4.3. hexo 打包生成部署本地</h2><div class="code-wrapper"><pre><code class="hljs bash">hexo g     // hexo生成hexo s     // hexo本地部署</code></pre></div><p>（如果不成功的话就重复直到成功，因为国内与 github 连接不稳定）</p><p>现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了</p><p>然后回到命令行，<code>ctrl+c</code>关闭</p><h1 id="5-上线博客"><a href="#5-上线博客" class="headerlink" title="5. 上线博客"></a>5. 上线博客</h1><h2 id="5-1-修改仓库地址"><a href="#5-1-修改仓库地址" class="headerlink" title="5.1. 修改仓库地址"></a>5.1. 修改仓库地址</h2><ul><li>进入之前的 Blog 文件夹，用记事本打开<code>_config.yml</code>,拉到最下面将 deploy 后面的全删掉，复制粘贴这段</li></ul><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><span class="hljs-attr">repository:</span><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span></code></pre></div><p>注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！</p><ul><li>去 github 之前生成的仓库页面，点 code，复制 https 链接</li></ul><p><img src="/posts/42759/5.1-1.png" alt="image.png"></p><ul><li>将其粘贴到我们记事本中的<code>repository：</code>后面,然后保存退出</li></ul><p><img src="/posts/42759/5.1-2.png" alt="image.png"></p><h2 id="5-2-回到博客文件夹，git-bash"><a href="#5-2-回到博客文件夹，git-bash" class="headerlink" title="5.2. 回到博客文件夹，git bash"></a>5.2. 回到博客文件夹，git bash</h2><h3 id="5-2-1-安装自动部署发布工具"><a href="#5-2-1-安装自动部署发布工具" class="headerlink" title="5.2.1. 安装自动部署发布工具"></a>5.2.1. 安装自动部署发布工具</h3><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre></div><h3 id="5-2-2-在-Blog-文件夹-git-bash"><a href="#5-2-2-在-Blog-文件夹-git-bash" class="headerlink" title="5.2.2. 在 Blog 文件夹 git bash"></a>5.2.2. 在 Blog 文件夹 git bash</h3><div class="code-wrapper"><pre><code class="hljs bash">hexo g   （生成）hexo d   （上传)</code></pre></div><p><img src="/posts/42759/5.2.2-1.png" alt="image.png"></p><p>如果是第一次使用 git 的话会需要配置</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span>git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span></code></pre></div><p>配置完后再<code>hexo d</code>上传</p><p>在跳出来的窗口内进行登录</p><p>接下来我们就成功把本地内容上传到 github 了</p><p>上传成功以后，我们就算搭建好了！上自己的网址看看吧</p><p>网址是我们之前设的仓库名：用户名.github.io</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
