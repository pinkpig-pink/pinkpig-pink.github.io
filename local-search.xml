<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HM-文件上传</title>
    <link href="/posts/30845.html"/>
    <url>/posts/30845.html</url>
    
    <content type="html"><![CDATA[<h1 id="鸿蒙应用开发–文件上传"><a href="#鸿蒙应用开发–文件上传" class="headerlink" title="鸿蒙应用开发–文件上传"></a>鸿蒙应用开发–文件上传</h1><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><p>唤起相册 –&gt; 从相册选择图片 –&gt; 将相册选择的图片上传到服务器</p><h3 id="前置知识点："><a href="#前置知识点：" class="headerlink" title="前置知识点："></a>前置知识点：</h3><ol><li><code>@ohos.file.picker</code>选择器模块 –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-picker-V5#photoviewpickerdeprecated"> PhotoViewPicker</a>  –&gt;  从API version 12开始废弃。建议使用<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-photoaccesshelper-V5#photoviewpicker">photoAccessHelper.PhotoViewPicker</a>替代</li><li>fileIo  –&gt;  <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-fileio-V5#fileioopensync">fileIo.openSync</a>  |  fileIo.writeSync  |   fileIo.closeSync    –&gt;  文件管理模块</li><li><code>@ohos.request</code> (上传下载)模块 –&gt;<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-request-V5#requestuploadfile9-1"> request.uploadFile</a></li></ol><h3 id="业务实现流程："><a href="#业务实现流程：" class="headerlink" title="业务实现流程："></a>业务实现流程：</h3><p><img src="/posts/30845/1-1.png" alt="img"></p><div class="code-wrapper"><pre><code class="hljs TS"><span class="hljs-keyword">async</span> <span class="hljs-title function_">putUserAvatar</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">// TODO  用户选择图片</span>  <span class="hljs-comment">// 1. 创建一个图片选择器实例对象</span>  <span class="hljs-keyword">const</span> photoPick = <span class="hljs-keyword">new</span> picker.<span class="hljs-title class_">PhotoViewPicker</span>()  <span class="hljs-comment">// const xxx = new photoAccessHelper.PhotoViewPicker()</span>  <span class="hljs-comment">// 2. 调用selected方法打开相册</span>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> photoPick.<span class="hljs-title function_">select</span>(&#123;    <span class="hljs-title class_">MIMEType</span>: picker.<span class="hljs-property">PhotoViewMIMETypes</span>.<span class="hljs-property">IMAGE_TYPE</span>, <span class="hljs-comment">// 用户可选择的文件类型</span>    <span class="hljs-attr">maxSelectNumber</span>: <span class="hljs-number">3</span>    <span class="hljs-comment">// 用户可选择的文件数量</span>  &#125;)  <span class="hljs-comment">// TODO 判断是否选择图片</span>  <span class="hljs-comment">// 判断是否选择了图片</span>  <span class="hljs-keyword">if</span> (!res.<span class="hljs-property">photoUris</span>) &#123;    <span class="hljs-keyword">return</span>  &#125;  <span class="hljs-comment">// AlertDialog.show(&#123; message: res.photoUris[0], alignment: DialogAlignment.Center &#125;)</span>  <span class="hljs-comment">// TODO 将文件复制到缓存目录，后续从缓存目录获取图片并上传</span>  <span class="hljs-comment">// fileIo.copyFileSync(&#x27;要复制的文件路径&#x27;,&#x27;复制到的目标文件路径&#x27;)</span>  <span class="hljs-comment">// fileIo.copyFileSync(&#x27;要复制的文件fd&#x27;,&#x27;复制到的目标文件路径&#x27;)</span>  <span class="hljs-comment">// 3. 获取app上下文</span>  <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>)  <span class="hljs-comment">// 4. 拿到上下文中的缓存目录路径，作为后面保存图片的文件夹</span>  <span class="hljs-keyword">const</span> targetPath = <span class="hljs-string">`<span class="hljs-subst">$&#123;context.cacheDir&#125;</span>/xxx.jpg`</span>  <span class="hljs-comment">// 5. 以只读方式打开图片文件，拿到文件对象</span>  <span class="hljs-keyword">const</span> photoObj = fileIo.<span class="hljs-title function_">openSync</span>(res.<span class="hljs-property">photoUris</span>[<span class="hljs-number">0</span>], fileIo.<span class="hljs-property">OpenMode</span>.<span class="hljs-property">READ_ONLY</span>)  <span class="hljs-comment">// 6. 从图片对象中获取图片id ，复制文件到目标文件夹</span>  <span class="hljs-keyword">try</span> &#123;    fileIo.<span class="hljs-title function_">copyFileSync</span>(photoObj.<span class="hljs-property">fd</span>, targetPath)  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-title class_">AlertDialog</span>.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(err), <span class="hljs-attr">alignment</span>: <span class="hljs-title class_">DialogAlignment</span>.<span class="hljs-property">Center</span> &#125;)  &#125;  <span class="hljs-comment">// TODO 将缓存在cache中的图片文件上传</span>  <span class="hljs-comment">// request.uploadFile()返回的是个Promise对象，Promise.then返回的值.on监听其上传成功或失败</span>  <span class="hljs-keyword">const</span> task = <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">uploadFile</span>(context, &#123;    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://hmajax.itheima.net/api/uploadimg&#x27;</span>,    <span class="hljs-attr">method</span>: http.<span class="hljs-property">RequestMethod</span>.<span class="hljs-property">POST</span>,    <span class="hljs-attr">header</span>: &#123;      <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&#x27;multipart/form-data&#x27;</span>    &#125;,    <span class="hljs-attr">data</span>: [], <span class="hljs-comment">// 额外提交的数据。后端要求的话就填，没有要求给一个空数组，这是一个必填属性</span>    <span class="hljs-attr">files</span>: [&#123;      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;xxx.jpg&#x27;</span>, <span class="hljs-comment">// 这个文件名，一定要带后缀</span>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;img&#x27;</span>,    <span class="hljs-comment">// 这个值需要看接口文档，Body参数的名字</span>      <span class="hljs-attr">uri</span>: <span class="hljs-string">&quot;internal://cache/xxx.jpg&quot;</span>,      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>    &#125;]  &#125;)  task.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;complete&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;头像上传成功&#x27;</span> &#125;)  &#125;)  task.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;fail&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;头像上传失败&#x27;</span> &#125;)  &#125;)  <span class="hljs-comment">// TODO 获取上传图片的结果，结果返回一个图片存储路径，渲染到视图</span>  <span class="hljs-comment">// 后端返回的数据在res.body中，可以log一下res，看一下数据结构组成</span>  task.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;headerReceive&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> upRes = res <span class="hljs-keyword">as</span> <span class="hljs-title class_">IRes</span>    <span class="hljs-keyword">let</span> url = (<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(upRes.<span class="hljs-property">body</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">IBody</span>).<span class="hljs-property">data</span>.<span class="hljs-property">url</span>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">img</span> = url  &#125;)&#125;</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HM-二维码生成、保存、扫码</title>
    <link href="/posts/53747.html"/>
    <url>/posts/53747.html</url>
    
    <content type="html"><![CDATA[<h1 id="二维码生成、保存、扫码"><a href="#二维码生成、保存、扫码" class="headerlink" title="二维码生成、保存、扫码"></a>二维码生成、保存、扫码</h1><h3 id="业务需求和目标："><a href="#业务需求和目标：" class="headerlink" title="业务需求和目标："></a>业务需求和目标：</h3><p>点击按钮–&gt;生成二维码–&gt;点击保存–&gt;实现二维码保存到相册–&gt;实现二维码扫码</p><h3 id="前置知识点："><a href="#前置知识点：" class="headerlink" title="前置知识点："></a>前置知识点：</h3><ol><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-qrcode-V5">QRCode</a>  – &gt; 二维码生成组件</li><li>componentSnapshot   –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-componentsnapshot-V5#componentsnapshotgetsync12"> componentSnapshot.getSync </a>  –&gt;  组件截图模块</li><li>ImagePacker  –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#imagecreateimagepacker">image.createImagePacker </a>  –&gt;  图片打包器</li><li>fileIo  –&gt;  <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-fileio-V5#fileioopensync">fileIo.openSync</a>  |  fileIo.writeSync  |   fileIo.closeSync    –&gt;  文件管理模块</li><li>fileUri  –&gt;  <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-fileuri-V5#fileurigeturifrompath">fileUri.getUriFromPath</a>   –&gt;  文件URI 模块</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-photoaccesshelper-V5#photoaccesshelpergetphotoaccesshelper">photoAccessHelper</a>  –&gt;  .getPhotoAccessHelper  |  .MediaAssetChangeRequest  |.applyChanges   –&gt; 相册管理模块</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-syscap-V5#caniuse">canIUse</a> –&gt;  系统能力 </li><li>scanBarcode  –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/scan-scanbarcode-api-V5#section829511911349">scanBarcode.startScanForResult</a>  –&gt;默认扫码模块</li></ol><h3 id="业务实现流程"><a href="#业务实现流程" class="headerlink" title="业务实现流程"></a>业务实现流程</h3><p><img src="/posts/53747/1-1.jpeg" alt="img"></p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><div class="code-wrapper"><pre><code class="hljs ArkTs">// 掌握：二维码组件import &#123; componentSnapshot, promptAction &#125; from &#x27;@kit.ArkUI&#x27;import image from &#x27;@ohos.multimedia.image&#x27;import &#123; fileIo, fileUri &#125; from &#x27;@kit.CoreFileKit&#x27;import &#123; photoAccessHelper &#125; from &#x27;@kit.MediaLibraryKit&#x27;import scanBarcode from &#x27;@hms.core.scan.scanBarcode&#x27;// 掌握：如何给组件截图// 截图后将图片保存到相册// 1. PixelMap格式数据转化为二进制数据// 2. 通过 fileIo 将二进制数据写入到缓存目录// 3. 再从缓存目录下载到相册@Entry@Componentstruct TestPage &#123;  @State  img: PixelMap | null = null  build() &#123;    Column() &#123;      Row() &#123;        Button(&#x27;点我截图&#x27;)          .onClick(() =&gt; &#123;            // 获取指定Id组件的组件截图，返回PixelMap类型数据            this.img = componentSnapshot.getSync(&#x27;QRCode&#x27;)          &#125;)        QRCode(&#x27;http://www.baidu.com&#x27;)          .id(&#x27;QRCode&#x27;)      &#125;      .layoutWeight(1)      .border(&#123; width: 2, color: Color.Pink &#125;)      .backgroundColor(Color.Orange)      .width(&#x27;100%&#x27;)      Row() &#123;        Image(this.img)          .width(&#x27;80%&#x27;)      &#125;      .layoutWeight(1)      .justifyContent(FlexAlign.Center)      .alignItems(VerticalAlign.Center)      SaveButton()        .onClick(async () =&gt; &#123;          // TODO  转换像素图片          // 创建图片打包控制器          const Packer = image.createImagePacker()          // 将PixelMap像素类型数据转换为图片数据类型，其返回的是一个二进制的数据类型          const arrayBuffer = await Packer.packing(this.img, &#123; format: &#x27;image/jpeg&#x27;, quality: 98 &#125;)          // TODO 将二进制图片数据保存到缓存          // 获取上下文，并拼接一个要保存到的文件路径          const context = getContext(this)          const filePath = `$&#123;context.cacheDir&#125;/$&#123;Date.now()&#125;.jpeg`          // 以创建、读写的模式打开缓存目录路径          const file = fileIo.openSync(filePath, fileIo.OpenMode.CREATE | fileIo.OpenMode.READ_WRITE)          // 将二进制数据写入缓存目录文件          fileIo.writeSync(file.fd, arrayBuffer!)          // 关闭文件          fileIo.closeSync(file.fd)          // TODO 将缓存文件保存到图库          try &#123;            // 1. 获取完成uri路径 (uri  统一资源标志符)            let uri = fileUri.getUriFromPath(filePath) // 拼接完整的uri路径， 在前面加上  协议:app名称            // 2. 创建一个相册模块实例对象            const phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context)            // 3. 使用相册管理模块，通过指定的uri路径，复制图片文件创建到到相册图片文件中            const assetChangeRequest = photoAccessHelper.MediaAssetChangeRequest.createImageAssetRequest(context, uri)            // 4. 通过相册实例提交创建图片请求            await phAccessHelper.applyChanges(assetChangeRequest);            promptAction.showToast(&#123; message: &#x27;保存成功&#x27; &#125;)          &#125; catch (err) &#123;            AlertDialog.show(&#123; message: JSON.stringify(err, null, 2), alignment: DialogAlignment.Center &#125;)          &#125;        &#125;)      Button(&#x27;扫码&#x27;)        .onClick(async () =&gt; &#123;          // 当开发app，需要适配多端的时候，某一端可能存在无扫码功能，要进行判断          if (canIUse(&#x27;SystemCapability.Multimedia.Scan.ScanBarcode&#x27;)) &#123;            const res = await scanBarcode.startScanForResult(getContext(this))            AlertDialog.show(&#123; message: JSON.stringify(res, null, 2), alignment: DialogAlignment.Center &#125;)          &#125; else &#123;            promptAction.showToast(&#123; message: &#x27;当前设备不支持&#x27; &#125;)          &#125;        &#125;)    &#125;  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>业务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Grid</title>
    <link href="/posts/5275.html"/>
    <url>/posts/5275.html</url>
    
    <content type="html"><![CDATA[<h1 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h1><p>如果布局是由 很多的 行 和 列 所组成、行列可能需要合并、甚至滚动，就可以使用网格布局来实现</p><h2 id="1-固定行列"><a href="#1-固定行列" class="headerlink" title="1. 固定行列"></a>1. 固定行列</h2><ol><li>子组件<strong>必须</strong>是<code>GridItem</code>组件，需要展示的内容设置在 <code>GridItem</code> 内部既可</li><li><code>GridItem</code> 只能有一个<strong>子组件</strong></li></ol><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-title class_">Grid</span>() &#123;  <span class="hljs-title class_">GridItem</span>()&#123;    <span class="hljs-comment">// 展示的内容放在这里</span>  &#125;  <span class="hljs-title class_">GridItem</span>()&#123;    <span class="hljs-comment">// 展示的内容放在这里</span>  &#125;&#125;      .<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;。。。&#x27;</span>).<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;。。。。&#x27;</span>)</code></pre></div><p>  <img src="/posts/5275/3.1-1.png" style="zoom:67%;">      <img src="/posts/5275/3.1-2.png" style="zoom:67%;"></p><table><thead><tr><th><strong>名称</strong></th><th><strong>参数类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>columnsTemplate</td><td>string</td><td>设置当前网格布局列的数量或最小列宽值，不设置时默认1列。例如, ‘1fr 1fr 2fr’ 是将父组件分3列，将父组件允许的宽分为4等份，第一列占1份，第二列占1份，第三列占2份。</td></tr><tr><td>rowsTemplate</td><td>string</td><td>设置当前网格布局行的数量或最小行高值，不设置时默认1行。例如, ‘1fr 1fr 2fr’是将父组件分三行，将父组件允许的高分为4等份，第一行占1份，第二行占一份，第三行占2份。</td></tr><tr><td>columnsGap</td><td>Length</td><td>设置列与列的间距。默认值：0</td></tr><tr><td>rowsGap</td><td>Length</td><td>设置行与行的间距。默认值：0</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 掌握: Grid是一个容器组件, 可以布局网格</span><span class="hljs-comment">// 语法: Grid 包住 GridItem , GirdItem只能有一个子组件</span><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Index</span> &#123;  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Grid</span>() &#123;      <span class="hljs-title class_">ForEach</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">7</span> &#125;), <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;        <span class="hljs-title class_">GridItem</span>() &#123;          <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())        &#125;        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Pink</span>)      &#125;)    &#125;    .<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;1fr 2fr 1fr&#x27;</span>)    .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr &#x27;</span>)  <span class="hljs-comment">//行列数量一起确定后，只能显示行乘列的数量（6）,多的数据会被丢弃</span>    .<span class="hljs-title function_">columnsGap</span>(<span class="hljs-number">10</span>)          <span class="hljs-comment">// 列与列的间距</span>    .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)           <span class="hljs-comment">// 行与行的间距</span>    <span class="hljs-comment">// .height(300)</span>    <span class="hljs-comment">// .width(&#x27;100%&#x27;)</span>  &#125;&#125;</code></pre></div><h2 id="2-合并行列"><a href="#2-合并行列" class="headerlink" title="2. 合并行列"></a>2. 合并行列</h2><p><strong>行列号从0下标开始</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>参数类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>rowStart</td><td>number</td><td>指定当前元素起始行号。</td></tr><tr><td>rowEnd</td><td>number</td><td>指定当前元素终点行号。</td></tr><tr><td>columnStart</td><td>number</td><td>指定当前元素起始列号。</td></tr><tr><td>columnEnd</td><td>number</td><td>指定当前元素终点列号。</td></tr></tbody></table><p><img src="/posts/5275/3.2-1.png"></p><p><img src="/posts/5275/3.2-2.png" style="zoom: 50%;">》》》<img src="/posts/5275/3.2-3.png" style="zoom: 50%;"></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page10</span>_Grid_Merge &#123;  <span class="hljs-comment">// 快速生成 12 个元素的数组</span>  <span class="hljs-comment">// Array.from 是 Array 这个类上面的静态方法</span>  <span class="hljs-comment">// &#123;length:12&#125; 是一个对象，有 length 属性，值为 12</span>  <span class="hljs-attr">nums</span>: <span class="hljs-built_in">number</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">12</span> &#125;)  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;合并行列&#x27;</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-number">900</span>)        .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      <span class="hljs-title class_">Grid</span>() &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">nums</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;          <span class="hljs-keyword">if</span> (index === <span class="hljs-number">2</span>) &#123;            <span class="hljs-title class_">GridItem</span>() &#123;              <span class="hljs-title class_">Text</span>(index + <span class="hljs-string">&#x27;&#x27;</span>)                .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)                .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)            &#125;            .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#9dc3e6&#x27;</span>)            .<span class="hljs-title function_">columnStart</span>(<span class="hljs-number">2</span>)            .<span class="hljs-title function_">columnEnd</span>(<span class="hljs-number">3</span>)          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index === <span class="hljs-number">3</span>) &#123;            <span class="hljs-title class_">GridItem</span>() &#123;              <span class="hljs-title class_">Text</span>(index + <span class="hljs-string">&#x27;&#x27;</span>)                .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)                .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)            &#125;            .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#9dc3e6&#x27;</span>)            .<span class="hljs-title function_">rowStart</span>(<span class="hljs-number">1</span>)            .<span class="hljs-title function_">rowEnd</span>(<span class="hljs-number">2</span>)          &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-title class_">GridItem</span>() &#123;              <span class="hljs-title class_">Text</span>(index + <span class="hljs-string">&#x27;&#x27;</span>)                .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)                .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)            &#125;            .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#9dc3e6&#x27;</span>)          &#125;        &#125;)      &#125;      .<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr 1fr&#x27;</span>)      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr&#x27;</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">260</span>)      .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">columnsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)  &#125;&#125;</code></pre></div><h2 id="3-设置滚动"><a href="#3-设置滚动" class="headerlink" title="3. 设置滚动"></a>3. 设置滚动</h2><p><strong>设置方式:</strong></p><ol><li><strong>水平滚动</strong>：设置的是rowsTemplate，Grid的滚动方向为水平方向。</li><li><strong>垂直滚动</strong>：设置的是columnsTemplate，Grid的滚动方向为垂直方向</li></ol><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> rowsTemplate  或者columnTemplate 只写一个<span class="hljs-bullet">2.</span> 让子组件的高度或者宽度之和, 超过父组件Grid</code></pre></div><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 💥1. rowsTemplate  或者columnTemplate 只写一个</span><span class="hljs-comment">// 💥2. 让子组件的高度或者宽度之和, 超过父组件Grid</span><span class="hljs-meta">@Extend</span>(<span class="hljs-title class_">Text</span>)<span class="hljs-keyword">function</span> <span class="hljs-title function_">xxx</span>(<span class="hljs-params"></span>) &#123;  .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)  .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)  .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)  .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)&#125;<span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page11</span>_Grid_Scroll &#123;  <span class="hljs-attr">list</span>: <span class="hljs-built_in">string</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">30</span> &#125;)  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-comment">// 横向滚动 只写rowsTemplate</span>      <span class="hljs-title class_">Grid</span>() &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">string</span>, index</span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())              .<span class="hljs-title function_">xxx</span>()          &#125;          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)          .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">1</span> &#125;)        &#125;)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<span class="hljs-comment">// 横向滚动 通过 width 设置宽度</span>      .<span class="hljs-title function_">height</span>(<span class="hljs-number">300</span>)      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr&#x27;</span>)      <span class="hljs-comment">// 竖向滚动 只写columnsTemplate</span>      <span class="hljs-title class_">Grid</span>() &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">string</span>, index</span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())              .<span class="hljs-title function_">xxx</span>()          &#125;          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)          .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">1</span> &#125;)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)          .<span class="hljs-title function_">height</span>(<span class="hljs-number">50</span>)<span class="hljs-comment">// 竖向滚动-通过 height 设置高度</span>        &#125;)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">300</span>)      .<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;1fr&#x27;</span>)    &#125;  &#125;&#125;</code></pre></div><h2 id="4-控制器对象-控制滚动"><a href="#4-控制器对象-控制滚动" class="headerlink" title="4. 控制器对象-控制滚动"></a>4. 控制器对象-控制滚动</h2><ol><li>创建 Scroller 对象（控制器对象）</li><li>控制器对象设置给 Grid</li><li>单独调用 Scroller 对象的  scrollPage 方法</li></ol><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 1.创建 Scroller 对象（new 关键字，调用Scroller函数，返回一个Scroller的对象）</span><span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()<span class="hljs-comment">//  2.设置给 Grid：这个属性可选，所以之前不设置也不会报错</span> <span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>) &#123;   <span class="hljs-comment">// ...</span> &#125;<span class="hljs-comment">// 3.调用 Scroller 对象的  scrollPage 方法即可实现滚动</span><span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>.<span class="hljs-title function_">scrollPage</span>(&#123;  <span class="hljs-attr">next</span>:<span class="hljs-literal">true</span> <span class="hljs-comment">// 下一页</span>  <span class="hljs-attr">next</span>:<span class="hljs-literal">false</span> <span class="hljs-comment">// 上一页</span>&#125;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page13</span>_Grid_Scroller &#123;  <span class="hljs-attr">nums</span>: <span class="hljs-built_in">number</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">200</span> &#125;)  <span class="hljs-comment">// 控制器对象，不是状态属性，不需要添加任何修饰符</span>  <span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;控制器-代码控制滚动&#x27;</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-number">900</span>)        .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      <span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>) &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">nums</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-title class_">Text</span>(index + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;&#x27;</span>)          &#125;          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;25%&#x27;</span>)        &#125;)      &#125;      .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">450</span>)      .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">columnsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr 1fr&#x27;</span>)      <span class="hljs-title class_">Row</span>() &#123;        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;上一页&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-number">100</span>)          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;            <span class="hljs-comment">// 上一页</span>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>.<span class="hljs-title function_">scrollPage</span>(&#123; <span class="hljs-attr">next</span>: <span class="hljs-literal">false</span> &#125;)          &#125;)        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;下一页&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-number">100</span>)          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;            <span class="hljs-comment">// 下一页</span>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>.<span class="hljs-title function_">scrollPage</span>(&#123; <span class="hljs-attr">next</span>: <span class="hljs-literal">true</span> &#125;)          &#125;)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">justifyContent</span>(<span class="hljs-title class_">FlexAlign</span>.<span class="hljs-property">SpaceAround</span>)    &#125;  &#125;&#125;</code></pre></div><h2 id="5-控制器对象-自定义滚动条"><a href="#5-控制器对象-自定义滚动条" class="headerlink" title="5. 控制器对象-自定义滚动条"></a>5. 控制器对象-自定义滚动条</h2><blockquote><ol><li><p>隐藏默认滚动条</p></li><li><p>使用ScrollBar组件自定义滚动条</p><p>​a. ScrollBar 和 Grid 设置同一个 Scroller（控制器对象）</p><p>​b. 单独使用<strong>ScrollBar</strong>组件通过 参数 和 属性自定义滚动条</p></li></ol></blockquote><p><strong>第一步</strong>：首先通过 <strong>Grid</strong> 的 <strong>scrollBar</strong> 属性关闭滚动条</p><table><thead><tr><th><strong>属性名</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>scrollBar</td><td>BarState</td><td>设置滚动条状态。默认值： BarState.auto  <br>BarState.off 关闭<br>BarState.on 常驻<br>BarState.auto 按需显示</td></tr></tbody></table><p><strong>第二步</strong>：单独使用<strong>ScrollBar</strong>组件自定义滚动条，ScrollBar 和 Grid 设置同一个 Scroller（控制器对象）</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>必填</strong></th><th><strong>参数描述</strong></th></tr></thead><tbody><tr><td>scroller</td><td>Scroller</td><td>是</td><td><strong>可滚动组件的控制器</strong>。用于与可滚动组件进行绑定。</td></tr><tr><td>direction</td><td><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-scrollbar-0000001774121254#ZH-CN_TOPIC_0000001774121254__scrollbardirection%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E">ScrollBarDirection</a></td><td>否</td><td>滚动条的方向，控制可滚动组件对应方向的滚动。默认值：ScrollBarDirection.Vertical</td></tr><tr><td>state</td><td><a href="https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/reference/apis-arkui/arkui-ts/ts-appendix-enums.md#barstate">BarState</a></td><td>否</td><td>滚动条状态。 默认值：BarState.Auto</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 创建控制器对象</span><span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()<span class="hljs-comment">// 设置给 Grid 组件</span><span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>)&#123;  <span class="hljs-comment">// 略</span>&#125;.<span class="hljs-title function_">scrollBar</span>(<span class="hljs-title class_">BarState</span>.<span class="hljs-property">off</span>)<span class="hljs-comment">//关闭默认滚动条</span><span class="hljs-comment">// 设置给 ScrollBar 组件</span><span class="hljs-comment">// 和 Grid 设置的是同一个</span><span class="hljs-title class_">ScrollBar</span>(&#123;  <span class="hljs-attr">scroller</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>,  <span class="hljs-attr">direction</span>: <span class="hljs-title class_">ScrollBarDirection</span>.<span class="hljs-property">Horizontal</span> <span class="hljs-comment">// 方向</span>  <span class="hljs-attr">state</span>: <span class="hljs-title class_">BarState</span>.<span class="hljs-property">On</span> <span class="hljs-comment">// 滚动条持续显示</span>&#125;) &#123;  <span class="hljs-comment">// 滚动内容 设置外观即可</span>  <span class="hljs-title class_">Text</span>()&#125;<span class="hljs-comment">// 设置外观</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page14</span>_Grid_ScrollBar &#123;  <span class="hljs-comment">// 长度为 30 每一项都为 undefined 的数组</span>  <span class="hljs-attr">list</span>: <span class="hljs-built_in">string</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">30</span> &#125;)  <span class="hljs-comment">// 创建控制器对象==================</span>  <span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;控制器-自定义滚动条&#x27;</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-number">900</span>)        .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      <span class="hljs-comment">// 设置控制器对象给 Grid================</span>      <span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>) &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">string</span>, index</span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">ItemBuilder</span>(index)          &#125;          .<span class="hljs-title function_">padding</span>(<span class="hljs-number">5</span>)          .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;30%&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;25%&#x27;</span>)        &#125;)      &#125;      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr&#x27;</span>) <span class="hljs-comment">// 竖向滚动</span>      .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">300</span>)      .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">1</span> &#125;)      .<span class="hljs-title function_">padding</span>(<span class="hljs-number">5</span>)      .<span class="hljs-title function_">scrollBar</span>(<span class="hljs-title class_">BarState</span>.<span class="hljs-property">Off</span>) <span class="hljs-comment">// 关闭===============</span>      <span class="hljs-comment">// 自定义滚动条====================</span>      <span class="hljs-title class_">ScrollBar</span>(&#123;        <span class="hljs-attr">scroller</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>,<span class="hljs-comment">// 和 Grid 同一个控制器对象</span>        <span class="hljs-attr">direction</span>: <span class="hljs-title class_">ScrollBarDirection</span>.<span class="hljs-property">Horizontal</span>,      &#125;) &#123;          <span class="hljs-comment">//滚动条外观==============</span>        <span class="hljs-title class_">Text</span>()          .<span class="hljs-title function_">width</span>(<span class="hljs-number">40</span>)          .<span class="hljs-title function_">height</span>(<span class="hljs-number">20</span>)          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Orange</span>)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-number">200</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">20</span>)      .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)  &#125;  <span class="hljs-meta">@Builder</span>  <span class="hljs-title class_">ItemBuilder</span>(<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>) &#123;    <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())      .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)      .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swiper</title>
    <link href="/posts/23119.html"/>
    <url>/posts/23119.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.  基本用法"></a>1.  基本用法</h2><blockquote><p>首先来看看如何设置轮播内容，以及设置尺寸</p></blockquote><ol><li>轮播内容：内容作为<code>Swiper</code>的子组件即可</li><li>尺寸：</li></ol><p>​a. 设置 <code>Swiper</code> 的尺寸：内容会拉伸为和 <code>Swiper</code> 一致（<strong>优先级高</strong>）</p><p>​b. 没有设置<code>Swiper</code>的尺寸，<code>Swiper</code>被子组件的尺寸撑开</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Swiper</span>() &#123;  <span class="hljs-comment">// 轮播内容 </span>  <span class="hljs-comment">// (设置尺寸，撑开swiper)</span>&#125;<span class="hljs-comment">// 设置尺寸（内容拉伸、优先级高）</span>.<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-number">100</span>)</code></pre></div><h2 id="2-常用属性方法"><a href="#2-常用属性方法" class="headerlink" title="2.  常用属性方法"></a>2.  常用属性方法</h2><table><thead><tr><th><strong>参数名</strong></th><th align="left"><strong>参数类型</strong></th><th align="left">参数描述</th></tr></thead><tbody><tr><td>autoPlay</td><td align="left">boolean</td><td align="left">子组件是否自动播放。默认值：false<strong>说明：</strong>loop为false时，自动轮播到最后一页时停止轮播。手势切换后不是最后一页时继续播放。</td></tr><tr><td>interval</td><td align="left">number</td><td align="left">使用自动播放时播放的时间间隔，单位为毫秒。默认值：3000</td></tr><tr><td>vertical</td><td align="left">boolean</td><td align="left">是否为纵向滑动。默认值：false</td></tr><tr><td>loop👎</td><td align="left">boolean</td><td align="left">是否开启无限循环播放。设置为true时表示无限循环播放，设置为false时表示只播放一次。默认值：true</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Index</span> &#123;  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Swiper</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;0&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;1&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-number">160</span>)    .<span class="hljs-title function_">loop</span>(<span class="hljs-literal">false</span>) <span class="hljs-comment">// 是否开启循环 true/false</span>    .<span class="hljs-title function_">autoPlay</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 是否自动播放 true/false</span>    .<span class="hljs-title function_">interval</span>(<span class="hljs-number">4000</span>) <span class="hljs-comment">// 自动播放时间间隔 单位毫秒 默认3000</span>    .<span class="hljs-title function_">vertical</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 是否纵向滑动</span>  &#125;&#125;</code></pre></div><h2 id="3-调整导航点"><a href="#3-调整导航点" class="headerlink" title="3. 调整导航点"></a>3. 调整导航点</h2><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-title class_">Swiper</span>()&#123;  <span class="hljs-comment">// 略</span>&#125;.<span class="hljs-title function_">indicator</span>(<span class="hljs-literal">false</span>) <span class="hljs-comment">// 关闭导航</span>.<span class="hljs-title function_">indicator</span>(<span class="hljs-title class_">Indicator</span>.<span class="hljs-title function_">dot</span>()) <span class="hljs-comment">// 圆点指示器（默认）</span>.<span class="hljs-title function_">indicator</span>(<span class="hljs-title class_">Indicator</span>.<span class="hljs-title function_">digit</span>()) <span class="hljs-comment">// 数字指示器</span></code></pre></div><p><strong>位置属性：</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>参数描述</strong></th></tr></thead><tbody><tr><td>left</td><td>Length</td><td>设置导航点距离Swiper组件左边的距离。默认值：0单位：vp</td></tr><tr><td>top</td><td>Length</td><td>设置导航点距离Swiper组件顶部的距离。默认值：0单位：vp</td></tr><tr><td>right</td><td>Length</td><td>设置导航点距离Swiper组件右边的距离。默认值：0单位：vp</td></tr><tr><td>bottom</td><td>Length</td><td>设置导航点距离Swiper组件底部的距离。默认值：0单位：vp</td></tr></tbody></table><p><strong>样式属性：</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>参数描述</strong></th></tr></thead><tbody><tr><td>itemWidth</td><td>Length</td><td>设置Swiper组件圆点导航指示器的宽，不支持设置百分比。默认值：6单位：vp</td></tr><tr><td>itemHeightLength</td><td>Length</td><td>设置Swiper组件圆点导航指示器的高，不支持设置百分比。默认值：6单位：vp</td></tr><tr><td>selectedItemWidth</td><td>Length</td><td>设置选中Swiper组件圆点导航指示器的宽，不支持设置百分比。默认值：12单位：vp</td></tr><tr><td>selectedItemHeight</td><td>Length</td><td>设置选中Swiper组件圆点导航指示器的高，不支持设置百分比。默认值：6单位：vp</td></tr><tr><td>color</td><td><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-types-0000001774121374#ZH-CN_TOPIC_0000001774121374__resourcecolor">ResourceColor</a></td><td>设置Swiper组件圆点导航指示器的颜色。默认值：’#182431’（10%透明度）</td></tr><tr><td>selectedColor</td><td>ResourceColor</td><td>设置选中Swiper组件圆点导航指示器的颜色。默认值：’#007DFF’</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Index</span> &#123;  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Swiper</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;0&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;1&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;2&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-number">160</span>)    <span class="hljs-comment">// .indicator(false) // 关闭导航点</span>    <span class="hljs-comment">// .indicator(Indicator.digit()) // 数字导航点</span>    .<span class="hljs-title function_">indicator</span>(      <span class="hljs-title class_">Indicator</span>.<span class="hljs-title function_">dot</span>()        .<span class="hljs-title function_">left</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 左侧距离</span>        .<span class="hljs-title function_">top</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 顶部距离</span>        .<span class="hljs-title function_">bottom</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 底部距离</span>        .<span class="hljs-title function_">right</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 右侧距离（距离属性组合使用，无需全部设置）</span>        .<span class="hljs-title function_">itemWidth</span>(<span class="hljs-number">20</span>)<span class="hljs-comment">// 指示器宽度</span>        .<span class="hljs-title function_">itemHeight</span>(<span class="hljs-number">20</span>)<span class="hljs-comment">// 指示器高度</span>        .<span class="hljs-title function_">selectedItemWidth</span>(<span class="hljs-number">30</span>)<span class="hljs-comment">// 选中指示器宽度</span>        .<span class="hljs-title function_">selectedItemHeight</span>(<span class="hljs-number">30</span>)<span class="hljs-comment">// 选中指示器高度</span>        .<span class="hljs-title function_">selectedColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Yellow</span>)<span class="hljs-comment">// 选中指示器颜色</span>        .<span class="hljs-title function_">color</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span>) <span class="hljs-comment">// 默认指示器宽度</span>    ) <span class="hljs-comment">// 圆形导航点</span>  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo基础配置</title>
    <link href="/posts/271.html"/>
    <url>/posts/271.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo修改Fluid主题"><a href="#Hexo修改Fluid主题" class="headerlink" title="Hexo修改Fluid主题"></a>Hexo修改Fluid主题</h1><blockquote><p>以Fluid主题为例</p><p>Github项目<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a></p><p>主题文档<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B"> Hexo Fluid 用户手册</a></p></blockquote><h2 id="1-下载主题包"><a href="#1-下载主题包" class="headerlink" title="1. 下载主题包"></a>1. 下载主题包</h2><p>载 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a> 解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><p><img src="/posts/271/1-1.png" alt="image.png"></p><h2 id="2-修改-config-yml文件"><a href="#2-修改-config-yml文件" class="headerlink" title="2. 修改_config.yml文件"></a>2. 修改_config.yml文件</h2><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span></code></pre></div><p><img src="/posts/271/2-1.png" alt="image.png"></p><p><img src="/posts/271/2-2.png" alt="image.png"></p><h2 id="3-本地部署查看效果并上传到GitHub"><a href="#3-本地部署查看效果并上传到GitHub" class="headerlink" title="3. 本地部署查看效果并上传到GitHub"></a>3. 本地部署查看效果并上传到GitHub</h2><p>hexo三件套</p><div class="code-wrapper"><pre><code class="hljs bash">hexo clean   // 清除缓存hexo g       // 生成打包hexo d       // 上传</code></pre></div><p><img src="/posts/271/3-1.png" alt="image.png"></p><h1 id="Hexo文章生成永久链接"><a href="#Hexo文章生成永久链接" class="headerlink" title="Hexo文章生成永久链接"></a>Hexo文章生成永久链接</h1><h2 id="1-默认文章链接配置"><a href="#1-默认文章链接配置" class="headerlink" title="1. 默认文章链接配置"></a>1. 默认文章链接配置</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">premalink:</span> <span class="hljs-string">:year/:month/:day/:title</span></code></pre></div><p>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><h2 id="2-Hexo-abbrLink插件"><a href="#2-Hexo-abbrLink插件" class="headerlink" title="2. Hexo abbrLink插件"></a>2. Hexo abbrLink插件</h2><p>根目录Git Bash 终端运行以下代码</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-abbrlink --save</code></pre></div><h2 id="3-配置文件下添加"><a href="#3-配置文件下添加" class="headerlink" title="3. 配置文件下添加"></a>3. 配置文件下添加</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">abbrlink:</span>     <span class="hljs-attr">alg:</span> <span class="hljs-string">crc16</span> <span class="hljs-comment">#算法：</span>    <span class="hljs-attr">crc16(default) and crc32 rep:</span> <span class="hljs-string">hex</span> </code></pre></div><p><img src="/posts/271/4-1.png" alt="image.png"></p><h2 id="4-配置文件permalink修改"><a href="#4-配置文件permalink修改" class="headerlink" title="4. 配置文件permalink修改"></a>4. 配置文件permalink修改</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink.html</span>  <span class="hljs-comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></code></pre></div><p><img src="/posts/271/5-1.png" alt="image.png"></p><p>生成完后，原md文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的<code>ID</code> 。这个字段确保了在我们修改了<code>Front-matter</code> 内的博客标题title或创建日期date字段之后而不会改变链接地址.</p><h1 id="Hexo-Asset-Image插件安装"><a href="#Hexo-Asset-Image插件安装" class="headerlink" title="Hexo Asset Image插件安装"></a>Hexo Asset Image插件安装</h1><blockquote><p>Hexo Asset Image 是一个专为 Hexo 博客框架设计的开源插件，它旨在简化图片资源的管理和插入流程。通过本插件，博主可以更加便捷地在文章中引用本地或远程的图片，并自动处理图片路径，优化博客的构建和部署过程。对于追求高效管理和优雅展示图片内容的Hexo用户来说，这是一个不可或缺的工具。</p></blockquote><p>主要解决本地图片资源加载不出的问题</p><h2 id="项目快速启动"><a href="#项目快速启动" class="headerlink" title="项目快速启动"></a>项目快速启动</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先确保你的Hexo环境已经搭建完毕，之后在博客根目录下，通过npm安装此插件：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-asset-image --save</code></pre></div><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>编辑Hexo的配置文件<code>_config.yml</code>，添加以下行以启用插件：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">plugins:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">hexo-asset-image</span></code></pre></div><p>插件会处理这个相对路径，在生成静态站点时将图片移动到正确的资产目录下，并自动更新Markdown文件中的图片链接。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>在Markdown格式的文章中，你可以像下面这样直接引用图片：</p><div class="code-wrapper"><pre><code class="hljs markdown">![](<span class="hljs-link">path/to/your/image.jpg</span>)</code></pre></div><p>插件会处理这个相对路径，在生成静态站点时将图片移动到正确的资产目录下，并自动更新Markdown文件中的图片链接。</p><h3 id="自动创建同名文件夹放图片"><a href="#自动创建同名文件夹放图片" class="headerlink" title="自动创建同名文件夹放图片"></a>自动创建同名文件夹放图片</h3><p>查看hexo官网，可以看到官网推荐将<code>post_asset_folder</code>属性置为true，在新建博客<code>hexo n “xxx”</code>的时候会在根目录下创建一个同名的文件夹，将需要插入的图片放到这个目录。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><span class="hljs-attr">marked:</span>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客在GitHub搭建</title>
    <link href="/posts/42759.html"/>
    <url>/posts/42759.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-准备工具"><a href="#1-准备工具" class="headerlink" title="1.准备工具"></a>1.准备工具</h1><h2 id="1-1-Node-js和git"><a href="#1-1-Node-js和git" class="headerlink" title="1.1. Node.js和git"></a>1.1. Node.js和git</h2><p><a href="https://nodejs.org/en/">下载nodejs</a></p><p><a href="https://git-scm.com/downloads">下载git</a></p><h2 id="1-2-测试是否成功"><a href="#1-2-测试是否成功" class="headerlink" title="1.2. 测试是否成功"></a>1.2. 测试是否成功</h2><div class="code-wrapper"><pre><code class="hljs cmd">node -vnpm -v（这个是node附带的）git -v</code></pre></div><p><img src="/posts/42759/1.2-1.png" alt="image.png"></p><h2 id="1-3-下载Hexo"><a href="#1-3-下载Hexo" class="headerlink" title="1.3. 下载Hexo"></a>1.3. 下载Hexo</h2><div class="code-wrapper"><pre><code class="hljs cmd">npm install hexo-cli -g</code></pre></div><p><img src="/posts/42759/1.3-1.png" alt="image.png"></p><h1 id="2-搭建GitHub仓库"><a href="#2-搭建GitHub仓库" class="headerlink" title="2. 搭建GitHub仓库"></a>2. 搭建GitHub仓库</h1><p>成功下载好工具之后，我们开始搭建GitHub存储静态页面的仓库</p><ul><li>首先注册&#x2F;登入<a href="https://github.com/">Github</a></li><li>点击Create a new repository进入新建仓库页面</li></ul><p>仓库名输入：</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">用户名<span class="hljs-string">.github.io</span></code></pre></div><blockquote><p>勾选 Public</p><p>勾选 Add a README file</p><p>拉到下面点击create创建</p></blockquote><p><img src="/posts/42759/2-1.png" alt="image.png"></p><h1 id="3-生成SSH-keys与GitHub建立连接"><a href="#3-生成SSH-keys与GitHub建立连接" class="headerlink" title="3. 生成SSH keys与GitHub建立连接"></a>3. 生成SSH keys与GitHub建立连接</h1><h2 id="3-1-生成SSH-Keys"><a href="#3-1-生成SSH-Keys" class="headerlink" title="3.1. 生成SSH Keys"></a>3.1. 生成SSH Keys</h2><p>桌面，右键空白处然后点Git bash here,输入</p><div class="code-wrapper"><pre><code class="hljs Bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span></code></pre></div><p><img src="/posts/42759/3.1-1.png" alt="image.png"></p><p>然后进入<code>C:\Users\</code>用户名，在里面进入<code>.ssh</code>文件</p><p>用记事本打开里面的<code>id_rsa.pub</code>,全选复制里面的代码</p><h2 id="3-2-打开Github连接SSH"><a href="#3-2-打开Github连接SSH" class="headerlink" title="3.2. 打开Github连接SSH"></a>3.2. 打开Github连接SSH</h2><p>进入用户设置，找到SSH keys</p><p>新建SSH keys，名称随意，在下面粘贴代码，然后创建</p><p><img src="/posts/42759/3.2-1.png" alt="image.png"></p><h2 id="3-3-测试是否成功"><a href="#3-3-测试是否成功" class="headerlink" title="3.3. 测试是否成功"></a>3.3. 测试是否成功</h2><p>在git bash中输入</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com</code></pre></div><p><img src="/posts/42759/3.3-1.png" alt="image.png"></p><h1 id="4-本地部署"><a href="#4-本地部署" class="headerlink" title="4. 本地部署"></a>4. 本地部署</h1><h2 id="4-1-hexo-初始化"><a href="#4-1-hexo-初始化" class="headerlink" title="4.1. hexo 初始化"></a>4.1. hexo 初始化</h2><p>在喜欢位置新建文件Blog，然后进入文件夹</p><p>右键空白处然后点Git bash here，输入</p><div class="code-wrapper"><pre><code class="hljs bash">hexo init</code></pre></div><p>如果‘command not find’，就在前面加上<code>npx</code>，如：<code>npx hexo init</code></p><h2 id="4-2-hexo-安装"><a href="#4-2-hexo-安装" class="headerlink" title="4.2. hexo 安装"></a>4.2. hexo 安装</h2><div class="code-wrapper"><pre><code class="hljs bash">hexo install    // hexo安装</code></pre></div><h2 id="4-3-hexo-打包生成部署本地"><a href="#4-3-hexo-打包生成部署本地" class="headerlink" title="4.3. hexo 打包生成部署本地"></a>4.3. hexo 打包生成部署本地</h2><div class="code-wrapper"><pre><code class="hljs bash">hexo g     // hexo生成hexo s     // hexo本地部署</code></pre></div><p>（如果不成功的话就重复直到成功，因为国内与github连接不稳定）</p><p>现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了</p><p>然后回到命令行，<code>ctrl+c</code>关闭</p><h1 id="5-上线博客"><a href="#5-上线博客" class="headerlink" title="5. 上线博客"></a>5. 上线博客</h1><h2 id="5-1-修改仓库地址"><a href="#5-1-修改仓库地址" class="headerlink" title="5.1. 修改仓库地址"></a>5.1. 修改仓库地址</h2><ul><li>进入之前的Blog文件夹，用记事本打开<code>_config.yml</code>,拉到最下面将deploy后面的全删掉，复制粘贴这段</li></ul><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><span class="hljs-attr">repository:</span> <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span></code></pre></div><p>注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！</p><ul><li>去github之前生成的仓库页面，点code，复制https链接</li></ul><p><img src="/posts/42759/5.1-1.png" alt="image.png"></p><ul><li>将其粘贴到我们记事本中的<code>repository：</code>后面,然后保存退出</li></ul><p><img src="/posts/42759/5.1-2.png" alt="image.png"></p><h2 id="5-2-回到博客文件夹，git-bash"><a href="#5-2-回到博客文件夹，git-bash" class="headerlink" title="5.2. 回到博客文件夹，git bash"></a>5.2. 回到博客文件夹，git bash</h2><h3 id="5-2-1-安装自动部署发布工具"><a href="#5-2-1-安装自动部署发布工具" class="headerlink" title="5.2.1. 安装自动部署发布工具"></a>5.2.1. 安装自动部署发布工具</h3><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre></div><h3 id="5-2-2-在Blog文件夹git-bash"><a href="#5-2-2-在Blog文件夹git-bash" class="headerlink" title="5.2.2. 在Blog文件夹git bash"></a>5.2.2. 在Blog文件夹git bash</h3><div class="code-wrapper"><pre><code class="hljs bash">hexo g   （生成）hexo d   （上传)</code></pre></div><p><img src="/posts/42759/5.2.2-1.png" alt="image.png"></p><p>如果是第一次使用git的话会需要配置</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span>git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span></code></pre></div><p>配置完后再<code>hexo d</code>上传</p><p>在跳出来的窗口内进行登录</p><p>接下来我们就成功把本地内容上传到github了</p><p>上传成功以后，我们就算搭建好了！上自己的网址看看吧</p><p>网址是我们之前设的仓库名：用户名.github.io</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
