<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HM-二维码生成、保存、扫码</title>
    <link href="/posts/53747.html"/>
    <url>/posts/53747.html</url>
    
    <content type="html"><![CDATA[<h1 id="二维码生成、保存、扫码"><a href="#二维码生成、保存、扫码" class="headerlink" title="二维码生成、保存、扫码"></a>二维码生成、保存、扫码</h1><h3 id="业务需求和目标："><a href="#业务需求和目标：" class="headerlink" title="业务需求和目标："></a>业务需求和目标：</h3><p>点击按钮–&gt;生成二维码–&gt;点击保存–&gt;实现二维码保存到相册–&gt;实现二维码扫码</p><h3 id="前置知识点："><a href="#前置知识点：" class="headerlink" title="前置知识点："></a>前置知识点：</h3><ol><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-qrcode-V5">QRCode</a> – &gt; 二维码生成组件</li><li>componentSnapshot –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-componentsnapshot-V5#componentsnapshotgetsync12"> componentSnapshot.getSync </a> –&gt; 组件截图模块</li><li>ImagePacker –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#imagecreateimagepacker">image.createImagePacker </a> –&gt; 图片打包器</li><li>fileIo –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-fileio-V5#fileioopensync">fileIo.openSync</a> | fileIo.writeSync | fileIo.closeSync –&gt; 文件管理模块</li><li>fileUri –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-fileuri-V5#fileurigeturifrompath">fileUri.getUriFromPath</a> –&gt; 文件 URI 模块</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-photoaccesshelper-V5#photoaccesshelpergetphotoaccesshelper">photoAccessHelper</a> –&gt; .getPhotoAccessHelper | .MediaAssetChangeRequest |.applyChanges –&gt; 相册管理模块</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-syscap-V5#caniuse">canIUse</a> –&gt; 系统能力</li><li>scanBarcode –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/scan-scanbarcode-api-V5#section829511911349">scanBarcode.startScanForResult</a> –&gt;默认扫码模块</li></ol><h3 id="业务实现流程"><a href="#业务实现流程" class="headerlink" title="业务实现流程"></a>业务实现流程</h3><p><img src="/posts/53747/1-1.jpeg" alt="img"></p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 掌握：二维码组件</span><span class="hljs-keyword">import</span> &#123; componentSnapshot, promptAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.ArkUI&#x27;</span><span class="hljs-keyword">import</span> image <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos.multimedia.image&#x27;</span><span class="hljs-keyword">import</span> &#123; fileIo, fileUri &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.CoreFileKit&#x27;</span><span class="hljs-keyword">import</span> &#123; photoAccessHelper &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.MediaLibraryKit&#x27;</span><span class="hljs-keyword">import</span> scanBarcode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@hms.core.scan.scanBarcode&#x27;</span><span class="hljs-comment">// 掌握：如何给组件截图</span><span class="hljs-comment">// 截图后将图片保存到相册</span><span class="hljs-comment">// 1. PixelMap格式数据转化为二进制数据</span><span class="hljs-comment">// 2. 通过 fileIo 将二进制数据写入到缓存目录</span><span class="hljs-comment">// 3. 再从缓存目录下载到相册</span><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">TestPage</span> &#123;  <span class="hljs-meta">@State</span>  <span class="hljs-attr">img</span>: <span class="hljs-title class_">PixelMap</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Row</span>() &#123;        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;点我截图&#x27;</span>)          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;            <span class="hljs-comment">// 获取指定Id组件的组件截图，返回PixelMap类型数据</span>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">img</span> = componentSnapshot.<span class="hljs-title function_">getSync</span>(<span class="hljs-string">&#x27;QRCode&#x27;</span>)          &#125;)        <span class="hljs-title class_">QRCode</span>(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>)          .<span class="hljs-title function_">id</span>(<span class="hljs-string">&#x27;QRCode&#x27;</span>)      &#125;      .<span class="hljs-title function_">layoutWeight</span>(<span class="hljs-number">1</span>)      .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">color</span>: <span class="hljs-title class_">Color</span>.<span class="hljs-property">Pink</span> &#125;)      .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Orange</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      <span class="hljs-title class_">Row</span>() &#123;        <span class="hljs-title class_">Image</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">img</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;80%&#x27;</span>)      &#125;      .<span class="hljs-title function_">layoutWeight</span>(<span class="hljs-number">1</span>)      .<span class="hljs-title function_">justifyContent</span>(<span class="hljs-title class_">FlexAlign</span>.<span class="hljs-property">Center</span>)      .<span class="hljs-title function_">alignItems</span>(<span class="hljs-title class_">VerticalAlign</span>.<span class="hljs-property">Center</span>)      <span class="hljs-title class_">SaveButton</span>()        .<span class="hljs-title function_">onClick</span>(<span class="hljs-title function_">async</span> () =&gt; &#123;          <span class="hljs-comment">// TODO  转换像素图片</span>          <span class="hljs-comment">// 创建图片打包控制器</span>          <span class="hljs-keyword">const</span> <span class="hljs-title class_">Packer</span> = image.<span class="hljs-title function_">createImagePacker</span>()          <span class="hljs-comment">// 将PixelMap像素类型数据转换为图片数据类型，其返回的是一个二进制的数据类型</span>          <span class="hljs-keyword">const</span> arrayBuffer = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Packer</span>.<span class="hljs-title function_">packing</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">img</span>, &#123; <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>, <span class="hljs-attr">quality</span>: <span class="hljs-number">98</span> &#125;)          <span class="hljs-comment">// TODO 将二进制图片数据保存到缓存</span>          <span class="hljs-comment">// 获取上下文，并拼接一个要保存到的文件路径</span>          <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>)          <span class="hljs-keyword">const</span> filePath = <span class="hljs-string">`<span class="hljs-subst">$&#123;context.cacheDir&#125;</span>/<span class="hljs-subst">$&#123;<span class="hljs-built_in">Date</span>.now()&#125;</span>.jpeg`</span>          <span class="hljs-comment">// 以创建、读写的模式打开缓存目录路径</span>          <span class="hljs-keyword">const</span> file = fileIo.<span class="hljs-title function_">openSync</span>(filePath, fileIo.<span class="hljs-property">OpenMode</span>.<span class="hljs-property">CREATE</span> | fileIo.<span class="hljs-property">OpenMode</span>.<span class="hljs-property">READ_WRITE</span>)          <span class="hljs-comment">// 将二进制数据写入缓存目录文件</span>          fileIo.<span class="hljs-title function_">writeSync</span>(file.<span class="hljs-property">fd</span>, arrayBuffer!)          <span class="hljs-comment">// 关闭文件</span>          fileIo.<span class="hljs-title function_">closeSync</span>(file.<span class="hljs-property">fd</span>)          <span class="hljs-comment">// TODO 将缓存文件保存到图库</span>          <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 1. 获取完成uri路径 (uri  统一资源标志符)</span>            <span class="hljs-keyword">let</span> uri = fileUri.<span class="hljs-title function_">getUriFromPath</span>(filePath) <span class="hljs-comment">// 拼接完整的uri路径， 在前面加上  协议:app名称</span>            <span class="hljs-comment">// 2. 创建一个相册模块实例对象</span>            <span class="hljs-keyword">const</span> phAccessHelper = photoAccessHelper.<span class="hljs-title function_">getPhotoAccessHelper</span>(context)            <span class="hljs-comment">// 3. 使用相册管理模块，通过指定的uri路径，复制图片文件创建到到相册图片文件中</span>            <span class="hljs-keyword">const</span> assetChangeRequest = photoAccessHelper.<span class="hljs-property">MediaAssetChangeRequest</span>.<span class="hljs-title function_">createImageAssetRequest</span>(context, uri)            <span class="hljs-comment">// 4. 通过相册实例提交创建图片请求</span>            <span class="hljs-keyword">await</span> phAccessHelper.<span class="hljs-title function_">applyChanges</span>(assetChangeRequest);            promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;保存成功&#x27;</span> &#125;)          &#125; <span class="hljs-keyword">catch</span> (err) &#123;            <span class="hljs-title class_">AlertDialog</span>.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(err, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>), <span class="hljs-attr">alignment</span>: <span class="hljs-title class_">DialogAlignment</span>.<span class="hljs-property">Center</span> &#125;)          &#125;        &#125;)      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;扫码&#x27;</span>)        .<span class="hljs-title function_">onClick</span>(<span class="hljs-title function_">async</span> () =&gt; &#123;          <span class="hljs-comment">// 当开发app，需要适配多端的时候，某一端可能存在无扫码功能，要进行判断</span>          <span class="hljs-keyword">if</span> (<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&#x27;SystemCapability.Multimedia.Scan.ScanBarcode&#x27;</span>)) &#123;            <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> scanBarcode.<span class="hljs-title function_">startScanForResult</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>))            <span class="hljs-title class_">AlertDialog</span>.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(res, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>), <span class="hljs-attr">alignment</span>: <span class="hljs-title class_">DialogAlignment</span>.<span class="hljs-property">Center</span> &#125;)          &#125; <span class="hljs-keyword">else</span> &#123;            promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;当前设备不支持&#x27;</span> &#125;)          &#125;        &#125;)    &#125;  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>业务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HM-权限申请</title>
    <link href="/posts/20117.html"/>
    <url>/posts/20117.html</url>
    
    <content type="html"><![CDATA[<h1 id="鸿蒙应用开发–权限申请"><a href="#鸿蒙应用开发–权限申请" class="headerlink" title="鸿蒙应用开发–权限申请"></a>鸿蒙应用开发–权限申请</h1><h2 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h2><p>根据授权方式的不同，权限类型可分为<strong>system_grant（系统授权）</strong>和<strong>user_grant（用户授权）。</strong></p><p><code>system_grant</code>指的是<strong>系统授权类型</strong>，在该类型的权限许可下，应用被允许访问的数据不会涉及到用户或设备的敏感信息，应用被允许执行的操作对系统或者其他应用产生的影响可控。</p><p>如果在应用中申请了<code>system_grant</code>权限，那么系统会在用户安装应用时，自动把相应权限授予给应用。</p><p><code>user_grant</code>指的是<strong>用户授权类型</strong>，在该类型的权限许可下，应用被允许访问的数据将会涉及到用户或设备的敏感信息，应用被允许执行的操作可能对系统或者其他应用产生严重的影响。</p><p>该类型权限不仅需要在安装包中申请权限，还需要在应用动态运行时，通过发送弹窗的方式请求用户授权。在用户手动允许授权后，应用才会真正获取相应权限，从而成功访问操作目标对象。</p><p>例如，在<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/app-permission-group-list-V5">应用权限列表</a>中，麦克风和摄像头对应的权限都是属于用户授权权限，列表中给出了详细的权限使用理由。应用需要在应用商店的详情页面，向用户展示所申请的<code>user_grant</code>权限列表。</p><h2 id="申请用户权限"><a href="#申请用户权限" class="headerlink" title="申请用户权限"></a>申请用户权限</h2><ol><li>在<code>module.json5</code>文件中声明应用需要请求的权限，且要设置需要使用的场景+使用原因</li></ol><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 权限申明</span><span class="hljs-attr">&quot;requestPermissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>  <span class="hljs-comment">// 网络请求--系统权限</span>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ohos.permission.INTERNET&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 麦克风权限 -- 用户权限</span>  <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ohos.permission.MICROPHONE&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;usedScene&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$string:reason_microphone&quot;</span>  <span class="hljs-comment">// 将来会自动显示在界面上告知用户</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span></code></pre></div><ol start="2"><li>在<code>string</code>文件中写<code>reason_microphone</code></li></ol><p><strong>注意：鸿蒙开发中，有三个 string 文件位置 base 、en_US 、zh_CN ,至少配两个，base 是必须配的，</strong></p><p><strong>以中文模式为例，需要配置 zh_CN 和 base</strong></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 里面还有其他的string值，这里只以reason_microphone为例</span>&#123;  <span class="hljs-string">&quot;string&quot;</span>: [     &#123;      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;reason_microphone&quot;</span>,      <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;面通App需要您授权麦克风才可以进行录音&quot;</span>    &#125;  ]&#125;</code></pre></div><ol start="3"><li>使用<code>abilityAccessCtrl</code>模块申请用户权限</li></ol><div class="code-wrapper"><pre><code class="hljs TS"><span class="hljs-keyword">const</span> mgr = abilityAccessCtrl.<span class="hljs-title function_">createAtManager</span>()<span class="hljs-keyword">const</span> firstReq = <span class="hljs-keyword">await</span> mgr.<span class="hljs-title function_">requestPermissionsFromUser</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>), [<span class="hljs-string">&quot;ohos.permission.MICROPHONE&quot;</span>])</code></pre></div><p><img src="/posts/20117/1-1.png" alt="image.png"></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 判断用户是否授权</span><span class="hljs-comment">// 申请授权的时候是一个数组，res.authResults是一个数组</span><span class="hljs-keyword">if</span> (firstReq.<span class="hljs-property">authResults</span>[<span class="hljs-number">0</span>] === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_DENIED</span>) &#123;  <span class="hljs-keyword">const</span> showSelect = <span class="hljs-keyword">await</span> promptAction.<span class="hljs-title function_">showDialog</span>(&#123;    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;温馨提示&#x27;</span>,    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;未授权使用麦克风将无法使用该面试录音功能，是否前往设置进行授权？&#x27;</span>,    <span class="hljs-attr">buttons</span>: [      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;离开&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#cccccc&#x27;</span> &#125;,      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;去授权&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#000000&#x27;</span> &#125;,    ]&#125;)</code></pre></div><p><img src="/posts/20117/1-2.png" alt="image.png"></p><ol start="4"><li>二次授权有多种模式，首推第一种</li></ol><p><strong>第一种：app 内唤起设置中心</strong></p><p><strong>使用</strong><code>requestPermissionOnSetting</code><strong>和首次申请授权</strong><code>requestPermissionsFromUser</code><strong>的使用方法一样</strong></p><div class="code-wrapper"><pre><code class="hljs TS"><span class="hljs-comment">// 弹窗返回选择结果，和button位置对应</span><span class="hljs-comment">// &#x27;离开&#x27;-- 0   &#x27;去授权&#x27;--1</span><span class="hljs-comment">// 同意二次授权</span><span class="hljs-keyword">if</span> (showSelect.<span class="hljs-property">index</span>) &#123;     <span class="hljs-comment">// showSelect是上面showDialog弹窗返回的用户选择结果</span>    <span class="hljs-comment">//  拉起二次授权面板</span>    <span class="hljs-keyword">const</span> secondReq = <span class="hljs-keyword">await</span> mgr.<span class="hljs-title function_">requestPermissionOnSetting</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>), [<span class="hljs-string">&quot;ohos.permission.MICROPHONE&quot;</span>])    <span class="hljs-comment">// 二次拒绝</span>    <span class="hljs-keyword">if</span> (secondReq[<span class="hljs-number">0</span>] === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_DENIED</span>) &#123;      promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;授权失败&#x27;</span> &#125;)      router.<span class="hljs-title function_">pushUrl</span>(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/Index&#x27;</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>) &#125;)    &#125;  &#125;</code></pre></div><p><img src="/posts/20117/1-3.png" alt="image.png"></p><p><strong>第二种方法：跳转到设置中心的应用管理 参考文档</strong> <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-inner-application-uiabilitycontext-V5#uiabilitycontextstartability">startAbility</a></p><p><strong>该方法也适用于其他应用唤起或跳转</strong></p><div class="code-wrapper"><pre><code class="hljs TS"><span class="hljs-keyword">if</span> (showSelect.<span class="hljs-property">index</span>) &#123;     <span class="hljs-comment">// showSelect是上面showDialog弹窗返回的用户选择结果</span>  <span class="hljs-keyword">let</span> <span class="hljs-attr">want</span>: <span class="hljs-title class_">Want</span> = &#123;      <span class="hljs-attr">bundleName</span>: <span class="hljs-string">&#x27;com.huawei.hmos.settings&#x27;</span>,   <span class="hljs-comment">// 要跳转到的应用包名</span>      <span class="hljs-attr">abilityName</span>: <span class="hljs-string">&#x27;com.huawei.hmos.settings.MainAbility&#x27;</span>, <span class="hljs-comment">// 跳转到的模块ability名</span>      <span class="hljs-attr">uri</span>: <span class="hljs-string">&#x27;application_info_entry&#x27;</span>,    <span class="hljs-comment">// 这是设置下应用与元服务的uri</span>      <span class="hljs-attr">parameters</span>: &#123;        <span class="hljs-attr">pushParams</span>: <span class="hljs-string">&#x27;com.example.interviewproject&#x27;</span>  <span class="hljs-comment">// 应用服务下，自己应用的包名</span>      &#125;    &#125;;    <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-keyword">as</span> common.<span class="hljs-property">UIAbilityContext</span>    context.<span class="hljs-title function_">startAbility</span>(want)&#125;</code></pre></div><p><strong>注意：</strong><code>pushParams</code><strong>是要填写自己应用的包名，该名字在</strong><code>app.json5</code><strong>文件中查看</strong></p><p><img src="/posts/20117/1-4.gif" alt="recording.gif"></p><p><strong>第三种方法：</strong></p><div class="code-wrapper"><pre><code class="hljs Ts"> <span class="hljs-comment">// 声明FunctionalButton</span><span class="hljs-title class_">FunctionalButton</span>(&#123;  <span class="hljs-attr">params</span>: &#123;    <span class="hljs-comment">// OpenType.OPEN_SETTING表示Button为打开授权设置页类型</span>    <span class="hljs-attr">openType</span>: functionalButtonComponentManager.<span class="hljs-property">OpenType</span>.<span class="hljs-property">OPEN_SETTING</span>,    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;去设置页授权&#x27;</span>,    <span class="hljs-comment">// 调整Button样式</span>    <span class="hljs-attr">styleOption</span>: &#123;      <span class="hljs-attr">styleConfig</span>: <span class="hljs-keyword">new</span> functionalButtonComponentManager.<span class="hljs-title class_">ButtonConfig</span>()        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Black</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)    &#125;  &#125;,</code></pre></div><h3 id="代码实例："><a href="#代码实例：" class="headerlink" title="代码实例："></a>代码实例：</h3><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-keyword">async</span> <span class="hljs-title function_">getPermissions</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-comment">// 授权控制器</span>    <span class="hljs-keyword">const</span> mgr = abilityAccessCtrl.<span class="hljs-title function_">createAtManager</span>()    <span class="hljs-comment">// 获取用户授权</span>    <span class="hljs-keyword">const</span> firstReq = <span class="hljs-keyword">await</span> mgr.<span class="hljs-title function_">requestPermissionsFromUser</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>), [<span class="hljs-string">&quot;ohos.permission.MICROPHONE&quot;</span>])    <span class="hljs-comment">// 判断用户是否授权</span>    <span class="hljs-comment">// 申请授权的时候是一个数组，res.authResults是一个数组</span>    <span class="hljs-keyword">if</span> (firstReq.<span class="hljs-property">authResults</span>[<span class="hljs-number">0</span>] === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_DENIED</span>) &#123;      <span class="hljs-keyword">const</span> showSelect = <span class="hljs-keyword">await</span> promptAction.<span class="hljs-title function_">showDialog</span>(&#123;        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;温馨提示&#x27;</span>,        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;未授权使用麦克风将无法使用该面试录音功能，是否前往设置进行授权？&#x27;</span>,        <span class="hljs-attr">buttons</span>: [          &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;离开&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#cccccc&#x27;</span> &#125;,          &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;去授权&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#000000&#x27;</span> &#125;,        ]      &#125;)      <span class="hljs-comment">// 弹窗返回选择结果，和button位置对应</span>      <span class="hljs-comment">// &#x27;离开&#x27;-- 0   &#x27;去授权&#x27;--1</span>      <span class="hljs-comment">// 同意二次授权</span>      <span class="hljs-keyword">if</span> (showSelect.<span class="hljs-property">index</span>) &#123;        <span class="hljs-comment">//  拉起二次授权面板</span>        <span class="hljs-keyword">const</span> secondReq = <span class="hljs-keyword">await</span> mgr.<span class="hljs-title function_">requestPermissionOnSetting</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>), [<span class="hljs-string">&quot;ohos.permission.MICROPHONE&quot;</span>])        <span class="hljs-comment">// 二次拒绝</span>        <span class="hljs-keyword">if</span> (secondReq[<span class="hljs-number">0</span>] === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_DENIED</span>) &#123;          promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;授权失败&#x27;</span> &#125;)          router.<span class="hljs-title function_">pushUrl</span>(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/Index&#x27;</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>) &#125;)        &#125;      &#125;    &#125;  &#125;</code></pre></div><h2 id="封装成-Permission-类"><a href="#封装成-Permission-类" class="headerlink" title="封装成 Permission 类"></a>封装成 Permission 类</h2><p>权限申请类：</p><p><strong>getPermission 方法：</strong></p><p>参数： permission: Permissions[ ] 返回 isAgree : boolean</p><p><strong>openPermissionSetting 方法：</strong></p><p>参数： permission: Permissions[ ] 返回 isAgree : boolean</p><p><strong>注意：</strong> <code>**requestPermissionOnSetting**</code><strong>比较特殊，其需要同组权限数组才能被唤起，不同组的多个权限数组无法唤起</strong></p><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/app-permission-group-list-V5">应用权限组列表</a></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-keyword">import</span> &#123; abilityAccessCtrl, <span class="hljs-title class_">Permissions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@kit.AbilityKit&quot;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Permission</span> &#123;  <span class="hljs-comment">// 创建权限管理器</span>  <span class="hljs-keyword">static</span> mgr = abilityAccessCtrl.<span class="hljs-title function_">createAtManager</span>()  <span class="hljs-keyword">static</span> ctx = <span class="hljs-title function_">getContext</span>()  <span class="hljs-comment">// 向用户请求权限</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">getPermission</span>(<span class="hljs-params"><span class="hljs-attr">permission</span>: <span class="hljs-title class_">Permissions</span>[]</span>) &#123;    <span class="hljs-comment">// 首次申请用户权限</span>    <span class="hljs-keyword">const</span> firstReq = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Permission</span>.<span class="hljs-property">mgr</span>.<span class="hljs-title function_">requestPermissionsFromUser</span>(<span class="hljs-title class_">Permission</span>.<span class="hljs-property">ctx</span>, permission)    <span class="hljs-comment">// 判断用户是否授权,有可能一次会有多个授权</span>    <span class="hljs-keyword">const</span> isAgree = firstReq.<span class="hljs-property">authResults</span>.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_GRANTED</span>)    <span class="hljs-keyword">return</span> isAgree  &#125;  <span class="hljs-comment">// 打开权限设置中心</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">openPermissionSetting</span>(<span class="hljs-params"><span class="hljs-attr">permission</span>: <span class="hljs-title class_">Permissions</span>[]</span>) &#123;    <span class="hljs-comment">// 二次拉起授权</span>    <span class="hljs-keyword">const</span> secondReq = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Permission</span>.<span class="hljs-property">mgr</span>.<span class="hljs-title function_">requestPermissionOnSetting</span>(<span class="hljs-title class_">Permission</span>.<span class="hljs-property">ctx</span>, permission)    <span class="hljs-keyword">const</span> isAgree = secondReq.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === abilityAccessCtrl.<span class="hljs-property">GrantStatus</span>.<span class="hljs-property">PERMISSION_GRANTED</span>)    <span class="hljs-keyword">return</span> isAgree  &#125;&#125;</code></pre></div><p><strong>使用案例：</strong></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 首次请求权限</span> <span class="hljs-keyword">const</span> isAgree = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Permission</span>.<span class="hljs-title function_">getPermission</span>([<span class="hljs-string">&#x27;ohos.permission.MICROPHONE&#x27;</span>]) <span class="hljs-keyword">if</span> (isAgree) &#123;   <span class="hljs-keyword">return</span> &#125; <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> promptAction.<span class="hljs-title function_">showDialog</span>(&#123;   <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;温馨提示&quot;</span>,   <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;未授权使用麦克风将无法使用该面试录音功能，是否前往设置进行授权？&quot;</span>,   <span class="hljs-attr">buttons</span>: [     &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;离开&#x27;</span>, <span class="hljs-attr">color</span>: $r(<span class="hljs-string">&#x27;app.color.common_gray_01&#x27;</span>) &#125;,     &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;去授权&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#000000&#x27;</span> &#125;   ] &#125;) <span class="hljs-comment">// 点击离开</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">index</span> === <span class="hljs-number">0</span>) &#123;   router.<span class="hljs-title function_">back</span>()   <span class="hljs-keyword">return</span> &#125; <span class="hljs-comment">// 二次拉起授权</span> <span class="hljs-keyword">const</span> isAgree2 = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Permission</span>.<span class="hljs-title function_">openPermissionSetting</span>([<span class="hljs-string">&#x27;ohos.permission.MICROPHONE&#x27;</span>]) <span class="hljs-comment">// 二次取消授权</span> <span class="hljs-keyword">if</span> (!isAgree2) &#123;   router.<span class="hljs-title function_">back</span>()   <span class="hljs-keyword">return</span> &#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>业务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HM-文件上传</title>
    <link href="/posts/30845.html"/>
    <url>/posts/30845.html</url>
    
    <content type="html"><![CDATA[<h1 id="鸿蒙应用开发–文件上传"><a href="#鸿蒙应用开发–文件上传" class="headerlink" title="鸿蒙应用开发–文件上传"></a>鸿蒙应用开发–文件上传</h1><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><p>唤起相册 –&gt; 从相册选择图片 –&gt; 将相册选择的图片上传到服务器</p><h3 id="前置知识点："><a href="#前置知识点：" class="headerlink" title="前置知识点："></a>前置知识点：</h3><ol><li><code>@ohos.file.picker</code>选择器模块 –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-picker-V5#photoviewpickerdeprecated"> PhotoViewPicker</a> –&gt; 从 API version 12 开始废弃。建议使用<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-photoaccesshelper-V5#photoviewpicker">photoAccessHelper.PhotoViewPicker</a>替代</li><li>fileIo –&gt; <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-fileio-V5#fileioopensync">fileIo.openSync</a> | fileIo.writeSync | fileIo.closeSync –&gt; 文件管理模块</li><li><code>@ohos.request</code> (上传下载)模块 –&gt;<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-request-V5#requestuploadfile9-1"> request.uploadFile</a></li></ol><h3 id="业务实现流程："><a href="#业务实现流程：" class="headerlink" title="业务实现流程："></a>业务实现流程：</h3><p><img src="/posts/30845/1-1.png" alt="img"></p><div class="code-wrapper"><pre><code class="hljs TS"><span class="hljs-keyword">async</span> <span class="hljs-title function_">putUserAvatar</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">// TODO  用户选择图片</span>  <span class="hljs-comment">// 1. 创建一个图片选择器实例对象</span>  <span class="hljs-keyword">const</span> photoPick = <span class="hljs-keyword">new</span> picker.<span class="hljs-title class_">PhotoViewPicker</span>()  <span class="hljs-comment">// const xxx = new photoAccessHelper.PhotoViewPicker()</span>  <span class="hljs-comment">// 2. 调用selected方法打开相册</span>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> photoPick.<span class="hljs-title function_">select</span>(&#123;    <span class="hljs-title class_">MIMEType</span>: picker.<span class="hljs-property">PhotoViewMIMETypes</span>.<span class="hljs-property">IMAGE_TYPE</span>, <span class="hljs-comment">// 用户可选择的文件类型</span>    <span class="hljs-attr">maxSelectNumber</span>: <span class="hljs-number">3</span>    <span class="hljs-comment">// 用户可选择的文件数量</span>  &#125;)<span class="hljs-comment">// TODO 判断是否选择图片</span>  <span class="hljs-comment">// 判断是否选择了图片</span>  <span class="hljs-keyword">if</span> (!res.<span class="hljs-property">photoUris</span>) &#123;    <span class="hljs-keyword">return</span>  &#125;  <span class="hljs-comment">// AlertDialog.show(&#123; message: res.photoUris[0], alignment: DialogAlignment.Center &#125;)</span>  <span class="hljs-comment">// TODO 将文件复制到缓存目录，后续从缓存目录获取图片并上传</span>  <span class="hljs-comment">// fileIo.copyFileSync(&#x27;要复制的文件路径&#x27;,&#x27;复制到的目标文件路径&#x27;)</span>  <span class="hljs-comment">// fileIo.copyFileSync(&#x27;要复制的文件fd&#x27;,&#x27;复制到的目标文件路径&#x27;)</span>  <span class="hljs-comment">// 3. 获取app上下文</span>  <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>)  <span class="hljs-comment">// 4. 拿到上下文中的缓存目录路径，作为后面保存图片的文件夹</span>  <span class="hljs-keyword">const</span> targetPath = <span class="hljs-string">`<span class="hljs-subst">$&#123;context.cacheDir&#125;</span>/xxx.jpg`</span>  <span class="hljs-comment">// 5. 以只读方式打开图片文件，拿到文件对象</span>  <span class="hljs-keyword">const</span> photoObj = fileIo.<span class="hljs-title function_">openSync</span>(res.<span class="hljs-property">photoUris</span>[<span class="hljs-number">0</span>], fileIo.<span class="hljs-property">OpenMode</span>.<span class="hljs-property">READ_ONLY</span>)  <span class="hljs-comment">// 6. 从图片对象中获取图片id ，复制文件到目标文件夹</span>  <span class="hljs-keyword">try</span> &#123;    fileIo.<span class="hljs-title function_">copyFileSync</span>(photoObj.<span class="hljs-property">fd</span>, targetPath)  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-title class_">AlertDialog</span>.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(err), <span class="hljs-attr">alignment</span>: <span class="hljs-title class_">DialogAlignment</span>.<span class="hljs-property">Center</span> &#125;)  &#125;  <span class="hljs-comment">// TODO 将缓存在cache中的图片文件上传</span>  <span class="hljs-comment">// request.uploadFile()返回的是个Promise对象，Promise.then返回的值.on监听其上传成功或失败</span>  <span class="hljs-keyword">const</span> task = <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">uploadFile</span>(context, &#123;    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://hmajax.itheima.net/api/uploadimg&#x27;</span>,    <span class="hljs-attr">method</span>: http.<span class="hljs-property">RequestMethod</span>.<span class="hljs-property">POST</span>,    <span class="hljs-attr">header</span>: &#123;      <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&#x27;multipart/form-data&#x27;</span>    &#125;,    <span class="hljs-attr">data</span>: [], <span class="hljs-comment">// 额外提交的数据。后端要求的话就填，没有要求给一个空数组，这是一个必填属性</span>    <span class="hljs-attr">files</span>: [&#123;      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;xxx.jpg&#x27;</span>, <span class="hljs-comment">// 这个文件名，一定要带后缀</span>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;img&#x27;</span>,    <span class="hljs-comment">// 这个值需要看接口文档，Body参数的名字</span>      <span class="hljs-attr">uri</span>: <span class="hljs-string">&quot;internal://cache/xxx.jpg&quot;</span>,      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>    &#125;]  &#125;)  task.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;complete&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;头像上传成功&#x27;</span> &#125;)  &#125;)  task.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;fail&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;头像上传失败&#x27;</span> &#125;)  &#125;)  <span class="hljs-comment">// TODO 获取上传图片的结果，结果返回一个图片存储路径，渲染到视图</span>  <span class="hljs-comment">// 后端返回的数据在res.body中，可以log一下res，看一下数据结构组成</span>  task.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;headerReceive&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;    <span class="hljs-keyword">let</span> upRes = res <span class="hljs-keyword">as</span> <span class="hljs-title class_">IRes</span>    <span class="hljs-keyword">let</span> url = (<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(upRes.<span class="hljs-property">body</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">IBody</span>).<span class="hljs-property">data</span>.<span class="hljs-property">url</span>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">img</span> = url  &#125;)&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>业务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Grid</title>
    <link href="/posts/5275.html"/>
    <url>/posts/5275.html</url>
    
    <content type="html"><![CDATA[<h1 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h1><p>如果布局是由 很多的 行 和 列 所组成、行列可能需要合并、甚至滚动，就可以使用网格布局来实现</p><h2 id="1-固定行列"><a href="#1-固定行列" class="headerlink" title="1. 固定行列"></a>1. 固定行列</h2><ol><li>子组件<strong>必须</strong>是<code>GridItem</code>组件，需要展示的内容设置在 <code>GridItem</code> 内部既可</li><li><code>GridItem</code> 只能有一个<strong>子组件</strong></li></ol><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-title class_">Grid</span>() &#123;  <span class="hljs-title class_">GridItem</span>()&#123;    <span class="hljs-comment">// 展示的内容放在这里</span>  &#125;  <span class="hljs-title class_">GridItem</span>()&#123;    <span class="hljs-comment">// 展示的内容放在这里</span>  &#125;&#125;.<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;。。。&#x27;</span>).<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;。。。。&#x27;</span>)</code></pre></div><p><img src="/posts/5275/3.1-1.png" style="zoom:67%;"> <img src="/posts/5275/3.1-2.png" style="zoom:67%;"></p><table><thead><tr><th><strong>名称</strong></th><th><strong>参数类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>columnsTemplate</td><td>string</td><td>设置当前网格布局列的数量或最小列宽值，不设置时默认 1 列。例如, ‘1fr 1fr 2fr’ 是将父组件分 3 列，将父组件允许的宽分为 4 等份，第一列占 1 份，第二列占 1 份，第三列占 2 份。</td></tr><tr><td>rowsTemplate</td><td>string</td><td>设置当前网格布局行的数量或最小行高值，不设置时默认 1 行。例如, ‘1fr 1fr 2fr’是将父组件分三行，将父组件允许的高分为 4 等份，第一行占 1 份，第二行占一份，第三行占 2 份。</td></tr><tr><td>columnsGap</td><td>Length</td><td>设置列与列的间距。默认值：0</td></tr><tr><td>rowsGap</td><td>Length</td><td>设置行与行的间距。默认值：0</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 掌握: Grid是一个容器组件, 可以布局网格</span><span class="hljs-comment">// 语法: Grid 包住 GridItem , GirdItem只能有一个子组件</span><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Index</span> &#123;  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Grid</span>() &#123;      <span class="hljs-title class_">ForEach</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">7</span> &#125;), <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;        <span class="hljs-title class_">GridItem</span>() &#123;          <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())        &#125;        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Pink</span>)      &#125;)    &#125;    .<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;1fr 2fr 1fr&#x27;</span>)    .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr &#x27;</span>)  <span class="hljs-comment">//行列数量一起确定后，只能显示行乘列的数量（6）,多的数据会被丢弃</span>    .<span class="hljs-title function_">columnsGap</span>(<span class="hljs-number">10</span>)          <span class="hljs-comment">// 列与列的间距</span>    .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)           <span class="hljs-comment">// 行与行的间距</span>    <span class="hljs-comment">// .height(300)</span>    <span class="hljs-comment">// .width(&#x27;100%&#x27;)</span>  &#125;&#125;</code></pre></div><h2 id="2-合并行列"><a href="#2-合并行列" class="headerlink" title="2. 合并行列"></a>2. 合并行列</h2><p><strong>行列号从 0 下标开始</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>参数类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>rowStart</td><td>number</td><td>指定当前元素起始行号。</td></tr><tr><td>rowEnd</td><td>number</td><td>指定当前元素终点行号。</td></tr><tr><td>columnStart</td><td>number</td><td>指定当前元素起始列号。</td></tr><tr><td>columnEnd</td><td>number</td><td>指定当前元素终点列号。</td></tr></tbody></table><p><img src="/posts/5275/3.2-1.png"></p><p><img src="/posts/5275/3.2-2.png" style="zoom: 50%;">》》》<img src="/posts/5275/3.2-3.png" style="zoom: 50%;"></p><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page10</span>_Grid_Merge &#123;  <span class="hljs-comment">// 快速生成 12 个元素的数组</span>  <span class="hljs-comment">// Array.from 是 Array 这个类上面的静态方法</span>  <span class="hljs-comment">// &#123;length:12&#125; 是一个对象，有 length 属性，值为 12</span>  <span class="hljs-attr">nums</span>: <span class="hljs-built_in">number</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">12</span> &#125;)  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;合并行列&#x27;</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-number">900</span>)        .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      <span class="hljs-title class_">Grid</span>() &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">nums</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;          <span class="hljs-keyword">if</span> (index === <span class="hljs-number">2</span>) &#123;            <span class="hljs-title class_">GridItem</span>() &#123;              <span class="hljs-title class_">Text</span>(index + <span class="hljs-string">&#x27;&#x27;</span>)                .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)                .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)            &#125;            .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#9dc3e6&#x27;</span>)            .<span class="hljs-title function_">columnStart</span>(<span class="hljs-number">2</span>)            .<span class="hljs-title function_">columnEnd</span>(<span class="hljs-number">3</span>)          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index === <span class="hljs-number">3</span>) &#123;            <span class="hljs-title class_">GridItem</span>() &#123;              <span class="hljs-title class_">Text</span>(index + <span class="hljs-string">&#x27;&#x27;</span>)                .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)                .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)            &#125;            .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#9dc3e6&#x27;</span>)            .<span class="hljs-title function_">rowStart</span>(<span class="hljs-number">1</span>)            .<span class="hljs-title function_">rowEnd</span>(<span class="hljs-number">2</span>)          &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-title class_">GridItem</span>() &#123;              <span class="hljs-title class_">Text</span>(index + <span class="hljs-string">&#x27;&#x27;</span>)                .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)                .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)            &#125;            .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#9dc3e6&#x27;</span>)          &#125;        &#125;)      &#125;      .<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr 1fr&#x27;</span>)      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr&#x27;</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">260</span>)      .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">columnsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)  &#125;&#125;</code></pre></div><h2 id="3-设置滚动"><a href="#3-设置滚动" class="headerlink" title="3. 设置滚动"></a>3. 设置滚动</h2><p><strong>设置方式:</strong></p><ol><li><strong>水平滚动</strong>：设置的是 rowsTemplate，Grid 的滚动方向为水平方向。</li><li><strong>垂直滚动</strong>：设置的是 columnsTemplate，Grid 的滚动方向为垂直方向</li></ol><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> rowsTemplate  或者columnTemplate 只写一个<span class="hljs-bullet">2.</span> 让子组件的高度或者宽度之和, 超过父组件Grid</code></pre></div><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 💥1. rowsTemplate  或者columnTemplate 只写一个</span><span class="hljs-comment">// 💥2. 让子组件的高度或者宽度之和, 超过父组件Grid</span><span class="hljs-meta">@Extend</span>(<span class="hljs-title class_">Text</span>)<span class="hljs-keyword">function</span> <span class="hljs-title function_">xxx</span>(<span class="hljs-params"></span>) &#123;  .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)  .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)  .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)  .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)&#125;<span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page11</span>_Grid_Scroll &#123;  <span class="hljs-attr">list</span>: <span class="hljs-built_in">string</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">30</span> &#125;)  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-comment">// 横向滚动 只写rowsTemplate</span>      <span class="hljs-title class_">Grid</span>() &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">string</span>, index</span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())              .<span class="hljs-title function_">xxx</span>()          &#125;          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)          .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">1</span> &#125;)        &#125;)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<span class="hljs-comment">// 横向滚动 通过 width 设置宽度</span>      .<span class="hljs-title function_">height</span>(<span class="hljs-number">300</span>)      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr&#x27;</span>)      <span class="hljs-comment">// 竖向滚动 只写columnsTemplate</span>      <span class="hljs-title class_">Grid</span>() &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">string</span>, index</span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())              .<span class="hljs-title function_">xxx</span>()          &#125;          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)          .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">1</span> &#125;)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)          .<span class="hljs-title function_">height</span>(<span class="hljs-number">50</span>)<span class="hljs-comment">// 竖向滚动-通过 height 设置高度</span>        &#125;)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">300</span>)      .<span class="hljs-title function_">columnsTemplate</span>(<span class="hljs-string">&#x27;1fr&#x27;</span>)    &#125;  &#125;&#125;</code></pre></div><h2 id="4-控制器对象-控制滚动"><a href="#4-控制器对象-控制滚动" class="headerlink" title="4. 控制器对象-控制滚动"></a>4. 控制器对象-控制滚动</h2><ol><li>创建 Scroller 对象（控制器对象）</li><li>控制器对象设置给 Grid</li><li>单独调用 Scroller 对象的 scrollPage 方法</li></ol><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 1.创建 Scroller 对象（new 关键字，调用Scroller函数，返回一个Scroller的对象）</span><span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()<span class="hljs-comment">//  2.设置给 Grid：这个属性可选，所以之前不设置也不会报错</span> <span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>) &#123;   <span class="hljs-comment">// ...</span> &#125;<span class="hljs-comment">// 3.调用 Scroller 对象的  scrollPage 方法即可实现滚动</span><span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>.<span class="hljs-title function_">scrollPage</span>(&#123;  <span class="hljs-attr">next</span>:<span class="hljs-literal">true</span> <span class="hljs-comment">// 下一页</span>  <span class="hljs-attr">next</span>:<span class="hljs-literal">false</span> <span class="hljs-comment">// 上一页</span>&#125;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page13</span>_Grid_Scroller &#123;  <span class="hljs-attr">nums</span>: <span class="hljs-built_in">number</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">200</span> &#125;)  <span class="hljs-comment">// 控制器对象，不是状态属性，不需要添加任何修饰符</span>  <span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;控制器-代码控制滚动&#x27;</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-number">900</span>)        .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      <span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>) &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">nums</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-title class_">Text</span>(index + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;&#x27;</span>)          &#125;          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;25%&#x27;</span>)        &#125;)      &#125;      .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">450</span>)      .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">columnsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr 1fr&#x27;</span>)      <span class="hljs-title class_">Row</span>() &#123;        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;上一页&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-number">100</span>)          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;            <span class="hljs-comment">// 上一页</span>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>.<span class="hljs-title function_">scrollPage</span>(&#123; <span class="hljs-attr">next</span>: <span class="hljs-literal">false</span> &#125;)          &#125;)        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;下一页&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-number">100</span>)          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;            <span class="hljs-comment">// 下一页</span>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>.<span class="hljs-title function_">scrollPage</span>(&#123; <span class="hljs-attr">next</span>: <span class="hljs-literal">true</span> &#125;)          &#125;)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">justifyContent</span>(<span class="hljs-title class_">FlexAlign</span>.<span class="hljs-property">SpaceAround</span>)    &#125;  &#125;&#125;</code></pre></div><h2 id="5-控制器对象-自定义滚动条"><a href="#5-控制器对象-自定义滚动条" class="headerlink" title="5. 控制器对象-自定义滚动条"></a>5. 控制器对象-自定义滚动条</h2><blockquote><ol><li><p>隐藏默认滚动条</p></li><li><p>使用 ScrollBar 组件自定义滚动条</p><p>​ a. ScrollBar 和 Grid 设置同一个 Scroller（控制器对象）</p><p>​ b. 单独使用<strong>ScrollBar</strong>组件通过 参数 和 属性自定义滚动条</p></li></ol></blockquote><p><strong>第一步</strong>：首先通过 <strong>Grid</strong> 的 <strong>scrollBar</strong> 属性关闭滚动条</p><table><thead><tr><th><strong>属性名</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>scrollBar</td><td>BarState</td><td>设置滚动条状态。默认值： BarState.auto <br>BarState.off 关闭<br>BarState.on 常驻<br>BarState.auto 按需显示</td></tr></tbody></table><p><strong>第二步</strong>：单独使用<strong>ScrollBar</strong>组件自定义滚动条，ScrollBar 和 Grid 设置同一个 Scroller（控制器对象）</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>必填</strong></th><th><strong>参数描述</strong></th></tr></thead><tbody><tr><td>scroller</td><td>Scroller</td><td>是</td><td><strong>可滚动组件的控制器</strong>。用于与可滚动组件进行绑定。</td></tr><tr><td>direction</td><td><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-scrollbar-0000001774121254#ZH-CN_TOPIC_0000001774121254__scrollbardirection%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E">ScrollBarDirection</a></td><td>否</td><td>滚动条的方向，控制可滚动组件对应方向的滚动。默认值：ScrollBarDirection.Vertical</td></tr><tr><td>state</td><td><a href="https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/reference/apis-arkui/arkui-ts/ts-appendix-enums.md#barstate">BarState</a></td><td>否</td><td>滚动条状态。 默认值：BarState.Auto</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-comment">// 创建控制器对象</span><span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()<span class="hljs-comment">// 设置给 Grid 组件</span><span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>)&#123;  <span class="hljs-comment">// 略</span>&#125;.<span class="hljs-title function_">scrollBar</span>(<span class="hljs-title class_">BarState</span>.<span class="hljs-property">off</span>)<span class="hljs-comment">//关闭默认滚动条</span><span class="hljs-comment">// 设置给 ScrollBar 组件</span><span class="hljs-comment">// 和 Grid 设置的是同一个</span><span class="hljs-title class_">ScrollBar</span>(&#123;  <span class="hljs-attr">scroller</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>,  <span class="hljs-attr">direction</span>: <span class="hljs-title class_">ScrollBarDirection</span>.<span class="hljs-property">Horizontal</span> <span class="hljs-comment">// 方向</span>  <span class="hljs-attr">state</span>: <span class="hljs-title class_">BarState</span>.<span class="hljs-property">On</span> <span class="hljs-comment">// 滚动条持续显示</span>&#125;) &#123;  <span class="hljs-comment">// 滚动内容 设置外观即可</span>  <span class="hljs-title class_">Text</span>()&#125;<span class="hljs-comment">// 设置外观</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Page14</span>_Grid_ScrollBar &#123;  <span class="hljs-comment">// 长度为 30 每一项都为 undefined 的数组</span>  <span class="hljs-attr">list</span>: <span class="hljs-built_in">string</span>[] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">30</span> &#125;)  <span class="hljs-comment">// 创建控制器对象==================</span>  <span class="hljs-attr">scroller</span>: <span class="hljs-title class_">Scroller</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scroller</span>()  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Column</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;控制器-自定义滚动条&#x27;</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">20</span>)        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-number">900</span>)        .<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)      <span class="hljs-comment">// 设置控制器对象给 Grid================</span>      <span class="hljs-title class_">Grid</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>) &#123;        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-built_in">string</span>, index</span>) =&gt;</span> &#123;          <span class="hljs-title class_">GridItem</span>() &#123;            <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">ItemBuilder</span>(index)          &#125;          .<span class="hljs-title function_">padding</span>(<span class="hljs-number">5</span>)          .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;30%&#x27;</span>)          .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;25%&#x27;</span>)        &#125;)      &#125;      .<span class="hljs-title function_">rowsTemplate</span>(<span class="hljs-string">&#x27;1fr 1fr 1fr&#x27;</span>) <span class="hljs-comment">// 竖向滚动</span>      .<span class="hljs-title function_">rowsGap</span>(<span class="hljs-number">10</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">300</span>)      .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">1</span> &#125;)      .<span class="hljs-title function_">padding</span>(<span class="hljs-number">5</span>)      .<span class="hljs-title function_">scrollBar</span>(<span class="hljs-title class_">BarState</span>.<span class="hljs-property">Off</span>) <span class="hljs-comment">// 关闭===============</span>      <span class="hljs-comment">// 自定义滚动条====================</span>      <span class="hljs-title class_">ScrollBar</span>(&#123;        <span class="hljs-attr">scroller</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">scroller</span>,<span class="hljs-comment">// 和 Grid 同一个控制器对象</span>        <span class="hljs-attr">direction</span>: <span class="hljs-title class_">ScrollBarDirection</span>.<span class="hljs-property">Horizontal</span>,      &#125;) &#123;          <span class="hljs-comment">//滚动条外观==============</span>        <span class="hljs-title class_">Text</span>()          .<span class="hljs-title function_">width</span>(<span class="hljs-number">40</span>)          .<span class="hljs-title function_">height</span>(<span class="hljs-number">20</span>)          .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Orange</span>)      &#125;      .<span class="hljs-title function_">width</span>(<span class="hljs-number">200</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-number">20</span>)      .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)  &#125;  <span class="hljs-meta">@Builder</span>  <span class="hljs-title class_">ItemBuilder</span>(<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>) &#123;    <span class="hljs-title class_">Text</span>((index + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())      .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#0094ff&#x27;</span>)      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)      .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)      .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swiper</title>
    <link href="/posts/23119.html"/>
    <url>/posts/23119.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h2><blockquote><p>首先来看看如何设置轮播内容，以及设置尺寸</p></blockquote><ol><li>轮播内容：内容作为<code>Swiper</code>的子组件即可</li><li>尺寸：</li></ol><p>​ a. 设置 <code>Swiper</code> 的尺寸：内容会拉伸为和 <code>Swiper</code> 一致（<strong>优先级高</strong>）</p><p>​ b. 没有设置<code>Swiper</code>的尺寸，<code>Swiper</code>被子组件的尺寸撑开</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Swiper</span>() &#123;  <span class="hljs-comment">// 轮播内容</span>  <span class="hljs-comment">// (设置尺寸，撑开swiper)</span>&#125;<span class="hljs-comment">// 设置尺寸（内容拉伸、优先级高）</span>.<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-number">100</span>)</code></pre></div><h2 id="2-常用属性方法"><a href="#2-常用属性方法" class="headerlink" title="2. 常用属性方法"></a>2. 常用属性方法</h2><table><thead><tr><th><strong>参数名</strong></th><th align="left"><strong>参数类型</strong></th><th align="left">参数描述</th></tr></thead><tbody><tr><td>autoPlay</td><td align="left">boolean</td><td align="left">子组件是否自动播放。默认值：false<strong>说明：</strong>loop 为 false 时，自动轮播到最后一页时停止轮播。手势切换后不是最后一页时继续播放。</td></tr><tr><td>interval</td><td align="left">number</td><td align="left">使用自动播放时播放的时间间隔，单位为毫秒。默认值：3000</td></tr><tr><td>vertical</td><td align="left">boolean</td><td align="left">是否为纵向滑动。默认值：false</td></tr><tr><td>loop👎</td><td align="left">boolean</td><td align="left">是否开启无限循环播放。设置为 true 时表示无限循环播放，设置为 false 时表示只播放一次。默认值：true</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Index</span> &#123;  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Swiper</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;0&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;1&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-number">160</span>)    .<span class="hljs-title function_">loop</span>(<span class="hljs-literal">false</span>) <span class="hljs-comment">// 是否开启循环 true/false</span>    .<span class="hljs-title function_">autoPlay</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 是否自动播放 true/false</span>    .<span class="hljs-title function_">interval</span>(<span class="hljs-number">4000</span>) <span class="hljs-comment">// 自动播放时间间隔 单位毫秒 默认3000</span>    .<span class="hljs-title function_">vertical</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 是否纵向滑动</span>  &#125;&#125;</code></pre></div><h2 id="3-调整导航点"><a href="#3-调整导航点" class="headerlink" title="3. 调整导航点"></a>3. 调整导航点</h2><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-title class_">Swiper</span>()&#123;  <span class="hljs-comment">// 略</span>&#125;.<span class="hljs-title function_">indicator</span>(<span class="hljs-literal">false</span>) <span class="hljs-comment">// 关闭导航</span>.<span class="hljs-title function_">indicator</span>(<span class="hljs-title class_">Indicator</span>.<span class="hljs-title function_">dot</span>()) <span class="hljs-comment">// 圆点指示器（默认）</span>.<span class="hljs-title function_">indicator</span>(<span class="hljs-title class_">Indicator</span>.<span class="hljs-title function_">digit</span>()) <span class="hljs-comment">// 数字指示器</span></code></pre></div><p><strong>位置属性：</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>参数描述</strong></th></tr></thead><tbody><tr><td>left</td><td>Length</td><td>设置导航点距离 Swiper 组件左边的距离。默认值：0 单位：vp</td></tr><tr><td>top</td><td>Length</td><td>设置导航点距离 Swiper 组件顶部的距离。默认值：0 单位：vp</td></tr><tr><td>right</td><td>Length</td><td>设置导航点距离 Swiper 组件右边的距离。默认值：0 单位：vp</td></tr><tr><td>bottom</td><td>Length</td><td>设置导航点距离 Swiper 组件底部的距离。默认值：0 单位：vp</td></tr></tbody></table><p><strong>样式属性：</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>参数类型</strong></th><th><strong>参数描述</strong></th></tr></thead><tbody><tr><td>itemWidth</td><td>Length</td><td>设置 Swiper 组件圆点导航指示器的宽，不支持设置百分比。默认值：6 单位：vp</td></tr><tr><td>itemHeightLength</td><td>Length</td><td>设置 Swiper 组件圆点导航指示器的高，不支持设置百分比。默认值：6 单位：vp</td></tr><tr><td>selectedItemWidth</td><td>Length</td><td>设置选中 Swiper 组件圆点导航指示器的宽，不支持设置百分比。默认值：12 单位：vp</td></tr><tr><td>selectedItemHeight</td><td>Length</td><td>设置选中 Swiper 组件圆点导航指示器的高，不支持设置百分比。默认值：6 单位：vp</td></tr><tr><td>color</td><td><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-types-0000001774121374#ZH-CN_TOPIC_0000001774121374__resourcecolor">ResourceColor</a></td><td>设置 Swiper 组件圆点导航指示器的颜色。默认值：’#182431’（10%透明度）</td></tr><tr><td>selectedColor</td><td>ResourceColor</td><td>设置选中 Swiper 组件圆点导航指示器的颜色。默认值：’#007DFF’</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs Ts"><span class="hljs-meta">@Entry</span><span class="hljs-meta">@Component</span>struct <span class="hljs-title class_">Index</span> &#123;  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">Swiper</span>() &#123;      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;0&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;1&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;2&#x27;</span>)        .<span class="hljs-title function_">textAlign</span>(<span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">Center</span>)        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span>)        .<span class="hljs-title function_">fontColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)    &#125;    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)    .<span class="hljs-title function_">height</span>(<span class="hljs-number">160</span>)    <span class="hljs-comment">// .indicator(false) // 关闭导航点</span>    <span class="hljs-comment">// .indicator(Indicator.digit()) // 数字导航点</span>    .<span class="hljs-title function_">indicator</span>(      <span class="hljs-title class_">Indicator</span>.<span class="hljs-title function_">dot</span>()        .<span class="hljs-title function_">left</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 左侧距离</span>        .<span class="hljs-title function_">top</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 顶部距离</span>        .<span class="hljs-title function_">bottom</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 底部距离</span>        .<span class="hljs-title function_">right</span>(<span class="hljs-number">10</span>)<span class="hljs-comment">// 右侧距离（距离属性组合使用，无需全部设置）</span>        .<span class="hljs-title function_">itemWidth</span>(<span class="hljs-number">20</span>)<span class="hljs-comment">// 指示器宽度</span>        .<span class="hljs-title function_">itemHeight</span>(<span class="hljs-number">20</span>)<span class="hljs-comment">// 指示器高度</span>        .<span class="hljs-title function_">selectedItemWidth</span>(<span class="hljs-number">30</span>)<span class="hljs-comment">// 选中指示器宽度</span>        .<span class="hljs-title function_">selectedItemHeight</span>(<span class="hljs-number">30</span>)<span class="hljs-comment">// 选中指示器高度</span>        .<span class="hljs-title function_">selectedColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Yellow</span>)<span class="hljs-comment">// 选中指示器颜色</span>        .<span class="hljs-title function_">color</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span>) <span class="hljs-comment">// 默认指示器宽度</span>    ) <span class="hljs-comment">// 圆形导航点</span>  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HarmonyOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue面试八股文二</title>
    <link href="/posts/21010.html"/>
    <url>/posts/21010.html</url>
    
    <content type="html"><![CDATA[<h2 id="关于自定义指令"><a href="#关于自定义指令" class="headerlink" title="关于自定义指令"></a>关于自定义指令</h2><p>自定义指令是一种在 Vue.js 中扩展 HTML 元素功能的方式。它们可以让你在 Vue.js 应用程序中创建自己的指令，以便在 HTML 元素上添加自定义的行为和功能。</p><p>自定义指令中的钩子函数可以让你在不同的阶段对指令进行处理:</p><ol><li><code>bind</code>：在指令绑定到元素上时调用，只调用一次。这个函数可以用来初始化指令的一些状态，例如设置元素的初始样式或属性。</li><li><code>inserted</code>：在元素插入到 DOM 中时调用。这个函数可以用来执行一些与 DOM 相关的操作，例如聚焦到元素上或添加事件监听器。</li><li><code>update</code>：在元素的 VNode 更新时调用，可能会被调用多次。这个函数可以用来根据指令的值更新元素的样式或属性。</li><li><code>componentUpdated</code>：在元素的 VNode 及其子 VNode 全部更新后调用。这个函数可以用来执行一些需要在所有子元素都更新后才能执行的操作。</li><li><code>unbind</code>：在指令从元素上解绑时调用，只调用一次。这个函数可以用来清理指令占用的资源，例如移除事件监听器或清除定时器。</li></ol><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-comment">//在main.js中</span>Vue<span class="hljs-selector-class">.directive</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>, &#123;    <span class="hljs-comment">// xxx  是指令名， v-xxx  使用</span>  <span class="hljs-built_in">inserted</span>(el,binding) &#123;  <span class="hljs-comment">// inserted  是DOM元素创建时执行的回调函数</span>     el<span class="hljs-selector-class">.style</span>.<span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;red&#x27;</span>  &#125;,  update (el, binding) &#123;  <span class="hljs-comment">// update 是元素更新时执行的回调函数</span>      el<span class="hljs-selector-class">.style</span><span class="hljs-selector-class">.color</span> = binding<span class="hljs-selector-class">.value</span>  &#125;&#125;)</code></pre></div><ol><li><code>el</code>：表示绑定了指令的 DOM 元素</li><li><code>binding</code>：一个对象，包含了指令的一些信息，例如指令的名称、值、表达式等</li></ol><h2 id="mockjs-是什么？mockjs-怎样模拟数据？模拟出来的数据是动态还是静态的？"><a href="#mockjs-是什么？mockjs-怎样模拟数据？模拟出来的数据是动态还是静态的？" class="headerlink" title="mockjs 是什么？mockjs 怎样模拟数据？模拟出来的数据是动态还是静态的？"></a>mockjs 是什么？mockjs 怎样模拟数据？模拟出来的数据是动态还是静态的？</h2><p><code>Mock.js</code>是一个用于生成模拟数据的 JavaScript 库。它可以帮助前端开发人员在没有真实数据的情况下，快速生成模拟数据，以便进行开发和测试。</p><p><code>Mock.js</code>提供了一种简单的方式来定义数据模板，然后根据模板生成随机数据。它支持多种数据类型，如字符串、数字、布尔值、日期、数组、对象等，并且可以自定义数据的格式和范围。</p><p>使用<code>Mock.js</code>可以带来以下好处：</p><ol><li><strong>提高开发效率</strong>：在开发过程中，不需要等待后端提供真实数据，可以使用<code>Mock.js</code>生成模拟数据，从而加快开发速度。</li><li><strong>独立开发和测试</strong>：前端开发人员可以独立于后端进行开发和测试，不受后端接口的限制。</li><li><strong>模拟真实数据</strong>：<code>Mock.js</code>可以生成符合真实数据格式和范围的模拟数据，从而更好地模拟真实场景，提高测试的准确性。</li><li><strong>易于使用</strong>：<code>Mock.js</code>提供了简单易懂的 API，使用起来非常方便</li></ol><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入Mock.js库</span><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span>;<span class="hljs-comment">// 定义数据模板</span><span class="hljs-keyword">const</span> template = &#123;  <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;@cname&#x27;</span>,  <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-string">&#x27;@integer(18, 60)&#x27;</span>,  <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;@email&#x27;</span>&#125;;<span class="hljs-comment">// 生成模拟数据</span><span class="hljs-keyword">const</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(template);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</code></pre></div><h2 id="选项式-API-和组合式-API-有何不同？"><a href="#选项式-API-和组合式-API-有何不同？" class="headerlink" title="选项式 API 和组合式 API 有何不同？"></a>选项式 API 和组合式 API 有何不同？</h2><p><strong>在性能方面</strong>，选项式 API 和组合式 API 并没有太大的区别。但是，由于组合式 API 提供了更好的代码组织方式和逻辑复用方式，能够让开发者更加容易地写出高性能的代码。</p><p><strong>代码组织：</strong></p><ol><li><strong>选项式 API</strong> 将组件的逻辑按照不同的功能进行分类，分别放在不同的选项中，比如<code>data</code>、<code>methods</code>、<code>computed</code>、<code>watch</code>等。这种方式的优点是代码结构清晰，易于理解和维护。但是，当组件的逻辑变得复杂时，选项式 API 可能会导致代码变得冗长和难以维护。</li><li><strong>组合式 API</strong> 将组件的逻辑拆分成不同的函数，这些函数可以在组件中自由组合和复用。这种方式的优点是代码更加灵活和可复用，能够更好地适应复杂的业务需求。</li></ol><p><strong>逻辑复用：</strong></p><ol><li><strong>选项式 API</strong> 通过<code>mixin</code>来实现逻辑复用，<code>mixin</code>是一种将多个对象的属性和方法合并到一个对象中的技术。但是，<code>mixin</code>存在一些问题，比如命名冲突、数据来源不清晰等</li><li><strong>组合式 API</strong> 通过函数来实现逻辑复用，开发者可以将相同的逻辑封装成一个函数，然后在不同的组件中复用这个函数。这种方式的优点是逻辑复用更加灵活和可控，能够避免<code>mixin</code>存在的问题</li></ol><h2 id="Vue3-里为什么要用-Proxy-替代-defineProperty？"><a href="#Vue3-里为什么要用-Proxy-替代-defineProperty？" class="headerlink" title="Vue3 里为什么要用 Proxy 替代 defineProperty？"></a>Vue3 里为什么要用 Proxy 替代 defineProperty？</h2><ul><li><p>在 Vue 3.0 中，使用 Proxy API 替代 defineProperty API 是为了改进响应式系统的性能和功能：</p><ol><li><strong>性能提升</strong>：Proxy API 比 defineProperty API 在许多情况下具有更好的性能。defineProperty 使用 Object.defineProperty 方法来拦截对象属性的访问和修改，但它需要遍历每个属性进行拦截。而 Proxy API 允许拦截整个对象，可以更高效地捕获对对象的访问和修改。</li><li><strong>更全面的拦截能力</strong>：Proxy API 提供了更多的拦截方法，比 defineProperty API 更灵活、丰富。它支持拦截目标的各种操作，包括读取、设置、删除、枚举等，甚至还可以拦截函数调用和构造函数实例化。</li><li><strong>更好的数组变化检测</strong>：Vue 3.0 使用 Proxy API 改善了数组的变化检测机制。Proxy 可以直接拦截数组的索引访问和修改，使得对数组的变化更容易被监听到，从而提供了更可靠的响应式行为。</li><li><strong>更易于处理嵌套对象</strong>：Proxy API 能够递归地拦截对象的嵌套属性，而 defineProperty 无法自动递归处理嵌套对象。这使得在 Vue 3.0 中处理嵌套对象更加简单和方便。</li><li><strong>更好的错误提示</strong>：相比于 defineProperty，Proxy API 提供了更好的错误追踪和调试信息。当使用 Proxy API 时，如果访问或修改了一个不存在的属性，会直接抛出错误，从而更容易发现和修复问题。</li></ol><p>使用 Proxy API 取代 defineProperty API 是为了提升性能、增强功能，并提供更好的开发体验和错误提示。这些改进使得 Vue 3.0 的响应式系统更加高效、灵活和可靠。</p></li></ul><h2 id="mixins-混入的理解"><a href="#mixins-混入的理解" class="headerlink" title="mixins 混入的理解"></a>mixins 混入的理解</h2><p>Mixin 是一种在 JavaScript 中实现代码复用的方式，它允许你将多个对象的属性和方法合并到一个新的对象中。</p><p>Mixin 对象可以包含组件的 data、methods、computed、watch 等选项，以及生命周期钩子函数。</p><p>ue3 不主推这种方法 Vue3 主推自定义 hooks 替代 Mixins</p><p><strong>缺点：</strong></p><ul><li>变量来源不明确</li><li>多 mixins 可能会造成命名冲突</li><li>mixins 和组件出现多对多的关系，使项目复杂度变高</li></ul><p><strong>解决缺点：</strong></p><ul><li>Vue3 的组合 API 解决了 mixins 引起的所有问题(不清晰的数据来源，命名冲突等)，这也是 Vue3 中组合式 API 出现的原因之一</li></ul><h2 id="vue2-和-vue3-的区别？"><a href="#vue2-和-vue3-的区别？" class="headerlink" title="vue2 和 vue3 的区别？"></a>vue2 和 vue3 的区别？</h2><p>Vue 3 带来了许多新特性和改进，下面是与 Vue 2 相比较著的几个区别：</p><ol><li><p><code>ue2</code>使用的是选项式 API<code>optionsAPI </code>，<code>Vue3</code>使用组合式 API<code>composition API</code>，更好的组织代码，提高代码可维护性</p></li><li><p><code>Vue3</code>使用<code>Proxy</code>代理实现了新的响应式系统，比<code>Vue2</code>使用<code>Object.defineProperty</code> 有着更好的性能和更准确的数据变化追踪能力。</p></li><li><p><code>Vue3</code>引入了<code>Teleprot</code>组件，可以将 DOM 元素渲染到 DOM 数的其他位置，用于创建模态框、弹出框等。</p></li><li><p><code>Vue3</code>全局 API 名称发生了变化，同时新增了<code>watchEffect</code>、<code>Hooks</code>等功能</p></li><li><p><code>Vue3</code>对<code>TypeScript</code>的支持更加友好</p></li><li><p><code>Vue3</code>核心库的依赖更少，减少打包体积</p></li><li><p>vue3 支持更好的<code>Tree Shanking</code>，可以更加精确的按需要引入模块</p></li></ol><h2 id="vue3-的生命周期"><a href="#vue3-的生命周期" class="headerlink" title="vue3 的生命周期"></a>vue3 的生命周期</h2><ol><li><strong>创建阶段</strong>：在这个阶段，Vue 会创建一个空的实例，并初始化一些数据和方法。这个阶段的钩子函数有 <code>beforeCreate</code> 和 <code>created</code>。</li><li><strong>挂载阶段</strong>：在这个阶段，Vue 会将实例挂载到 DOM 元素上，并渲染视图。这个阶段的钩子函数有 <code>beforeMount</code> 和 <code>mounted</code>。</li><li><strong>更新阶段</strong>：在这个阶段，当数据发生变化时，Vue 会更新视图。这个阶段的钩子函数有 <code>beforeUpdate</code> 和 <code>updated</code>。</li><li><strong>销毁阶段</strong>：在这个阶段，Vue 会销毁实例，并释放相关的资源。这个阶段的钩子函数有 <code>beforeDestroy</code> 和 <code>destroyed</code>。</li></ol><p>Vue 还提供了一些其他的钩子函数，例如 <code>activated</code> 和 <code>deactivated</code>，用于在组件被激活或停用的时候执行一些操作。</p><h2 id="vue3-的模板编译优化了解吗？"><a href="#vue3-的模板编译优化了解吗？" class="headerlink" title="vue3 的模板编译优化了解吗？"></a>vue3 的模板编译优化了解吗？</h2><p>Vue3 的模板编译优化主要包括以下几个方面：</p><ol><li><p><strong>静态提升：</strong>Vue3 会将模板中的静态节点提升到渲染函数的外部，只生成一份，而不是每次渲染都重新创建。这样可以减少内存占用和渲染时间。</p></li><li><p><strong>事件监听缓存：</strong>Vue3 会缓存事件监听函数，避免重复创建。这样可以提高性能，特别是在频繁触发事件的情况下。</p></li><li><p><strong>插槽编译优化：</strong>Vue3 对插槽的编译进行了优化，减少了不必要的渲染和更新。</p></li><li><p><strong>模板预编译：</strong>Vue3 支持模板预编译，可以将模板编译成 JavaScript 函数，而不是在运行时解析模板。这样可以提高性能，特别是在大型应用中。</p></li><li><p><strong>优化指令：</strong>Vue3 对一些指令进行了优化，例如<code>v-if</code>、<code>v-for</code>等。这些指令的性能得到了显著提高。</p></li></ol><h2 id="vue3-的-setup-是怎么实现的？"><a href="#vue3-的-setup-是怎么实现的？" class="headerlink" title="vue3 的 setup 是怎么实现的？"></a>vue3 的 setup 是怎么实现的？</h2><p><code>setup()</code> 钩子是在组件中使用组合式 API 的入口</p><ol><li><p>起初 Vue3.0 暴露变量必须 <code>return</code> 出来，<code>template</code> 中才能使用；</p></li><li><p>Vue3.2 后 只需要在 <code>script</code> 标签上加上 <code>setup</code> 属性，组件在编译的过程中代码运行的上下文是在 <code>setup()</code> 函数中，无需 <code>return</code>，<code>template</code> 可直接使用。</p></li><li><p>在 <code>setup()</code> 函数中返回的对象会暴露给模板和组件实例。其他的选项也可以通过组件实例来获取 <code>setup()</code> 暴露的属性</p></li><li><p><code>setup</code> 函数的第一个参数是组件的 <code>props</code>。和标准的组件一致，一个 <code>setup</code> 函数的 <code>props</code> 是响应式的，并且会在传入新的 props 时同步更新。如果你解构了 <code>props</code> 对象，解构出的变量将会丢失响应性。因此我们推荐通过 <code>props.xxx</code> 的形式来使用其中的 props。</p></li><li><p><code>setup</code> 函数的第二个参数是一个 <strong>Setup 上下文</strong>对象。上下文对象暴露了其他一些在 <code>setup</code> 中可能会用到的值</p><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">export</span> default &#123;  setup(props, context) &#123;    <span class="hljs-comment">// 透传 Attributes（非响应式的对象，等价于 $attrs）</span>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(context.attrs)    <span class="hljs-comment">// 插槽（非响应式的对象，等价于 $slots）</span>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(context.slots)    <span class="hljs-comment">// 触发事件（函数，等价于 $emit）</span>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(context.emit)    <span class="hljs-comment">// 暴露公共属性（函数）</span>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(context.expose)  &#125;&#125;</code></pre></div></li></ol><blockquote><p><strong>对于结合单文件组件使用的组合式 API，推荐通过 <code>&lt;script setup&gt;</code> 以获得更加简洁及符合人体工程学的语法。</strong></p></blockquote><h3 id="关于"><a href="#关于" class="headerlink" title="关于&lt;script setup&gt;"></a>关于<code>&lt;script setup&gt;</code></h3><p><code>&lt;script setup&gt;</code> (SFC) 中使用组合式 API 的编译时语法糖。当同时使用单文件组件与组合式 API 时该语法是默认推荐。相比于普通的<code>&lt;script&gt;</code>语法，它具有更多优势：</p><ul><li>更少的样板内容，更简洁的代码。</li><li>能够使用纯 TypeScript 声明 props 和自定义事件。</li><li>更好的运行时性能 (其模板会被编译成同一作用域内的渲染函数，避免了渲染上下文代理对象)。</li><li>更好的 IDE 类型推导性能 (减少了语言服务器从代码中抽取类型的工作)。</li></ul><h3 id="setup-带来的改变："><a href="#setup-带来的改变：" class="headerlink" title="setup 带来的改变："></a><strong>setup 带来的改变：</strong></h3><ol><li>属性和方法无需返回，可以直接使用</li><li>组件直接挂载，无需注册</li><li>自定义的指令也可以在模版中自动获得</li><li>this 不再是这个活跃实例的引用</li><li>默认不会对外暴露任何属性，如果有需要可使用 defineExpose</li><li>带来的大量全新 api，比如 defineProps，defineEmits，withDefault，toRef，toRefs</li></ol><h2 id="computed-和-watch-有什么区别？"><a href="#computed-和-watch-有什么区别？" class="headerlink" title="computed 和 watch 有什么区别？"></a>computed 和 watch 有什么区别？</h2><p>我先说下计算属性和 watch 的概念:</p><p><strong>计算属性:</strong></p><ol><li>当一个属性的结果需要通过其它数据运算得来, 此时就可以把这个属性定义成计算属性</li><li>计算属性是有缓存的, 多处去使用计算属性也只会计算一次, 除非依赖的数据发生变化</li><li>计算属性有完整写法, 可以通过 get 和 set 方法实现</li><li>应用场景: 购物车总价, 全选</li></ol><p><strong>watch:</strong></p><ol><li>watch 是一个侦听器, 如果某个属性的值发生变化, 我们想要去做一些业务操作, 我们就可以用 watch 去侦听该属性</li><li>watch 可以通过 deep 属性去实现深度侦听</li><li>应用场景: 实时翻译</li></ol><p>再说一下计算属性和 watch 的区别:</p><ol><li>计算属性是属性, watch 则是对属性的侦听</li><li><strong>计算属性内部不能有异步的操作, 但是 watch 是可以有异步操作的</strong></li></ol><h2 id="vue3-怎么做性能优化？"><a href="#vue3-怎么做性能优化？" class="headerlink" title="vue3 怎么做性能优化？"></a>vue3 怎么做性能优化？</h2><ol><li><p><strong>v-if 和 v-for 不能连用：</strong>如果需要根据条件渲染列表，建议将<code>v-if</code>移动到<code>v-for</code>的外层，或者使用计算属性来过滤列表。</p></li><li><p><strong>页面采用 keep-alive 缓存组件：</strong>这样可以避免组件的重复渲染，提高性能。</p></li><li><p><strong>合理使用 v-if 和 v-show：</strong><code>v-show</code>只是切换元素的显示状态，而<code>v-if</code>会真正地创建或销毁元素。如果需要频繁切换元素的显示状态，建议使用<code>v-show</code>。</p></li><li><p><strong>key 保证唯一：</strong>在使用<code>v-for</code>渲染列表时，一定要给每个元素设置唯一的<code>key</code>。</p></li><li><p><strong>使用路由懒加载、异步组件、组件封装实现复用</strong></p></li><li><p><strong>防抖、节流</strong></p></li><li><p><strong>第三方模块按需导入</strong></p></li><li><p><strong>图片懒加载</strong></p></li><li><p><strong>代码压缩：</strong>在生产环境中，建议对代码进行压缩和优化，以减少文件的大小，提高加载速度。</p></li><li><p><strong>CDN 外链：</strong></p><ul><li><p>把项目中的三方库在打包的时候先排出</p></li><li><p>使用 CDN 的外部链接引入, 这样就能减少包的体积, 提高首屏加载的速度</p></li></ul></li></ol><h2 id="ES6-新增了什么？"><a href="#ES6-新增了什么？" class="headerlink" title="ES6 新增了什么？"></a>ES6 新增了什么？</h2><ol><li><strong>块级作用域：</strong>使用<code>let</code>和<code>const</code>关键字声明变量，具有块级作用域，避免了变量提升和全局污染的问题。</li><li><strong>解构赋值：</strong>可以使用解构赋值语法从对象和数组中提取值，使代码更加简洁。 <code>let &#123; a, b &#125; = &#123; a: 1, b: 2 &#125;</code></li><li><strong>箭头函数：</strong>使用箭头<code>=&gt;</code>定义函数，语法更加简洁，并且可以自动绑定<code>this</code>上下文。</li><li><strong>模板字符串：</strong>使用反引号（&#96;）定义字符串，可以在字符串中插入变量和表达式，并且支持多行字符串。</li><li><strong>剩余参数和扩展运算符：</strong>使用<code>...</code>语法表示剩余参数和扩展运算符，可以方便地处理不定数量的参数和数组。</li><li><strong>数组方法：</strong>map、filter、every、reduce 等等</li><li><strong>函数参数默认值：</strong>可以为函数参数设置默认值，使函数更加灵活。 <code>fn(a = 1) &#123;&#125;</code></li><li><strong>Promise 异步编程解决方案：</strong>Promise 是一种处理异步操作的新方式，可以避免回调地狱，使代码更加清晰</li><li><strong>模块化：</strong>import–引入、exprot default–导出</li><li><strong>Map 和 Set 数据结构：</strong>Map 和 Set 是两种新的数据结构，分别用于存储键值对和唯一值。</li><li><strong>async&#x2F;await(es8)</strong></li></ol><h2 id="TS-的特点是什么？"><a href="#TS-的特点是什么？" class="headerlink" title="TS 的特点是什么？"></a>TS 的特点是什么？</h2><ul><li><p><strong>面向对象编程</strong>：TypeScript 支持面向对象编程，包括类、接口、继承、多态等特性。</p></li><li><p><strong>ES6 + 语法</strong>：TypeScript 支持 ES6 + 的语法，包括箭头函数、模板字符串、解构赋值等。</p></li><li><p><strong>模块系统</strong>：TypeScript 支持 ES6 的模块系统，可以将代码拆分成多个模块，提高代码的可维护性和可复用性。</p></li><li><p><strong>工具支持</strong>：TypeScript 提供了丰富的工具支持，包括编译器、代码编辑器、调试器等，可以提高开发效率。</p></li><li><p><strong>与 JavaScript 兼容</strong>：TypeScript 可以与 JavaScript 兼容，可以在现有的 JavaScript 项目中逐步引入 TypeScript。</p></li></ul><h2 id="Vuex-和-Pinia-的区别"><a href="#Vuex-和-Pinia-的区别" class="headerlink" title="Vuex 和 Pinia 的区别"></a>Vuex 和 Pinia 的区别</h2><ol><li><p>是什么</p><ul><li><p>Vuex 是 Vue2 的状态管理工具</p></li><li><p>Pinia 是 Vue3 的状态管理工具</p></li></ul></li><li><p>区别</p><ul><li><p>Pinia 对 Vue2&#x2F;3 的兼容性更好，支持 TypeScript</p></li><li><p>Pnina 是 Vuex 的替代版，符合 Vue3 组合式 API，让代码扁平化</p></li><li><p>Pnina 抛弃传统的 mutation，只有 state，getter 和 action，简化状态管理</p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>面试八股</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue面试八股文一</title>
    <link href="/posts/14099.html"/>
    <url>/posts/14099.html</url>
    
    <content type="html"><![CDATA[<h2 id="说一说MVVM、MVC-和-MVP-模式的区别是什么"><a href="#说一说MVVM、MVC-和-MVP-模式的区别是什么" class="headerlink" title="说一说MVVM、MVC 和 MVP 模式的区别是什么?"></a>说一说MVVM、MVC 和 MVP 模式的区别是什么?</h2><p>MVVM、MVC 和 MVP 是三种常见的软件架构模式，它们在前端开发中都有广泛的应用。下面是它们之间的主要区别：</p><ol><li><strong>MVC（Model-View-Controller）</strong>：<ul><li><strong>模型（Model）</strong>：负责处理应用程序的数据和业务逻辑。</li><li><strong>视图（View）</strong>：负责展示数据给用户，通常是用户界面。</li><li><strong>控制器（Controller）</strong>：接收用户的输入，并将其转换为对模型的操作，然后更新视图。</li><li>在 MVC 模式中，视图和模型之间是通过控制器进行通信的，控制器起到了桥梁的作用。</li></ul></li><li><strong>MVP（Model-View-Presenter）</strong>：<ul><li><strong>模型（Model）</strong>：与 MVC 中的模型相同，负责处理数据和业务逻辑。</li><li><strong>视图（View）</strong>：负责展示数据给用户，与 MVC 中的视图类似。</li><li><strong>presenter（Presenter）</strong>：负责协调模型和视图之间的交互，将用户的输入转换为对模型的操作，并将模型的更新反映到视图上。</li><li>在 MVP 模式中，视图和模型之间没有直接的通信，它们通过 presenter 进行交互。</li></ul></li><li><strong>MVVM（Model-View-ViewModel）</strong>：<ul><li><strong>模型（Model）</strong>：与 MVC 和 MVP 中的模型相同，负责处理数据和业务逻辑。</li><li><strong>视图（View）</strong>：负责展示数据给用户，与 MVC 和 MVP 中的视图类似。</li><li><strong>视图模型（ViewModel）</strong>：是 MVVM 模式的核心，它是一个数据绑定的抽象层，负责将模型的数据转换为视图可以理解的格式，并将视图的用户输入转换为对模型的操作。</li><li>在 MVVM 模式中，视图和模型之间通过数据绑定进行通信，视图模型起到了数据转换和协调的作用。</li></ul></li></ol><p><strong>总结：</strong></p><ul><li>VC更适用于传统的服务器渲染应用。</li><li>MVP适用于Web应用和桌面应用，但逻辑较为复杂。</li><li>MVVM 非常适合前端框架如Vue、React、Angular，能够更好地处理UI 绑定和状态管理。</li></ul><p><strong>扩展：</strong></p><ol><li>MVC：最早提出的设计模式之一，广泛应用于Web开发，如传统的JavaEE、ASP.NET应用中。典型的例子是使用SpringMVC框架进行Java Web开发，View层通常使用JSP或Thymeleaf。</li><li>MVP：在Android 开发中使用较多。在 Android 中，由于 Activity 和Fragment 既承担了逻辑又负责了 UI 渲染，使用 MVP 模式可<br>以通过Presenter来分离这些责任，使得代码更易维护和测试。</li><li>MVVM：<strong>不仅在Vue中使用，而且在其他现代前端框架如Angular和React</strong>（虽然更偏向于Flux&#x2F;Redux架构）中也有类似的实现。<br>MVVM使得开发者可以专注于业务逻辑和数据流，框架会处理具体的DOM操作和视图更新。Vue提供了简洁的双向数据绑定，Angular则使用了复杂的依赖注入和数据绑定，而 React 虽然采用单向数据流，但通过 Hooks、Context API 也能实现类似 MVVM 的效果。</li></ol><h2 id="vue-router的几种模式有什么区别？"><a href="#vue-router的几种模式有什么区别？" class="headerlink" title="vue-router的几种模式有什么区别？"></a>vue-router的几种模式有什么区别？</h2><p>vue-router一共有三种模式，分别是hash模式、history模式和abstract模式，其中，vue默认的路由模式是hash模式。<br>它们的区别在于：</p><ul><li><p>hash模式：</p><p>在 <code>hash</code> 模式下，<code>vue-router</code> 使用 URL 的哈希部分（即 <code>#</code> 后面的部分）来表示路由，当浏览器的 URL 发生变化时，<code>hashchange</code> 事件会被触发，<code>vue-router</code> 可以通过监听这个事件来更新页面的内容。</p><p><strong>优点</strong>：是兼容性好，所有浏览器都支持；缺点是 URL 中会出现 <code>#</code> 符号，不太美观。</p></li><li><p>history模式：</p><p>在 <code>history</code> 模式下，<code>vue-router</code> 使用浏览器的历史记录 API 来管理路由。它通过 <code>pushState</code> 和 <code>replaceState</code> 方法来改变 URL，并监听 <code>popstate</code> 事件来更新页面的内容。</p><p><strong>优点</strong>：是 URL 更加美观，没有 <code>#</code> 符号；缺点是兼容性不如 <code>hash</code> 模式，需要服务器端进行相应的配置，以处理路由的跳转。</p></li><li><p>abstract模式：</p><p>abstract模式一般用于nodejs服务端或者老旧浏览器（IE8、9)。在这种模式下，vue-router会放弃URL，改用JavaScript变量来维护路由队列。</p></li></ul><h2 id="什么是-Vue-指令-Vue-有哪些常用的指令"><a href="#什么是-Vue-指令-Vue-有哪些常用的指令" class="headerlink" title="什么是 Vue 指令?  Vue 有哪些常用的指令?"></a>什么是 Vue 指令?  Vue 有哪些常用的指令?</h2><ol><li><strong>v-bind</strong>：用于绑定 HTML 元素的属性，例如 <code>v-bind:src</code> 可以绑定图片的 <code>src</code> 属性。<strong>简写 &#x3D;&#x3D;&gt;  ：</strong></li><li><strong>v-on</strong>：用于绑定事件处理程序，例如 <code>v-on:click</code> 可以绑定点击事件。<strong>简写 &#x3D;&#x3D;&gt;   @</strong></li><li><strong>v-model</strong>：用于在表单元素中实现双向数据绑定，例如 <code>v-model</code> 可以绑定输入框的值。 </li><li><strong>v-if</strong>：用于根据条件控制元素的显示和隐藏，例如 <code>v-if=&quot;condition&quot;</code> 可以根据条件显示或隐藏元素。</li><li><strong>v-else</strong>：与 <code>v-if</code> 一起使用，用于在条件不成立时显示另一个元素。</li><li><strong>v-for</strong>：用于循环渲染列表，例如 <code>v-for=&quot;item in items&quot;</code> 可以循环渲染一个列表。</li><li><strong>v-show</strong>：用于根据条件控制元素的显示和隐藏，与 <code>v-if</code> 不同的是，<code>v-show</code> 只是通过 CSS 的 <code>display</code> 属性来控制元素的显示和隐藏，而不是真正地删除或添加元素。</li><li><strong>v-html</strong>：用于渲染 HTML 内容，例如 <code>v-html=&quot;htmlContent&quot;</code> 可以渲染一段 HTML 内容。</li><li><strong>v-text</strong>：用于渲染文本内容，例如 <code>v-text=&quot;textContent&quot;</code> 可以渲染一段文本内容。</li><li><strong>v-pre</strong>：用于跳过元素的编译过程，例如 <code>v-pre</code> 可以跳过一个元素的编译过程，直接显示原始的 HTML 内容。</li></ol><h2 id="vue实例挂载的过程中发生了什么"><a href="#vue实例挂载的过程中发生了什么" class="headerlink" title="vue实例挂载的过程中发生了什么?"></a>vue实例挂载的过程中发生了什么?</h2><ol><li><strong>创建 Vue 实例</strong>：首先，通过 <code>new Vue()</code> 创建一个 Vue 实例。在创建实例时，可以传入一个选项对象，用于配置 Vue 实例的各种属性和方法。</li><li><strong>初始化数据</strong>：Vue 实例会对传入的选项对象进行处理，包括初始化数据、计算属性、方法、生命周期钩子等。</li><li><strong>编译模板</strong>：如果 Vue 实例有模板选项，那么会对模板进行编译，将模板转换为渲染函数。</li><li><strong>创建render函数</strong> ：无论是编译模板还是用户提供了render函数，Vue都需要一个render函数来生成虚拟DOM。</li><li><strong>触发beforeMount钩子</strong> ：在挂载开始之前，相关的 <code>beforeMount</code>生命周期钩子将被调用。</li><li><strong>虚拟DOM的创建与渲染</strong>：Vue通过render函数生成虚拟DOM，并调用渲染器将虚拟DOM渲染为真实DOM。</li><li><strong>DOM替换或插入</strong> ：生成的真实DOM将替换挂载元素，或者插入到挂载元素中。</li><li><strong>触发mounted钩子</strong> ：一旦完成DOM插入，<code>mounted</code>生命周期钩子将被调用，表明挂载过程结束。</li></ol><p>整个挂载过程是Vue实例从开始创建到最终渲染完成的过程，它作为Vue的生命周期的一个部分，确保了组件按照既定的方式被正确编译和渲染到页面上。</p><h2 id="说说你对Vue生命周期的理解"><a href="#说说你对Vue生命周期的理解" class="headerlink" title="说说你对Vue生命周期的理解"></a>说说你对Vue生命周期的理解</h2><ol><li><strong>创建阶段</strong>：在这个阶段，Vue 会创建一个空的实例，并初始化一些数据和方法。这个阶段的钩子函数有 <code>beforeCreate</code> 和 <code>created</code>。</li><li><strong>挂载阶段</strong>：在这个阶段，Vue 会将实例挂载到 DOM 元素上，并渲染视图。这个阶段的钩子函数有 <code>beforeMount</code> 和 <code>mounted</code>。</li><li><strong>更新阶段</strong>：在这个阶段，当数据发生变化时，Vue 会更新视图。这个阶段的钩子函数有 <code>beforeUpdate</code> 和 <code>updated</code>。</li><li><strong>销毁阶段</strong>：在这个阶段，Vue 会销毁实例，并释放相关的资源。这个阶段的钩子函数有 <code>beforeDestroy</code> 和 <code>destroyed</code>。</li></ol><p>Vue 还提供了一些其他的钩子函数，例如 <code>activated</code> 和 <code>deactivated</code>，用于在组件被激活或停用的时候执行一些操作。</p><h2 id="Vue3中watch和watchEffect有什么区别"><a href="#Vue3中watch和watchEffect有什么区别" class="headerlink" title="Vue3中watch和watchEffect有什么区别"></a>Vue3中watch和watchEffect有什么区别</h2><p>Vue 中，<code>watch</code> 和 <code>watchEffect</code> 是用来观察和响应 Vue 实例上数据变化的两种不同方式，它们有以下区别：</p><ol><li><strong>定义方式</strong> ：<ul><li><code>watch</code> 需要显式地指定一个或多个要观察的数据源，并且对其变化做出响应。</li><li><code>watchEffect</code> 不需要指定观察的数据源。它会自动追踪执行过程中所有响应性依赖，并在其中任何依赖变更时重新运行。</li></ul></li><li><strong>使用方式</strong> ：<ul><li><code>watch</code> 要求传入要观测的数据源，以及一个回调函数，当观测的数据发生变化时，回调函数就会被执行。</li><li><code>watchEffect</code> 只需要一个函数作为参数，该函数内部使用到的所有响应式状态都会被追踪。</li></ul></li><li><strong>返回值</strong>：<ul><li><code>watch</code> 的回调函数可以返回一个函数，用于在监听结束时执行一些清理操作</li><li><code>watchEffect</code> 的回调函数不能返回任何值。</li></ul></li></ol><p>总之，<code>watch</code> 提供了更多的控制能力，适合于需要更细粒度反应变化的场景，而 <code>watchEffect</code> 则适合于不需要精确控制或响应多个数据源变化的场景。</p><h2 id="vue中为什么data属性是一个函数而不是一个对象？"><a href="#vue中为什么data属性是一个函数而不是一个对象？" class="headerlink" title="vue中为什么data属性是一个函数而不是一个对象？"></a>vue中为什么data属性是一个函数而不是一个对象？</h2><p>因为在Vue组件中，每个组件实例都应该维护一份被返回对象的独立的拷贝，作为自己的状态。如果data是一个对象，则意味着所有的组件实例将共享同一个data对象，那么一个组件实例对data对象的修改，将影响到所有组件实例。</p><p>通过使用一个函数返回数据对象的方式，Vue在初始化组件实例时会调用data函数，从而保证每一个组件实例都可以获取到一份独立的数据副本，这样组件之间的数据就不会相互影响了。</p><p>所以，在Vue组件中定义data时要用一个函数来返回一个初始数据对象，这是Vue设计的一部分，以确保组件数据的独立性和可复用性。</p><h2 id="Object-defineProperty和Proxy-的区别在哪里呢？"><a href="#Object-defineProperty和Proxy-的区别在哪里呢？" class="headerlink" title="Object.defineProperty和Proxy 的区别在哪里呢？"></a>Object.defineProperty和Proxy 的区别在哪里呢？</h2><p><code>object.defineProperty</code> 和 <code>Proxy</code> 都是 JavaScript 中的特性，它们提供了不同的方式来拦截和定义对象的行为。以下是两者的主要区别：</p><ol><li><strong>拦截能力</strong> :<ul><li><code>Object.defineProperty</code> 只能拦截对属性的访问和设置操作，不能拦截其他操作，例如属性的删除、对象属性的遍历等。</li><li><code>Proxy</code> 能拦截多达 13 种不同的对象操作，包括属性的读取、设置、枚举、删除等，以及更多高级操作，如有对象原型的变更、函数调用等。</li></ul></li><li><strong>使用方式</strong> :<ul><li><code>Object.defineProperty</code> 需要直接在一个已有的对象上操作定义属性。</li><li><code>Proxy</code> 在目标对象外部创建一个新的代理对象，不直接操作原始对象，而是通过这个代理对象来管理对原始对象的所有访问。</li></ul></li><li><strong>性能</strong> :<ul><li>对于 Vue.js 的使用情境而言，<code>Object.defineProperty</code> 对于大量属性的对象可能会有性能问题，因为需要递归遍历对象的每个属性。</li><li><code>Proxy</code> 可以更高效地处理嵌套对象和数组等情况，因为只有当访问到某个属性时，才会对该属性做代理处理。</li></ul></li><li><strong>灵活性和动态性</strong> :<ul><li><code>Object.defineProperty</code> 不能监测到属性的添加和删除，一旦定义了 getter 和 setter，就无法添加新的响应式属性，除非再次调用 <code>Object.defineProperty</code>。</li><li><code>Proxy</code> 可以轻松地监测到对象结构的任何变化，包括属性的添加和删除。</li></ul></li></ol><h2 id="Vue中的-nextTick有什么作用？"><a href="#Vue中的-nextTick有什么作用？" class="headerlink" title="Vue中的$nextTick有什么作用？"></a>Vue中的$nextTick有什么作用？</h2><p><code>$nextTick</code> 是 Vue.js 中的一个全局 API，它的作用是在下次 DOM 更新循环结束之后执行延迟回调。在 Vue.js 中，数据的更新是异步的，当你修改了数据后，DOM 不会立即更新，而是会在下一次事件循环中进行更新。如果你需要在 DOM 更新后执行一些操作，就可以使用 <code>$nextTick</code> 方法。</p><p><code>$nextTick</code> 方法接受一个回调函数作为参数，这个回调函数会在 DOM 更新后执行。</p><p><strong>简而言之：</strong>因为Vue 采用的是异步更新 DOM 的机制，统一在一个异步任务中去批量更新 DOM，$nextTick会在数据和视图都更新完毕时触发内部的回调函数</p><p><strong>$nextTick的实现原理</strong>：</p><p>Vue 利用了JS中的事件循环机制来实现 <code>$nextTick</code>，<code>$nextTick</code> 会使用 <code>setTimeout</code> + <code>Promise.then()</code> 来把回调函数添加到微任务队列里, 确保在数据变化引发的 DOM 更新操作后，再去执行 <code>$nextTick</code> 里的回调函数</p><h2 id="说说你对keep-alive的理解是什么？"><a href="#说说你对keep-alive的理解是什么？" class="headerlink" title="说说你对keep-alive的理解是什么？"></a>说说你对keep-alive的理解是什么？</h2><p><code>keep-alive</code> 是 Vue.js 中的一个内置组件，它可以在组件切换时缓存组件的状态，避免组件被重新创建和销毁，从而提高性能和用户体验。</p><ol><li><strong>组件状态保持</strong> ：<code>keep-alive</code>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。这样，用户切换回缓存的组件时，组件状态将会保留，如滚动位置、用户输入等。</li><li><strong>性能优化</strong> ：当组件在频繁渲染的情景下（例如切换标签页），使用 <code>keep-alive</code>可以避免重新创建组件实例，节省性能开销。</li><li><strong>生命周期钩子</strong> ：<code>keep-alive</code>会影响内部组件的生命周期钩子。被缓存的组件不会再触发 <code>destroyed</code>钩子，而是会触发 <code>deactivated</code>钩子；当组件再次激活时，会触发 <code>activated</code>钩子。</li><li><strong>包含与排除</strong> ：<code>keep-alive</code>提供 <code>include</code>和 <code>exclude</code>属性，允许组件根据组件名被缓存或不被缓存。这提供了更细致的控制，可以缓存某些组件，而让其他组件每次都重新渲染。</li><li><strong>最大缓存数</strong> ：通过设置 <code>max</code>属性，可以指定 <code>keep-alive</code>能够缓存的最大组件实例数目。超过这个数目时，最久未访问的组件缓存将会被丢弃。</li><li><strong>典型应用场景</strong> ：<code>keep-alive</code>常见于如标签页切换、路由切换中不需要每次都重新加载的场景，例如一个复杂的列表页，如果没有 <code>keep-alive</code>，每次切换回来时都需要重新发送请求获取数据并渲染。</li></ol><h2 id="你知道vue中key的原理吗？说说你对它的理解"><a href="#你知道vue中key的原理吗？说说你对它的理解" class="headerlink" title="你知道vue中key的原理吗？说说你对它的理解"></a>你知道vue中key的原理吗？说说你对它的理解</h2><p>在 Vue 中，<code>key</code> 是一个特殊的属性，它用于在虚拟 DOM Diff 算法中优化列表渲染的性能。<code>key</code> 的原理是给每个列表项一个唯一的标识，以便 Vue 能够准确地识别哪些列表项需要更新，哪些需要删除，哪些需要添加。</p><p>当 Vue 渲染一个列表时，它会根据 <code>key</code> 的值来判断列表项是否发生了变化。如果 <code>key</code> 的值没有变化，Vue 会认为列表项没有发生变化，从而复用之前的 DOM 元素，而不是重新创建一个新的 DOM 元素。这样可以避免不必要的 DOM 操作，提高渲染性能。</p><p>如果 <code>key</code> 的值发生了变化，Vue 会认为列表项发生了变化，从而重新创建一个新的 DOM 元素，并将其插入到正确的位置。这样可以确保列表项的顺序和位置是正确的。</p><p>需要注意的是，<code>key</code> 的值必须是唯一的，否则 Vue 无法准确地识别列表项的变化。通常情况下，我们可以使用列表项的 ID 或者其他唯一的标识作为 <code>key</code> 的值。</p><h2 id="Vue常用的修饰符有哪些？有什么应用场景-？"><a href="#Vue常用的修饰符有哪些？有什么应用场景-？" class="headerlink" title="Vue常用的修饰符有哪些？有什么应用场景 ？"></a>Vue常用的修饰符有哪些？有什么应用场景 ？</h2><p>在 Vue 中，修饰符是一种特殊的指令后缀，用于对指令进行一些特殊的处理。Vue 常用的修饰符有以下几种：</p><ol><li><p><strong>事件修饰符</strong>：事件修饰符用于对事件进行一些特殊的处理，例如阻止事件冒泡、阻止默认行为、按键修饰符等。</p><p>​<code>.prevent</code> - <strong>阻止默认事件修饰符</strong></p><p>​<code>.stop</code> - <strong>阻止事件冒泡修饰符</strong></p><p>​<code>.capture</code> - <strong>事件捕获模式修饰符</strong></p><p>​<code>.once</code> - <strong>单次事件修饰符</strong></p><p>​<code>.native</code>  <strong>-原生修饰符</strong>，用来监听组件根元素的原生事件的。(vue3中已移除)</p></li><li><p><strong>表单修饰符</strong>：表单修饰符用于对表单元素进行一些特殊的处理，</p><p>​ <code>.lazy</code> 修饰符可以将 <code>input</code> 事件转换为 <code>change</code> 事件</p><p>​<code>.number</code>  <strong>-数转修饰符</strong> 可以将输入的值转换为数字类型     <code>v-model.number=&quot;&#39;5&#39;&quot;</code></p><p>​<code>.trim</code> - <strong>去空修饰符</strong>可以去除输入值的首尾空格</p></li><li><p><strong>模型修饰符</strong>：模型修饰符用于对 <code>v-model</code> 指令进行一些特殊的处理，例如 <code>.sync</code> 修饰符可以实现父子组件之间的双向数据绑定。</p></li><li><p><strong>按键修饰符</strong>：按键修饰符用于对键盘事件进行一些特殊的处理，例如 <code>.enter</code> 修饰符可以监听回车键的按下。</p></li></ol><p>这些修饰符可以在不同的应用场景中使用，例如：</p><ol><li>阻止事件冒泡：当你在一个父元素中绑定了一个事件，同时在子元素中也绑定了一个相同的事件，如果你不希望子元素的事件冒泡到父元素中，可以使用 <code>.stop</code> 修饰符。</li><li>阻止默认行为：当你在一个链接或者表单中绑定了一个事件，如果你不希望链接或者表单的默认行为发生，可以使用 <code>.prevent</code> 修饰符。</li><li>按键修饰符：当你需要监听键盘事件时，可以使用按键修饰符来指定需要监听的按键，例如 <code>.enter</code> 修饰符可以监听回车键的按下。</li><li>表单修饰符：当你需要对表单元素进行一些特殊的处理时，可以使用表单修饰符，例如 <code>.lazy</code> 修饰符可以将 <code>input</code> 事件转换为 <code>change</code> 事件，<code>.number</code> 修饰符可以将输入的值转换为数字类型，<code>.trim</code> 修饰符可以去除输入值的首尾空格。</li><li>模型修饰符：当你需要实现父子组件之间的双向数据绑定时，可以使用 <code>.sync</code> 修饰符。</li></ol><h2 id="请说一说浏览器的同源策略和如何解决跨域？"><a href="#请说一说浏览器的同源策略和如何解决跨域？" class="headerlink" title="请说一说浏览器的同源策略和如何解决跨域？"></a>请说一说浏览器的同源策略和如何解决跨域？</h2><p>浏览器的同源策略是一种安全机制。同源策略要求协议、域名和端口号都必须相同，否则就是跨域。请求能发出去, 服务器也能把数据响应回来, 但是浏览器会阻止数据给回页面</p><p><strong>解决跨域</strong>:</p><ol><li><p><strong>CORS(跨域资源共享)</strong>:</p><ul><li>CORS 需要服务器端进行配置，请求服务器可以在服务器端设置响应头Access-Control-Allow-Origin，允许特定的域名或者任意域名访问。</li></ul></li><li><p><strong>代理服务器</strong>💥💥</p><ul><li>页面中请求先发给代理服务器, 代理服务器再把请求转发给接口服务器, 因为服务器与服务器之间没有跨域问题, 接口服务器能把响应的数据给到代理服务器, 因为代理服务器和项目运行的本地服务器是同源的, 所以浏览器不会触发同源保护</li><li><strong>开发环境中使用代理</strong>：在Vue项目中，常使用vue.config.js配置文件中的devServer.proxy选项来设置代理。</li><li><strong>生产环境中nginx配置反向代理</strong>：在生产环境中，可以在nginx服务器上配置反向代理来实现跨域。</li></ul></li><li><p><strong>JSONP（只支持GET请求）:</strong></p><ul><li>主要利用<code>&lt;script&gt;</code>标签没有跨域限制的特性，通过动态创建<code>&lt;script&gt;</code>来发送带有回调函数的GET请求。需要后端配合输出JSONP格式的响应。</li></ul></li></ol><p><strong>项目上线：</strong></p><ol><li>如果项目上线, 可以把网站项目和接口服务器部署在同一个源，就不存在跨域问题</li><li>如果项目上线， 网站和接口服务器不在一个源，<ul><li>配置服务器端 CORS（跨域资源共享）</li><li>使用反向代理服务器（如 Nginx）</li></ul></li></ol><p><strong>在vue项目中如何通过代理服务器解决跨域?</strong></p><p>在Vue项目中，常使用vue.config.js配置文件中的devServer.proxy选项来设置代理。<br>通过这种方式，开发服务器会在后台将请求转发至指定的服务器地址，从而绕过浏览器的同源策略。</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">devServer</span>: &#123;     <span class="hljs-attr">proxy</span>: &#123;      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://example.com&#x27;</span>, <span class="hljs-comment">// 这里替换成实际要跨域请求的目标服务器地址</span>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">pathRewrite</span>: &#123;          <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">// 重写路径，将请求路径中的&#x27;/api&#x27;去掉，这样实际请求的就是目标服务器对应的真实路径</span>        &#125;,         <span class="hljs-string">&#x27;/abc&#x27;</span>: &#123;          <span class="hljs-comment">// ... </span>        &#125;      &#125;    &#125;  &#125;&#125;)</code></pre></div><p>在用axios发请求时, 就不需要配置基地址, 如果所有的接口请求中有相同字段, 比如: &#x2F;api, 代理服务就可以用&#x2F;api去匹配接口, 走代理服务器转发。</p><h2 id="说一说vue中组件之间如何通信"><a href="#说一说vue中组件之间如何通信" class="headerlink" title="说一说vue中组件之间如何通信?"></a>说一说vue中组件之间如何通信?</h2><p>vue中组件的通信: 父子组件通信 &#x2F; 兄弟组件通信 &#x2F;  跨组件通信</p><ol><li><p><strong>父子组件通信(</strong> <strong>props和$emit</strong> <strong>)</strong></p><ul><li><p>父传子</p><ul><li><p>父组件中通过 <code>v-bind</code> 指令将数据绑定到子组件的属性上</p></li><li><p>子组件中通过在 <code>props</code> 选项中定义属性来接收从父组件传来的数据</p></li><li><p>在props选项中定义的属性可以做类型, 非空, 可选, 自定义类型校验</p></li></ul></li><li><p>子传父</p><ul><li><p>子组件通过 <code>$emit</code> 方法触发自定义事件，并将数据作为参数传递给父组件</p></li><li><p>在父组件中通过 <code>v-on</code> 指令监听子组件触发的事件，并在事件处理函数中获取子组件传递的数据</p></li></ul></li></ul></li><li><p><strong>兄弟组件通信</strong></p><ul><li><strong>使用事件总线（Event Bus）</strong>：创建一个新的 Vue 实例作为事件总线，各个组件可以通过在这个事件总线上 <code>$on</code> 监听事件以及 <code>$emit</code> 触发事件来实现相互之间的数据传递，相当于一个全局的事件中心。</li><li>注意点: vue3中不能直接用, 一般用 <code>mitt</code> 库</li></ul></li><li><p><strong>跨层级组件通信</strong></p><ul><li><strong>通过 <code>provide</code> 和 <code>inject</code>：</strong>祖先组件通过 <code>provide</code> 选项提供数据或方法，后代组件（无论层级多深）可以通过 <code>inject</code> 选项来注入并使用祖先组件提供的内容，这样就跨越了中间的组件层级实现了通信</li><li>注意点: vue2中传递数据如果需要时响应式的则需要传递 <strong>对象 或 数组</strong>, vue3则使用<strong>ref函数</strong>或<strong>reactive函数</strong>即可</li></ul></li><li><p><strong>使用 Vuex 或 Pinia（状态管理库）</strong></p></li></ol><h2 id="Vue中的过滤器了解吗？过滤器的应用场景有哪些？-vue3已废弃"><a href="#Vue中的过滤器了解吗？过滤器的应用场景有哪些？-vue3已废弃" class="headerlink" title="Vue中的过滤器了解吗？过滤器的应用场景有哪些？(vue3已废弃)"></a>Vue中的过滤器了解吗？过滤器的应用场景有哪些？(vue3已废弃)</h2><p>在Vue中，过滤器（Filters）是一些可以用在模板表达式中的特殊函数，主要用于文本格式化。它们可以用在双花括号插值和v-bind表达式中，过滤器应该被添加在JavaScript表达式的尾部，由“管道”符号表示。</p><p>过滤器可以在模板中使用 <code>|</code> 符号来调用，例如：</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- 定义局部过滤器  --&gt;</span></span><span class="language-xml">filters: &#123;</span><span class="language-xml">  formatDate(value) &#123;</span><span class="language-xml">    if (!value) return &#x27;&#x27;;</span><span class="language-xml">    // 这里使用了moment.js库来格式化时间</span><span class="language-xml">    return moment(value).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;);</span><span class="language-xml">  &#125;</span><span class="language-xml">&#125;</span><span class="language-xml"></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 定义全局过滤器 --&gt;</span></span><span class="language-xml">Vue.filter(&#x27;formatDate&#x27;, function (value) &#123;</span><span class="language-xml">  if (!value) return &#x27;&#x27;;</span><span class="language-xml">   return moment(value).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;);</span><span class="language-xml">&#125;);</span><span class="language-xml"></span><span class="language-xml">//然后在模板中，我们可以这样使用这个过滤器：</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">timestamp</span> | formatDate &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="language-xml">// 在这个示例中，管道符 | 起到的作用是指明后面跟随的是一个过滤器。</span><span class="language-xml">// 在Vue中，管道符用于将数据传递给过滤器函数，并将其作为第一个参数。</span><span class="language-xml">// 过滤器函数可以接受额外的参数，如果需要的话，可以在过滤器名之后通过管道符继续传递。</span><span class="language-xml">// timestamp 是要处理的原始数据，管道符 | 告诉Vue接下来将使用名为 formatDate 的过滤器来处理这些数据。</span><span class="language-xml">// formatDate 是定义在组件的 filters 对象中的一个方法，它会接收 timestamp 作为输入参数，处理后返回格式化的日期字符串，这个字符串随后将展示在页面的 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> 元素之内。</span></code></pre></div><p>Vue中过滤器的应用场景包括：</p><ul><li>日期、时间格式化：如上所示，可以将时间戳转换为更可读的日期格式。</li><li>文字截断：创建一个截短文字并添加省略号的过滤器，用于长文本的预览显示。</li><li>货币格式化：将数值转换显示为货币格式，如将1000转换成$1,000.00。</li><li>大小写转换：将文本的字母转换成全大写或全小写。</li><li>自定义文本格式：比如添加前缀、后缀，或者其他自定义文本操作。</li></ul><h2 id="谈谈你对slot的了解"><a href="#谈谈你对slot的了解" class="headerlink" title="谈谈你对slot的了解"></a>谈谈你对slot的了解</h2><p>在 Vue 中，<code>slot</code> 是一种用于在组件中插入内容的机制。它允许我们在父组件中定义一些内容，并将其插入到子组件的指定位置。</p><p><code>slot</code> 可以分为以下几种类型：</p><ol><li><strong>匿名插槽</strong>：匿名插槽是最基本的插槽类型，它没有名称。在子组件中，可以使用 <code>&lt;slot&gt;</code> 元素来定义匿名插槽。在父组件中，可以直接在子组件标签内部插入内容，这些内容将被插入到子组件的匿名插槽中。</li><li><strong>具名插槽</strong>：具名插槽是带有名称的插槽。<ul><li>在子组件中，可以使用 <code>&lt;slot name=&quot;slotName&quot;&gt;</code> 元素来定义具名插槽。</li><li>在父组件中，可以使用 <code>&lt;template v-slot:slotName&gt;</code> 指令来指定要插入到具名插槽中的内容。</li></ul></li><li><strong>作用域插槽</strong>：作用域插槽是一种特殊的插槽类型，它允许子组件向父组件传递数据。<ul><li>在子组件中，可以使用 <code>&lt;slot name=&quot;slotName&quot; :data=&quot;data&quot;&gt;</code> 元素来定义作用域插槽，并通过 <code>:data</code> 属性向父组件传递数据。</li><li>在父组件中，可以使用 <code>&lt;template v-slot:slotName=&quot;slotProps&quot;&gt;</code> 指令来接收子组件传递的数据，并在插槽内容中使用这些数据。</li></ul></li></ol><h2 id="SSR了解吗？SSR解决了什么问题？有做过SSR吗？你是怎么做的？"><a href="#SSR了解吗？SSR解决了什么问题？有做过SSR吗？你是怎么做的？" class="headerlink" title="SSR了解吗？SSR解决了什么问题？有做过SSR吗？你是怎么做的？"></a>SSR了解吗？SSR解决了什么问题？有做过SSR吗？你是怎么做的？</h2><p><strong>SSR（Server-Side Rendering，服务器端渲染）</strong>是一种将应用程序的界面在服务器上进行预先渲染并以 HTML 形式发送到客户端的技术。与传统的客户端渲染（CSR）相比，SSR 在服务器端生成完整的 HTML 页面，然后将其发送到浏览器，以提供更好的性能和搜索引擎优化。</p><p><strong>SSR 的优势包括：</strong></p><ol><li><strong>首屏加载性能提升</strong>：客户端不需要等待所有的JavaScript都加载完毕才能呈现页面，服务器直接发送渲染后的HTML页面，减少了首屏加载时间。</li><li><strong>搜索引擎优化（SEO）</strong>：由于搜索引擎更容易抓取渲染后的HTML页面，SSR可以提升应用的可搜寻性。</li><li><strong>减轻浏览器负担：</strong>由于部分页面渲染在服务器端完成，客户端所需处理的工作相比单页应用（SPA）减少了。</li></ol><p><strong>需要注意的是</strong>，SSR 可能会增加服务器负载和响应时间。因此，在选择是否使用 SSR 时，需要根据项目需求和复杂性来权衡利弊。</p><h2 id="TS和JS的区别"><a href="#TS和JS的区别" class="headerlink" title="TS和JS的区别?"></a>TS和JS的区别?</h2><p>我有使用TypeScript的经验。TypeScript是JavaScript的一个超集，它在JavaScript的基础上增加了一些特有的特性，主要的区别包括：</p><ol><li><p><strong>类型系统：</strong></p><ul><li>TypeScript引入了静态类型检查，可以在编写代码时检查类型错误。这可以大大减少运行时的错误，提升代码的质量和可维护性。</li><li>在JavaScript中，类型是动态的，并且不提供静态类型检查。</li></ul></li><li><p><strong>编译时错误检查：</strong></p><ul><li>由于TypeScript的类型系统，大多数类型错误会在编译阶段被捕捉到，而不是在运行时。这加快了错误的发现和修复速度。</li><li>JavaScript中的错误大多数在运行时发现，这可能导致生产环境中的bug。</li></ul></li><li><p><strong>类型注解和类型推断：</strong></p><ul><li><p>TypeScript允许开发者为变量、函数参数和返回值等指定类型。如果没有指定类型，TypeScript也能够根据代码上下文自动推断出类型。</p></li><li><p>JavaScript不支持类型注解，它是一个纯动态类型语言。</p></li></ul></li><li><p><strong>接口和枚举：</strong></p><ul><li>TypeScript支持接口（Interfaces）和枚举（Enums），这有助于构建更加严谨和可维护的代码结构。</li><li>JavaScript的ES6之前并没有接口的概念，虽然ES6加入了Class，但是并没有Enum。</li></ul></li><li><p><strong>Generics（泛型）：</strong></p><ul><li>TypeScript支持泛型，这允许开发者编写可重用的组件，而这些组件能够支持多种类型的数据。</li><li>JavaScript本身不支持泛型。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>面试八股</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/posts/25246.html"/>
    <url>/posts/25246.html</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="1-工作流程图"><a href="#1-工作流程图" class="headerlink" title="1. 工作流程图"></a>1. 工作流程图</h2><p><img src="/posts/25246/1-1.png" alt="Git工作流程图"></p><h2 id="2-Git-安装与常用命令"><a href="#2-Git-安装与常用命令" class="headerlink" title="2. Git 安装与常用命令"></a>2. Git 安装与常用命令</h2><h3 id="Git-环境配置"><a href="#Git-环境配置" class="headerlink" title="Git 环境配置"></a>Git 环境配置</h3><h4 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h4><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p>下载完成后可以得到如下安装文件：</p><p><img src="/posts/25246/2-1.png" alt="image-20240926114126523"></p><p>双击下载的安装文件来安装 Git。安装完成后在电脑桌面（也可以是其他目录)点击右键，如果能够看到如下两个菜单则说明 Git 安装成功。</p><p><img src="/posts/25246/2-2.png" alt="image-20240926114315286"></p><p>备注：</p><p><code>Git GUI</code>：Git 提供的图形界面工具</p><p><code>Git Bash</code>：Git 提供的命令行工具</p><p>当安装 Git 后首先要做的事情是设置用户名称和 email 地址。这是非常重要的，因为每次 Git 提交都会使用该用户信息</p><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>配置全局用户信息</p><div class="code-wrapper"><pre><code class="hljs git">git config --global user.name “用户名”git config --global user.email “邮箱”</code></pre></div><blockquote><p>说明：</p><p>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看</p><p>到，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名，否则无法提交代码。</p></blockquote><p><strong>※注意：</strong>这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系。</p><h4 id="解决-GitBash-乱码问题"><a href="#解决-GitBash-乱码问题" class="headerlink" title="解决 GitBash 乱码问题"></a>解决 GitBash 乱码问题</h4><ol><li><p>打开 GitBash 执行下面命令</p><div class="code-wrapper"><pre><code class="hljs shell">git config --global core.quotepath false</code></pre></div></li><li><p><code>$&#123;git_home&#125;/etc/bash.bashrc</code>文件最后加入下面两行</p><div class="code-wrapper"><pre><code class="hljs shell">export LANG=&quot;zh_CN.UTF-8&quot;export LC_ALL=&quot;zh_CN.UTF-8&quot;</code></pre></div></li></ol><h2 id="3-本地仓库创建"><a href="#3-本地仓库创建" class="headerlink" title="3. 本地仓库创建"></a>3. 本地仓库创建</h2><p>要使用 Git 对我们的代码进行版本控制，首先需要创建本地仓库：<br>在项目目录，点击右键打开<code>Git bash</code>窗口，执行命令<code>git init</code>，创建成功后可在文件夹下看到隐藏的<code>.git</code>目录。</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-meta"># 创建本地仓库</span>git <span class="hljs-keyword">init</span></code></pre></div><h3 id="1-基础操作指令"><a href="#1-基础操作指令" class="headerlink" title="1. 基础操作指令"></a>1. 基础操作指令</h3><p>Git 工作目录下对于文件的<strong>修改</strong>（增加、删除、更新）会存在几个状态，这些修改的状态会随着我们执行 Git 的命令而发生变化。</p><img src="/posts/25246/3-1.png" style="zoom: 80%;"><div class="code-wrapper"><pre><code class="hljs git"># 查看的修改的状态（暂存区、工作区）git status# 将所有修改加入暂存区git add .# 添加一个或多个文件的修改到暂存区git add 单个文件名 | 通配符# 提交暂存区内容到本地仓库的当前分支git commit -m &#x27;注释内容&#x27;</code></pre></div><h3 id="2-版本回退"><a href="#2-版本回退" class="headerlink" title="2. 版本回退"></a>2. 版本回退</h3><div class="code-wrapper"><pre><code class="hljs git">git reset --soft 版本号（其他文件未跟踪）git reset --hard 版本号git reset --mixed 版本号（与gitreset等价）# 查看提交历史git log --oneline# 可以看到已经删除的提交记录git reflog</code></pre></div><img src="/posts/25246/3-2.png" alt="image.png" style="zoom: 80%;"><h3 id="3-gitignore文件"><a href="#3-gitignore文件" class="headerlink" title="3. .gitignore文件"></a>3. <strong>.gitignore</strong>文件</h3><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为<code> .gitignore</code>的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">no .a files</span>*.a<span class="hljs-meta prompt_"># </span><span class="language-bash">but <span class="hljs-keyword">do</span> track lib.a, even though you<span class="hljs-string">&#x27;re ignoring .a files above</span></span>!lib.a<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">only ignore the &#x27;</span>TODO<span class="hljs-string">&#x27; file in the current directory, not subdir/TODO</span></span>/TODO<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">ignore all files in the &#x27;</span>build/<span class="hljs-string">&#x27; directory</span></span>build/<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">ignore doc/notes.txt, but not doc/server/arch.txt</span></span>doc/*.txt<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">ignore all .pdf files in the doc/ directory</span></span>doc/**/*.pdf</code></pre></div><h3 id="4-分支"><a href="#4-分支" class="headerlink" title="4. 分支"></a>4. 分支</h3><h4 id="1-新建分支"><a href="#1-新建分支" class="headerlink" title="1.新建分支"></a>1.新建分支</h4><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的 Bug 修改、开发新的功能，以免影响开发主线。</p><div class="code-wrapper"><pre><code class="hljs git"># 列出本地所有分支git branch# 创建一个新分支，但不会切换到该分支git branch 分支名# 新建一个分支，并切换到该分支git checkout -b 分支名# 切换分支git checkout 分支名# 合并其他分支到当前分支git merge 需要被合并的分支名</code></pre></div><img src="/posts/25246/3-3.png" alt="image.png" style="zoom: 80%;"><h4 id="2-合并、删除分支"><a href="#2-合并、删除分支" class="headerlink" title="2. 合并、删除分支"></a>2. 合并、删除分支</h4><p><strong>不能删除当前分支，只能删除其他分支</strong></p><div class="code-wrapper"><pre><code class="hljs git"># 删除分支git branch -d 分支名# 不做任何检查，强制删除git branch -D 分支名# 合并其他分支到当前分支git merge 需要被合并的分支名</code></pre></div><img src="/posts/25246/3-4.png" alt="img" style="zoom: 80%;"><h4 id="3-解决冲突"><a href="#3-解决冲突" class="headerlink" title="3. 解决冲突"></a>3. 解决冲突</h4><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p><blockquote><ol><li>处理文件中冲突的地方</li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ol></blockquote><h4 id="4-开发中分支使用原则与流程"><a href="#4-开发中分支使用原则与流程" class="headerlink" title="4. 开发中分支使用原则与流程"></a>4. 开发中分支使用原则与流程</h4><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的 Bug 修改、开发新的功能，以免影响开发主线。</p><p>在开发中，一般有如下分支使用原则与流程：</p><ul><li>master （生产） 分支<br>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支。</li><li>develop（开发）分支<br>是从 master 创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到 master 分支,准备上线。</li><li>feature&#x2F;xxxx 分支<br>从 develop 创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到 develop 分支。</li><li>hotfix&#x2F;xxxx 分支，<br>从 master 派生的分支，一般作为线上 bug 修复使用，修复完成后需要合并到 master、test、develop 分支。</li><li>还有一些其他分支，在此不再详述，例如 test 分支（用于代码测试）、pre 分支（预上线分支）等等。</li><li><img src="/posts/25246/3-5.png" alt="分支"></li></ul><h2 id="4-Git-远程仓库"><a href="#4-Git-远程仓库" class="headerlink" title="4. Git 远程仓库"></a>4. Git 远程仓库</h2><h3 id="1-远程仓库"><a href="#1-远程仓库" class="headerlink" title="1. 远程仓库"></a>1. 远程仓库</h3><p>前面我们已经知道了 Git 中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建 Git 远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有 GitHub、码云、GitLab 等。<br>gitHub（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 gitHub<br>码云（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于 GitHub，码云速度会更快<br>GitLab （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务,一般用于在企业、学校等内部网络搭建 git 私服。</p><h3 id="2-创建远程仓库"><a href="#2-创建远程仓库" class="headerlink" title="2. 创建远程仓库"></a>2. 创建远程仓库</h3><img src="/posts/25246/4-1.png" alt="创建远程仓库" style="zoom:80%;"><h3 id="3-配置-SSH-公钥"><a href="#3-配置-SSH-公钥" class="headerlink" title="3. 配置 SSH 公钥"></a>3. 配置 SSH 公钥</h3><div class="code-wrapper"><pre><code class="hljs git"># 生成SSH公钥ssh-keygen -t rsa -C &quot;邮件地址&quot;# 验证是否配置成功ssh -T git@gitee.com</code></pre></div><blockquote><p>不断回车,如果公钥已经存在，则自动覆盖</p></blockquote><p>Gitee 设置账户共公钥</p><blockquote><p>进入 C:\Users\用户名，在里面进入.ssh 文件</p><p>用记事本打开里面的 id_rsa.pub,全选复制里面的代码</p><p>或者 cmd 中<code>cat ~/.ssh/id_rsa.pub</code></p></blockquote><img src="/posts/25246/4-4.png" alt="SSH公钥" style="zoom: 67%;"><h3 id="4-操作远程仓库"><a href="#4-操作远程仓库" class="headerlink" title="4. 操作远程仓库"></a>4. 操作远程仓库</h3><h4 id="1-添加远程仓库"><a href="#1-添加远程仓库" class="headerlink" title="1. 添加远程仓库"></a>1. 添加远程仓库</h4><p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接。</strong></p><ul><li>仓库别名，默认是<strong>origin</strong>，取决于远端服务器设置</li><li>仓库路径，从远端服务器获取此 URL</li></ul><div class="code-wrapper"><pre><code class="hljs git"># 本地仓库跟远程的仓库建立连接，git remote add &lt;仓库别名&gt; &lt;仓库路径&gt;eg: git remote add origin &#x27;仓库地址&#x27;# 查看远程仓库git remote</code></pre></div><h4 id="2-推送到远程仓库"><a href="#2-推送到远程仓库" class="headerlink" title="2. 推送到远程仓库"></a>2. 推送到远程仓库</h4><div class="code-wrapper"><pre><code class="hljs git">git push [-f][-u] 仓库别名 本地分支名:远端分支名-f  表示强制覆盖-u  推送到远端的同时并且建立起和远端分支的关联关系。# （正常提交） 提交到远程仓库的master分支# 如果远程分支名和本地分支名称相同，则可以只写本地分git push origin master# 强制推送代码到远程仓库git push -f origin master# 查看关联关系git branch -vv</code></pre></div><blockquote><p>在 Git 中，推送操作（push）是将本地仓库中的代码更新推送到远程仓库中。如果远程仓库不存在，Git 就无法确定将本地代码推送到哪个位置。</p><p>因此，在使用<code>git push</code>命令之前，你需要在远程端（如 GitHub、GitLab、Bitbucket 等）上创建一个空仓库，然后将其与本地仓库关联。只有在这种情况下，才能成功地将本地代码推送到远程仓库中。</p><p>也不需要起别名，使用远程仓库的完整 URL：</p><div class="code-wrapper"><pre><code class="hljs shell">git push &lt;remote_url&gt; &lt;branch_name&gt;</code></pre></div></blockquote><h4 id="3-从远程仓库克隆"><a href="#3-从远程仓库克隆" class="headerlink" title="3. 从远程仓库克隆"></a>3. 从远程仓库克隆</h4><div class="code-wrapper"><pre><code class="hljs git"># 克隆代码# 注意1：Git本地仓库会自动与克隆地址仓库建立连接，也就不需要再git remote add ...# 注意2：仓库公开随意克隆，推送需要身为仓库团队成员# 本地目录可以省略，会自动生成一个目录git clone &lt;仓库路径&gt; [本地目录]</code></pre></div><h4 id="4-从远程仓库中抓取和拉取"><a href="#4-从远程仓库中抓取和拉取" class="headerlink" title="4. 从远程仓库中抓取和拉取"></a>4. 从远程仓库中抓取和拉取</h4><div class="code-wrapper"><pre><code class="hljs git"># 抓取就是将仓库里的更新都抓取到本地，不会进行合并git fetch [仓库别名] [分支名]# 拉取就是将远端仓库的修改拉到本地并自动进行合并git pull [仓库别名] [分支名]eg：git pull origin master# 如果不指定远端名称和分支名，则抓取所有分支</code></pre></div><h4 id="5-解决合并冲突"><a href="#5-解决合并冲突" class="headerlink" title="5. 解决合并冲突"></a>5. 解决合并冲突</h4><p>在一段时间，A、B 用户修改了同一个文件，且<strong>修改了同一行位置的代码</strong>，此时会发生<strong>合并冲突</strong>。</p><p>A 用户在本地修改代码后优先推送到远程仓库，此时 B 用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时 B 用户晚于 A 用户，<strong>故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支</strong>，如下图所示。</p><p><img src="/posts/25246/4-5.png" alt="解决远程仓库合并冲突"></p><p>在 B 用户拉取代码时，因为 A、B 用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。</p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同</strong></p><h4 id="6-移除远程仓库"><a href="#6-移除远程仓库" class="headerlink" title="6. 移除远程仓库"></a>6. 移除远程仓库</h4><div class="code-wrapper"><pre><code class="hljs git">git remote rm &lt;仓库别名&gt;git remote remove &lt;仓库别名&gt;</code></pre></div><h2 id="附"><a href="#附" class="headerlink" title="附:"></a>附:</h2><ol><li><strong>切换分支前先提交本地的修改</strong></li><li>代码及时提交，提交过了就不会丢</li></ol><h2 id="5-命令汇总"><a href="#5-命令汇总" class="headerlink" title="5. 命令汇总"></a>5. 命令汇总</h2><div class="code-wrapper"><pre><code class="hljs git">#=============本地仓库操作==========================# 创建本地仓库git init# 配置全局用户名和邮箱git config --global user.name “用户名”git config --global user.email “邮箱”# 查看全局配置git config --list# 仓库建立远程连接git remote add &lt;仓库别名&gt; &lt;仓库路径&gt;eg: git remote add origin &#x27;仓库地址&#x27;# 查看远程仓库git remote# 查看的修改的状态（暂存区、工作区）git status# 将所有修改加入暂存区git add .# 添加一个或多个文件的修改到暂存区git add 单个文件名 | 通配符# 提交暂存区内容到本地仓库的当前分支git commit -m &#x27;注释内容&#x27;# 版本回退git reset --soft 版本号（其他文件未跟踪）git reset --mixed 版本号（与gitreset等价）git reset --hard 版本号  --&gt; 常用# 查看历史详情# git log --list# 查看提交历史git log --oneline# 可以看到已经删除的提交记录git reflog#===============分支操作===================# 列出本地所有分支git branch# 创建一个新分支，但不会切换到该分支git branch 分支名# 新建一个分支，并切换到该分支git checkout -b 分支名# 切换分支git checkout 分支名# 合并其他分支到当前分支git merge 需要被合并的分支名# 删除分支git branch -d 分支名# 不做任何检查，强制删除git branch -D 分支名#================本地操作远程仓库==================# 本地仓库跟远程的仓库建立连接，git remote add &lt;仓库别名&gt; &lt;仓库路径&gt;eg: git remote add origin &#x27;仓库地址&#x27;# 查看远程仓库git remotegit push [-f][-u] 仓库别名 本地分支名:远端分支名-f  表示强制覆盖-u  推送到远端的同时并且建立起和远端分支的关联关系。# 克隆代码# 注意1：Git本地仓库会自动与克隆地址仓库建立连接，也就不需要再git remote add ...# 注意2：仓库公开随意克隆，推送需要身为仓库团队成员# 本地目录可以省略，会自动生成一个目录git clone &lt;仓库路径&gt; [本地目录]# （正常提交） 提交到远程仓库的master分支# 如果远程分支名和本地分支名称相同，则可以只写本地分git push origin master# 强制推送代码到远程仓库git push -f origin master# 查看关联关系git branch -vv# 抓取就是将仓库里的更新都抓取到本地，不会进行合并git fetch [仓库别名] [分支名]# 拉取就是将远端仓库的修改拉到本地并自动进行合并git pull [仓库别名] [分支名]eg：git pull origin master# 如果不指定远端名称和分支名，则抓取所有分支# 移除本地与远程仓库的连接git remote rm &lt;仓库别名&gt;git remote remove &lt;仓库别名&gt;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo基础配置</title>
    <link href="/posts/271.html"/>
    <url>/posts/271.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-修改-Fluid-主题"><a href="#Hexo-修改-Fluid-主题" class="headerlink" title="Hexo 修改 Fluid 主题"></a>Hexo 修改 Fluid 主题</h1><blockquote><p>以 Fluid 主题为例</p><p>Github 项目<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a></p><p>主题文档<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B"> Hexo Fluid 用户手册</a></p></blockquote><h2 id="1-下载主题包"><a href="#1-下载主题包" class="headerlink" title="1. 下载主题包"></a>1. 下载主题包</h2><p>载 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a> 解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><p><img src="/posts/271/1-1.png" alt="image.png"></p><h2 id="2-修改-config-yml-文件"><a href="#2-修改-config-yml-文件" class="headerlink" title="2. 修改_config.yml 文件"></a>2. 修改_config.yml 文件</h2><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span> <span class="hljs-comment"># 指定主题</span></code></pre></div><p><img src="/posts/271/2-1.png" alt="image.png"></p><p><img src="/posts/271/2-2.png" alt="image.png"></p><h2 id="3-本地部署查看效果并上传到-GitHub"><a href="#3-本地部署查看效果并上传到-GitHub" class="headerlink" title="3. 本地部署查看效果并上传到 GitHub"></a>3. 本地部署查看效果并上传到 GitHub</h2><p>hexo 三件套</p><div class="code-wrapper"><pre><code class="hljs bash">hexo clean   // 清除缓存hexo g       // 生成打包hexo d       // 上传</code></pre></div><p><img src="/posts/271/3-1.png" alt="image.png"></p><h1 id="Hexo-文章生成永久链接"><a href="#Hexo-文章生成永久链接" class="headerlink" title="Hexo 文章生成永久链接"></a>Hexo 文章生成永久链接</h1><h2 id="1-默认文章链接配置"><a href="#1-默认文章链接配置" class="headerlink" title="1. 默认文章链接配置"></a>1. 默认文章链接配置</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">premalink:</span> <span class="hljs-string">:year/:month/:day/:title</span></code></pre></div><p>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><h2 id="2-Hexo-abbrLink-插件"><a href="#2-Hexo-abbrLink-插件" class="headerlink" title="2. Hexo abbrLink 插件"></a>2. Hexo abbrLink 插件</h2><p>根目录 Git Bash 终端运行以下代码</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-abbrlink --save</code></pre></div><h2 id="3-配置文件下添加"><a href="#3-配置文件下添加" class="headerlink" title="3. 配置文件下添加"></a>3. 配置文件下添加</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">abbrlink:</span>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc16</span> <span class="hljs-comment">#算法：</span>  <span class="hljs-attr">crc16(default) and crc32 rep:</span> <span class="hljs-string">hex</span></code></pre></div><p><img src="/posts/271/4-1.png" alt="image.png"></p><h2 id="4-配置文件-permalink-修改"><a href="#4-配置文件-permalink-修改" class="headerlink" title="4. 配置文件 permalink 修改"></a>4. 配置文件 permalink 修改</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink.html</span><span class="hljs-comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></code></pre></div><p><img src="/posts/271/5-1.png" alt="image.png"></p><p>生成完后，原 md 文件的 Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的<code>ID</code> 。这个字段确保了在我们修改了<code>Front-matter</code> 内的博客标题 title 或创建日期 date 字段之后而不会改变链接地址.</p><h1 id="Hexo-Asset-Image-插件安装"><a href="#Hexo-Asset-Image-插件安装" class="headerlink" title="Hexo Asset Image 插件安装"></a>Hexo Asset Image 插件安装</h1><blockquote><p>Hexo Asset Image 是一个专为 Hexo 博客框架设计的开源插件，它旨在简化图片资源的管理和插入流程。通过本插件，博主可以更加便捷地在文章中引用本地或远程的图片，并自动处理图片路径，优化博客的构建和部署过程。对于追求高效管理和优雅展示图片内容的 Hexo 用户来说，这是一个不可或缺的工具。</p></blockquote><p>主要解决本地图片资源加载不出的问题</p><h2 id="项目快速启动"><a href="#项目快速启动" class="headerlink" title="项目快速启动"></a>项目快速启动</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先确保你的 Hexo 环境已经搭建完毕，之后在博客根目录下，通过 npm 安装此插件：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-asset-image --save</code></pre></div><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>编辑 Hexo 的配置文件<code>_config.yml</code>，添加以下行以启用插件：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">plugins:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">hexo-asset-image</span></code></pre></div><p>插件会处理这个相对路径，在生成静态站点时将图片移动到正确的资产目录下，并自动更新 Markdown 文件中的图片链接。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>在 Markdown 格式的文章中，你可以像下面这样直接引用图片：</p><div class="code-wrapper"><pre><code class="hljs markdown">![](<span class="hljs-link">path/to/your/image.jpg</span>)</code></pre></div><p>插件会处理这个相对路径，在生成静态站点时将图片移动到正确的资产目录下，并自动更新 Markdown 文件中的图片链接。</p><h3 id="自动创建同名文件夹放图片"><a href="#自动创建同名文件夹放图片" class="headerlink" title="自动创建同名文件夹放图片"></a>自动创建同名文件夹放图片</h3><p>查看 hexo 官网，可以看到官网推荐将<code>post_asset_folder</code>属性置为 true，在新建博客<code>hexo n “xxx”</code>的时候会在根目录下创建一个同名的文件夹，将需要插入的图片放到这个目录。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><span class="hljs-attr">marked:</span>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客在GitHub搭建</title>
    <link href="/posts/42759.html"/>
    <url>/posts/42759.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-准备工具"><a href="#1-准备工具" class="headerlink" title="1.准备工具"></a>1.准备工具</h1><h2 id="1-1-Node-js-和-git"><a href="#1-1-Node-js-和-git" class="headerlink" title="1.1. Node.js 和 git"></a>1.1. Node.js 和 git</h2><p><a href="https://nodejs.org/en/">下载 nodejs</a></p><p><a href="https://git-scm.com/downloads">下载 git</a></p><h2 id="1-2-测试是否成功"><a href="#1-2-测试是否成功" class="headerlink" title="1.2. 测试是否成功"></a>1.2. 测试是否成功</h2><div class="code-wrapper"><pre><code class="hljs cmd">node -vnpm -v（这个是node附带的）git -v</code></pre></div><p><img src="/posts/42759/1.2-1.png" alt="image.png"></p><h2 id="1-3-下载-Hexo"><a href="#1-3-下载-Hexo" class="headerlink" title="1.3. 下载 Hexo"></a>1.3. 下载 Hexo</h2><div class="code-wrapper"><pre><code class="hljs cmd">npm install hexo-cli -g</code></pre></div><p><img src="/posts/42759/1.3-1.png" alt="image.png"></p><h1 id="2-搭建-GitHub-仓库"><a href="#2-搭建-GitHub-仓库" class="headerlink" title="2. 搭建 GitHub 仓库"></a>2. 搭建 GitHub 仓库</h1><p>成功下载好工具之后，我们开始搭建 GitHub 存储静态页面的仓库</p><ul><li>首先注册&#x2F;登入<a href="https://github.com/">Github</a></li><li>点击 Create a new repository 进入新建仓库页面</li></ul><p>仓库名输入：</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">用户名<span class="hljs-string">.github.io</span></code></pre></div><blockquote><p>勾选 Public</p><p>勾选 Add a README file</p><p>拉到下面点击 create 创建</p></blockquote><p><img src="/posts/42759/2-1.png" alt="image.png"></p><h1 id="3-生成-SSH-keys-与-GitHub-建立连接"><a href="#3-生成-SSH-keys-与-GitHub-建立连接" class="headerlink" title="3. 生成 SSH keys 与 GitHub 建立连接"></a>3. 生成 SSH keys 与 GitHub 建立连接</h1><h2 id="3-1-生成-SSH-Keys"><a href="#3-1-生成-SSH-Keys" class="headerlink" title="3.1. 生成 SSH Keys"></a>3.1. 生成 SSH Keys</h2><p>桌面，右键空白处然后点 Git bash here,输入</p><div class="code-wrapper"><pre><code class="hljs Bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span></code></pre></div><p><img src="/posts/42759/3.1-1.png" alt="image.png"></p><p>然后进入<code>C:\Users\</code>用户名，在里面进入<code>.ssh</code>文件</p><p>用记事本打开里面的<code>id_rsa.pub</code>,全选复制里面的代码</p><h2 id="3-2-打开-Github-连接-SSH"><a href="#3-2-打开-Github-连接-SSH" class="headerlink" title="3.2. 打开 Github 连接 SSH"></a>3.2. 打开 Github 连接 SSH</h2><p>进入用户设置，找到 SSH keys</p><p>新建 SSH keys，名称随意，在下面粘贴代码，然后创建</p><p><img src="/posts/42759/3.2-1.png" alt="image.png"></p><h2 id="3-3-测试是否成功"><a href="#3-3-测试是否成功" class="headerlink" title="3.3. 测试是否成功"></a>3.3. 测试是否成功</h2><p>在 git bash 中输入</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com</code></pre></div><p><img src="/posts/42759/3.3-1.png" alt="image.png"></p><h1 id="4-本地部署"><a href="#4-本地部署" class="headerlink" title="4. 本地部署"></a>4. 本地部署</h1><h2 id="4-1-hexo-初始化"><a href="#4-1-hexo-初始化" class="headerlink" title="4.1. hexo 初始化"></a>4.1. hexo 初始化</h2><p>在喜欢位置新建文件 Blog，然后进入文件夹</p><p>右键空白处然后点 Git bash here，输入</p><div class="code-wrapper"><pre><code class="hljs bash">hexo init</code></pre></div><p>如果‘command not find’，就在前面加上<code>npx</code>，如：<code>npx hexo init</code></p><h2 id="4-2-hexo-安装"><a href="#4-2-hexo-安装" class="headerlink" title="4.2. hexo 安装"></a>4.2. hexo 安装</h2><div class="code-wrapper"><pre><code class="hljs bash">hexo install    // hexo安装</code></pre></div><h2 id="4-3-hexo-打包生成部署本地"><a href="#4-3-hexo-打包生成部署本地" class="headerlink" title="4.3. hexo 打包生成部署本地"></a>4.3. hexo 打包生成部署本地</h2><div class="code-wrapper"><pre><code class="hljs bash">hexo g     // hexo生成hexo s     // hexo本地部署</code></pre></div><p>（如果不成功的话就重复直到成功，因为国内与 github 连接不稳定）</p><p>现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了</p><p>然后回到命令行，<code>ctrl+c</code>关闭</p><h1 id="5-上线博客"><a href="#5-上线博客" class="headerlink" title="5. 上线博客"></a>5. 上线博客</h1><h2 id="5-1-修改仓库地址"><a href="#5-1-修改仓库地址" class="headerlink" title="5.1. 修改仓库地址"></a>5.1. 修改仓库地址</h2><ul><li>进入之前的 Blog 文件夹，用记事本打开<code>_config.yml</code>,拉到最下面将 deploy 后面的全删掉，复制粘贴这段</li></ul><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><span class="hljs-attr">repository:</span><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span></code></pre></div><p>注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！</p><ul><li>去 github 之前生成的仓库页面，点 code，复制 https 链接</li></ul><p><img src="/posts/42759/5.1-1.png" alt="image.png"></p><ul><li>将其粘贴到我们记事本中的<code>repository：</code>后面,然后保存退出</li></ul><p><img src="/posts/42759/5.1-2.png" alt="image.png"></p><h2 id="5-2-回到博客文件夹，git-bash"><a href="#5-2-回到博客文件夹，git-bash" class="headerlink" title="5.2. 回到博客文件夹，git bash"></a>5.2. 回到博客文件夹，git bash</h2><h3 id="5-2-1-安装自动部署发布工具"><a href="#5-2-1-安装自动部署发布工具" class="headerlink" title="5.2.1. 安装自动部署发布工具"></a>5.2.1. 安装自动部署发布工具</h3><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre></div><h3 id="5-2-2-在-Blog-文件夹-git-bash"><a href="#5-2-2-在-Blog-文件夹-git-bash" class="headerlink" title="5.2.2. 在 Blog 文件夹 git bash"></a>5.2.2. 在 Blog 文件夹 git bash</h3><div class="code-wrapper"><pre><code class="hljs bash">hexo g   （生成）hexo d   （上传)</code></pre></div><p><img src="/posts/42759/5.2.2-1.png" alt="image.png"></p><p>如果是第一次使用 git 的话会需要配置</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span>git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span></code></pre></div><p>配置完后再<code>hexo d</code>上传</p><p>在跳出来的窗口内进行登录</p><p>接下来我们就成功把本地内容上传到 github 了</p><p>上传成功以后，我们就算搭建好了！上自己的网址看看吧</p><p>网址是我们之前设的仓库名：用户名.github.io</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
